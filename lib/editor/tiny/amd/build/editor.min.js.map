{"version":3,"file":"editor.min.js","sources":["../src/editor.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TinyMCE Editor Manager.\n *\n * @module editor_tiny/editor\n * @copyright  2022 Andrew Lyons <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport jQuery from 'jquery';\nimport Pending from 'core/pending';\nimport {getDefaultConfiguration} from './defaults';\nimport {getTinyMCE, baseUrl} from './loader';\nimport * as Options from './options';\nimport {addToolbarButton, addToolbarButtons, addToolbarSection} from './utils';\n\n/**\n * Storage for the TinyMCE instances on the page.\n * @type {Map}\n */\nconst instanceMap = new Map();\n\n/**\n * The default editor configuration.\n * @type {Object}\n */\nlet defaultOptions = {};\n\n/**\n * Require the modules for the named set of TinyMCE plugins.\n *\n * @param {string[]} pluginList The list of plugins\n * @return {Promise[]} A matching set of Promises relating to the requested plugins\n */\nconst importPluginList = async(pluginList) => {\n    // Fetch all of the plugins from the list of plugins.\n    // If a plugin contains a '/' then it is assumed to be a Moodle AMD module to import.\n    const pluginHandlers = await Promise.all(pluginList.map(pluginPath => {\n        if (pluginPath.indexOf('/') === -1) {\n            // A standard TinyMCE Plugin.\n            return Promise.resolve(pluginPath);\n        }\n\n        return import(pluginPath);\n    }));\n\n    // Normalise the plugin data to a list of plugin names.\n    // Two formats are supported:\n    // - a string; and\n    // - an array whose first element is the plugin name, and the second element is the plugin configuration.\n    const pluginNames = pluginHandlers.map((pluginConfig) => {\n        if (typeof pluginConfig === 'string') {\n            return pluginConfig;\n        }\n        if (Array.isArray(pluginConfig)) {\n            return pluginConfig[0];\n        }\n        return null;\n    }).filter((value) => value);\n\n    // Fetch the list of pluginConfig handlers.\n    const pluginConfig = pluginHandlers.map((pluginConfig) => {\n        if (Array.isArray(pluginConfig)) {\n            return pluginConfig[1];\n        }\n        return null;\n    }).filter((value) => value);\n\n    return {\n        pluginNames,\n        pluginConfig,\n    };\n};\n\n/**\n * Fetch the language data for the specified language.\n *\n * @param {string} language The language identifier\n * @returns {object}\n */\nconst fetchLanguage = (language) => fetch(\n    `${M.cfg.wwwroot}/lib/editor/tiny/lang.php/${M.cfg.langrev}/${language}`\n).then(response => response.json());\n\n/**\n * Get a list of all Editors in a Map, keyed by the DOM Node that the Editor is associated with.\n *\n * @returns {Map<Node, Editor>}\n */\nexport const getAllInstances = () => new Map(instanceMap.entries());\n\n/**\n * Get the TinyMCE instance for the specified Node ID.\n *\n * @param {string} elementId\n * @returns {TinyMCE|undefined}\n */\nexport const getInstanceForElementId = elementId => getInstanceForElement(document.getElementById(elementId));\n\n/*\n * Get the TinyMCE instance for the specified HTMLElement.\n *\n * @param {HTMLElement} element\n * @returns {TinyMCE|undefined}\n */\nexport const getInstanceForElement = element => {\n    const instance = instanceMap.get(element);\n    if (instance && instance.removed) {\n        instanceMap.remove(element);\n        return undefined;\n    }\n    return instance;\n};\n\n/**\n * Set up TinyMCE for the selector at the specified HTML Node id.\n *\n * @param {object} config The configuration required to setup the editor\n * @param {string} config.elementId The HTML Node ID\n * @param {Object} config.options The editor plugin configuration\n * @return {Promise<TinyMCE>} The TinyMCE instance\n */\nexport const setupForElementId = ({elementId, options}) => {\n    const target = document.getElementById(elementId);\n    return setupForTarget(target, options);\n};\n\n/**\n * Initialise the page with standard TinyMCE requirements.\n *\n * Currently this includes the language taken from the HTML lang property.\n */\nconst initialisePage = async() => {\n    const lang = document.querySelector('html').lang;\n\n    const [tinyMCE, langData] = await Promise.all([getTinyMCE(), fetchLanguage(lang)]);\n    tinyMCE.addI18n(lang, langData);\n};\ninitialisePage();\n\n/**\n * Get the list of plugins to load for the specified configuration.\n *\n * If the specified configuration does not include a plugin configuration, then return the default configuration.\n *\n * @param {object} options\n * @param {array} [options.plugins=null] The plugin list\n * @returns {object}\n */\nconst getPlugins = ({plugins = null} = {}) => {\n    if (plugins) {\n        return plugins;\n    }\n\n    if (defaultOptions.plugins) {\n        return defaultOptions.plugins;\n    }\n\n    return {};\n};\n\n/**\n * Get the standard configuration for the specified options.\n *\n * @param {Node} target\n * @param {tinyMCE} tinyMCE\n * @param {object} options\n * @param {Array} plugins\n * @returns {object}\n */\nconst getStandardConfig = (target, tinyMCE, options, plugins) => {\n    const lang = document.querySelector('html').lang;\n\n    const config = Object.assign({}, getDefaultConfiguration(), {\n        // eslint-disable-next-line camelcase\n        base_url: baseUrl,\n\n        // Set the editor target.\n        // https://www.tiny.cloud/docs/tinymce/6/editor-important-options/#target\n        target,\n\n        // Set the language.\n        // https://www.tiny.cloud/docs/tinymce/6/ui-localization/#language\n        // eslint-disable-next-line camelcase\n        language: lang,\n\n        // Load the editor stylesheet into the editor iframe.\n        // https://www.tiny.cloud/docs/tinymce/6/add-css-options/\n        // eslint-disable-next-line camelcase\n        content_css: [\n            options.css,\n        ],\n\n        // Do not convert URLs to relative URLs.\n        // https://www.tiny.cloud/docs/tinymce/6/url-handling/#convert_urls\n        // eslint-disable-next-line camelcase\n        convert_urls: false,\n\n        // Enabled 'advanced' a11y options.\n        // This includes allowing role=\"presentation\" from the image uploader.\n        // https://www.tiny.cloud/docs/tinymce/6/accessibility/\n        // eslint-disable-next-line camelcase\n        a11y_advanced_options: true,\n\n        // Disable quickbars entirely.\n        // The UI is not ideal and we'll wait for it to improve in future before we enable it in Moodle.\n        // eslint-disable-next-line camelcase\n        quickbars_insert_toolbar: '',\n\n        // Disable some of the standard paragraph levels.\n        // https://www.tiny.cloud/docs/tinymce/6/user-formatting-options/#block_formats\n        // eslint-disable-next-line camelcase\n        block_formats: 'Paragraph=p; Heading 3= h3; Heading 4= h4; Heading 5= h5; Heading 6= h6;',\n\n        // The list of plugins to include in the instance.\n        // https://www.tiny.cloud/docs/tinymce/6/editor-important-options/#plugins\n        plugins: [\n            ...plugins,\n        ],\n\n        // Skins\n        skin: 'oxide',\n\n        // Remove the \"Upgrade\" link for Tiny.\n        // https://www.tiny.cloud/docs/tinymce/6/editor-premium-upgrade-promotion/\n        promotion: false,\n\n        // Allow the administrator to disable branding.\n        // https://www.tiny.cloud/docs/tinymce/6/statusbar-configuration-options/#branding\n        branding: options.branding,\n\n        setup: (editor) => {\n            Options.register(editor, options);\n        },\n    });\n\n    config.toolbar = addToolbarSection(config.toolbar, 'content', 'formatting', true);\n    config.toolbar = addToolbarButton(config.toolbar, 'content', 'link');\n\n    // Add directionality plugins, always.\n    config.toolbar = addToolbarSection(config.toolbar, 'directionality', 'alignment', true);\n    config.toolbar = addToolbarButtons(config.toolbar, 'directionality', ['ltr', 'rtl']);\n\n    return config;\n};\n\n/**\n * Fetch the TinyMCE configuration for this editor instance.\n *\n * @param {HTMLElement} target\n * @param {TinyMCE} tinyMCE The TinyMCE API\n * @param {Object} options The editor plugin configuration\n * @param {object} pluginValues\n * @param {object} pluginValues.pluginConfig The list of plugin configuration\n * @param {object} pluginValues.pluginNames The list of plugins to load\n * @returns {object} The TinyMCE Configuration\n */\nconst getEditorConfiguration = (target, tinyMCE, options, pluginValues) => {\n    const {\n        pluginNames,\n        pluginConfig,\n    } = pluginValues;\n\n    // Allow plugins to modify the configuration.\n    // This seems a little strange, but we must double-process the config slightly.\n\n    // First we fetch the standard configuration.\n    const instanceConfig = getStandardConfig(target, tinyMCE, options, pluginNames);\n\n    // Next we make any standard changes.\n    // Here we remove the file menu, as it doesn't offer any useful functionality.\n    // We only empty the items list so that a plugin may choose to add to it themselves later if they wish.\n    if (instanceConfig.menu.file) {\n        instanceConfig.menu.file.items = '';\n    }\n\n    // We disable the styles, backcolor, and forecolor plugins from the format menu.\n    // These are not useful for Moodle and we don't want to encourage their use.\n    if (instanceConfig.menu.format) {\n        instanceConfig.menu.format.items = instanceConfig.menu.format.items\n            // Remove forecolor and backcolor.\n            .replace(/forecolor ?/, '')\n            .replace(/backcolor ?/, '')\n\n            // Remove fontfamily for now.\n            .replace(/fontfamily ?/, '')\n\n            // Remove fontsize for now.\n            .replace(/fontsize ?/, '')\n\n            // Remove styles - it just duplicates the format menu in a way which does not respect configuration\n            .replace(/styles ?/, '')\n\n            // Remove any duplicate separators.\n            .replaceAll(/\\| *\\|/g, '|');\n    }\n\n    // Next we call the `configure` function for any plugin which defines it.\n    // We pass the current instanceConfig in here, to allow them to make certain changes to the global configuration.\n    // For example, to add themselves to any menu, toolbar, and so on.\n    // Any plugin which wishes to have configuration options must register those options here.\n    pluginConfig.filter((pluginConfig) => typeof pluginConfig.configure === 'function').forEach((pluginConfig) => {\n        const pluginInstanceOverride = pluginConfig.configure(instanceConfig, options);\n        Object.assign(instanceConfig, pluginInstanceOverride);\n    });\n\n    // Next we convert the plugin configuration into a format that TinyMCE understands.\n    Object.assign(instanceConfig, Options.getInitialPluginConfiguration(options));\n\n    return instanceConfig;\n};\n\n/**\n * Set up TinyMCE for the HTML Element.\n *\n * @param {HTMLElement} target\n * @param {Object} [options={}] The editor plugin configuration\n * @return {Promise<TinyMCE>} The TinyMCE instance\n */\nexport const setupForTarget = async(target, options = {}) => {\n    const instance = getInstanceForElement(target);\n    if (instance) {\n        return Promise.resolve(instance);\n    }\n\n    // Register a new pending promise to ensure that Behat waits for the editor setup to complete before continuing.\n    const pendingPromise = new Pending('editor_tiny/editor:setupForTarget');\n\n    // Get the list of plugins.\n    const plugins = getPlugins(options);\n\n    // Fetch the tinyMCE API, and instantiate the plugins.\n    const [tinyMCE, pluginValues] = await Promise.all([\n        getTinyMCE(),\n        importPluginList(Object.keys(plugins)),\n    ]);\n\n    // TinyMCE uses the element ID as a map key internally, even if the target has changed.\n    // In the case where we have an editor in a modal form which has been detached from the DOM, but the editor not removed,\n    // we need to manually destroy the editor.\n    // We could theoretically do this with a Mutation Observer, but in some cases the Node may be moved,\n    // or added back elsewhere in the DOM.\n    const existingEditor = tinyMCE.EditorManager.get(target.id);\n    if (existingEditor) {\n        if (existingEditor.targetElm.closest('body')) {\n            if (existingEditor.targetElm === target) {\n                pendingPromise.resolve();\n                return Promise.resolve(existingEditor);\n            } else {\n                pendingPromise.resolve();\n                throw new Error('TinyMCE instance already exists for different target with same ID');\n            }\n        } else {\n            existingEditor.destroy();\n        }\n    }\n\n    // Get the editor configuration for this editor.\n    const instanceConfig = getEditorConfiguration(target, tinyMCE, options, pluginValues);\n\n    // Initialise the editor instance for the given configuration.\n    // At this point any plugin which has configuration options registered will have them applied for this instance.\n    const [editor] = await tinyMCE.init(instanceConfig);\n\n    // Store the editor instance in the instanceMap and register a listener on removal to remove it from the map.\n    instanceMap.set(target, editor);\n    editor.on('remove', ({target}) => {\n        // Handle removal of the editor from the map on destruction.\n        instanceMap.delete(target.targetElm);\n    });\n\n    // If the editor is part of a form, also listen to the jQuery submit event.\n    // The jQuery submit event will not trigger the native submit event, and therefore the content will not be saved.\n    // We cannot rely on listening to the bubbled submit event on the document because other events on child nodes may\n    // consume the data before it is saved.\n    if (target.form) {\n        jQuery(target.form).on('submit', () => {\n            editor.save();\n        });\n    }\n\n    pendingPromise.resolve();\n    return editor;\n};\n\n/**\n * Set the default editor configuration.\n *\n * This configuration is used when an editor is initialised without any configuration.\n *\n * @param {object} [options={}]\n */\nexport const configureDefaultEditor = (options = {}) => {\n    defaultOptions = options;\n};\n"],"names":["instanceMap","Map","defaultOptions","importPluginList","async","pluginHandlers","Promise","all","pluginList","map","pluginPath","indexOf","resolve","pluginNames","pluginConfig","Array","isArray","filter","value","entries","elementId","getInstanceForElement","document","getElementById","element","instance","get","removed","remove","_ref","options","target","setupForTarget","lang","querySelector","tinyMCE","langData","language","fetch","M","cfg","wwwroot","langrev","then","response","json","addI18n","initialisePage","getPlugins","plugins","getEditorConfiguration","pluginValues","instanceConfig","config","Object","assign","base_url","baseUrl","content_css","css","convert_urls","a11y_advanced_options","quickbars_insert_toolbar","block_formats","skin","promotion","branding","setup","editor","Options","register","toolbar","getStandardConfig","menu","file","items","format","replace","replaceAll","configure","forEach","pluginInstanceOverride","getInitialPluginConfiguration","pendingPromise","Pending","keys","existingEditor","EditorManager","id","targetElm","closest","Error","destroy","init","set","on","_ref2","delete","form","save"],"mappings":"4oDAkCMA,YAAc,IAAIC,QAMpBC,eAAiB,SAQfC,iBAAmBC,MAAAA,mBAGfC,qBAAuBC,QAAQC,IAAIC,WAAWC,KAAIC,aACnB,IAA7BA,WAAWC,QAAQ,KAEZL,QAAQM,QAAQF,4NAGbA,4WAAAA,gBAOZG,YAAcR,eAAeI,KAAKK,cACR,iBAAjBA,aACAA,aAEPC,MAAMC,QAAQF,cACPA,aAAa,GAEjB,OACRG,QAAQC,OAAUA,cAUd,CACHL,YAAAA,YACAC,aATiBT,eAAeI,KAAKK,cACjCC,MAAMC,QAAQF,cACPA,aAAa,GAEjB,OACRG,QAAQC,OAAUA,mCAuBM,IAAM,IAAIjB,IAAID,YAAYmB,4CAQlBC,WAAaC,sBAAsBC,SAASC,eAAeH,kBAQrFC,sBAAwBG,gBAC3BC,SAAWzB,YAAY0B,IAAIF,aAC7BC,WAAYA,SAASE,eAIlBF,SAHHzB,YAAY4B,OAAOJ,0FAcMK,WAACT,UAACA,UAADU,QAAYA,oBACpCC,OAAST,SAASC,eAAeH,kBAChCY,eAAeD,OAAQD,UAQX1B,iBACb6B,KAAOX,SAASY,cAAc,QAAQD,MAErCE,QAASC,gBAAkB9B,QAAQC,IAAI,EAAC,yBAvD5B8B,SAuDwDJ,KAvD3CK,gBAC7BC,EAAEC,IAAIC,6CAAoCF,EAAEC,IAAIE,oBAAWL,WAChEM,MAAKC,UAAYA,SAASC,YAFLR,IAAAA,SAwDnBF,QAAQW,QAAQb,KAAMG,WAE1BW,SAWMC,WAAa,eAACC,QAACA,QAAU,6DAAQ,UAC/BA,UAIA/C,eAAe+C,QACR/C,eAAe+C,QAGnB,KAmGLC,uBAAyB,CAACnB,OAAQI,QAASL,QAASqB,sBAChDtC,YACFA,YADEC,aAEFA,cACAqC,aAMEC,eAjGgB,EAACrB,OAAQI,QAASL,QAASmB,iBAC3ChB,KAAOX,SAASY,cAAc,QAAQD,KAEtCoB,OAASC,OAAOC,OAAO,IAAI,uCAA2B,CAExDC,SAAUC,gBAIV1B,OAAAA,OAKAM,SAAUJ,KAKVyB,YAAa,CACT5B,QAAQ6B,KAMZC,cAAc,EAMdC,uBAAuB,EAKvBC,yBAA0B,GAK1BC,cAAe,2EAIfd,QAAS,IACFA,SAIPe,KAAM,QAINC,WAAW,EAIXC,SAAUpC,QAAQoC,SAElBC,MAAQC,SACJC,QAAQC,SAASF,OAAQtC,mBAIjCuB,OAAOkB,SAAU,4BAAkBlB,OAAOkB,QAAS,UAAW,cAAc,GAC5ElB,OAAOkB,SAAU,2BAAiBlB,OAAOkB,QAAS,UAAW,QAG7DlB,OAAOkB,SAAU,4BAAkBlB,OAAOkB,QAAS,iBAAkB,aAAa,GAClFlB,OAAOkB,SAAU,4BAAkBlB,OAAOkB,QAAS,iBAAkB,CAAC,MAAO,QAEtElB,QAwBgBmB,CAAkBzC,OAAQI,EAASL,QAASjB,oBAK/DuC,eAAeqB,KAAKC,OACpBtB,eAAeqB,KAAKC,KAAKC,MAAQ,IAKjCvB,eAAeqB,KAAKG,SACpBxB,eAAeqB,KAAKG,OAAOD,MAAQvB,eAAeqB,KAAKG,OAAOD,MAEzDE,QAAQ,cAAe,IACvBA,QAAQ,cAAe,IAGvBA,QAAQ,eAAgB,IAGxBA,QAAQ,aAAc,IAGtBA,QAAQ,WAAY,IAGpBC,WAAW,UAAW,MAO/BhE,aAAaG,QAAQH,cAAmD,mBAA3BA,aAAaiE,YAA0BC,SAASlE,qBACnFmE,uBAAyBnE,aAAaiE,UAAU3B,eAAgBtB,SACtEwB,OAAOC,OAAOH,eAAgB6B,2BAIlC3B,OAAOC,OAAOH,eAAgBiB,QAAQa,8BAA8BpD,UAE7DsB,gBAUEpB,eAAiB5B,eAAM2B,YAAQD,+DAAU,SAC5CL,SAAWJ,sBAAsBU,WACnCN,gBACOnB,QAAQM,QAAQa,gBAIrB0D,eAAiB,IAAIC,iBAAQ,qCAG7BnC,QAAUD,WAAWlB,UAGpBK,QAASgB,oBAAsB7C,QAAQC,IAAI,EAC9C,wBACAJ,iBAAiBmD,OAAO+B,KAAKpC,YAQ3BqC,eAAiBnD,QAAQoD,cAAc7D,IAAIK,OAAOyD,OACpDF,eAAgB,IACZA,eAAeG,UAAUC,QAAQ,QAAS,IACtCJ,eAAeG,YAAc1D,cAC7BoD,eAAevE,UACRN,QAAQM,QAAQ0E,sBAEvBH,eAAevE,UACT,IAAI+E,MAAM,qEAGpBL,eAAeM,gBAKjBxC,eAAiBF,uBAAuBnB,OAAQI,EAASL,QAASqB,eAIjEiB,cAAgBjC,QAAQ0D,KAAKzC,uBAGpCpD,YAAY8F,IAAI/D,OAAQqC,QACxBA,OAAO2B,GAAG,UAAUC,YAACjE,OAACA,cAElB/B,YAAYiG,OAAOlE,OAAO0D,cAO1B1D,OAAOmE,0BACAnE,OAAOmE,MAAMH,GAAG,UAAU,KAC7B3B,OAAO+B,UAIfhB,eAAevE,UACRwD,+EAU2B,eAACtC,+DAAU,GAC7C5B,eAAiB4B"}