{"version":3,"file":"video_recorder.min.js","sources":["../src/video_recorder.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Record RTC - Video recorder configuration.\n *\n * @module      tiny_recordrtc/video\n * @copyright   2022 Stevani Andolo <stevani@hotmail.com.au>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport BaseClass from './base_recorder';\nimport Modal from 'tiny_recordrtc/modal';\nimport ModalRegistry from 'core/modal_registry';\nimport {component} from 'tiny_recordrtc/common';\n\nexport default class Video extends BaseClass {\n    configurePlayer() {\n        return this.modalRoot.querySelector('video');\n    }\n\n    getSupportedTypes() {\n        return [\n            'video/webm;codecs=vp9,opus',\n            'video/webm;codecs=h264,opus',\n            'video/webm;codecs=vp8,opus',\n        ];\n\n    }\n\n    getParsedRecordingOptions() {\n        return {\n            audioBitsPerSecond: parseInt(this.config.audiobitrate),\n            videoBitsPerSecond: parseInt(this.config.videobitrate)\n        };\n    }\n\n    getMediaConstraints() {\n        return {\n            audio: true,\n            video: {\n                width: {\n                    ideal: 640,\n                },\n                height: {\n                    ideal: 480,\n                },\n            },\n        };\n    }\n\n    playOnCapture() {\n        // Play the recording back on capture.\n        return true;\n    }\n\n    getRecordingType() {\n        return 'video';\n    }\n\n    getTimeLimit() {\n        return this.config.videotimelimit;\n    }\n\n    getEmbedTemplateName() {\n        return 'tiny_recordrtc/embed_video';\n    }\n\n    getFileName(prefix) {\n        return `${prefix}-video.webm`;\n    }\n\n    static getModalClass() {\n        const modalType = `${component}/video_recorder`;\n        const registration = ModalRegistry.get(modalType);\n        if (registration) {\n            return registration.module;\n        }\n\n        const VideoModal = class extends Modal {\n            static TYPE = modalType;\n            static TEMPLATE = `${component}/video_recorder`;\n        };\n\n        ModalRegistry.register(VideoModal.TYPE, VideoModal, VideoModal.TEMPLATE);\n        return VideoModal;\n    }\n}\n"],"names":["Video","BaseClass","configurePlayer","this","modalRoot","querySelector","getSupportedTypes","getParsedRecordingOptions","audioBitsPerSecond","parseInt","config","audiobitrate","videoBitsPerSecond","videobitrate","getMediaConstraints","audio","video","width","ideal","height","playOnCapture","getRecordingType","getTimeLimit","videotimelimit","getEmbedTemplateName","getFileName","prefix","modalType","component","registration","ModalRegistry","get","module","VideoModal","Modal","register","TYPE","TEMPLATE"],"mappings":"4qBA4BqBA,cAAcC,uBAC/BC,yBACWC,KAAKC,UAAUC,cAAc,SAGxCC,0BACW,CACH,6BACA,8BACA,8BAKRC,kCACW,CACHC,mBAAoBC,SAASN,KAAKO,OAAOC,cACzCC,mBAAoBH,SAASN,KAAKO,OAAOG,eAIjDC,4BACW,CACHC,OAAO,EACPC,MAAO,CACHC,MAAO,CACHC,MAAO,KAEXC,OAAQ,CACJD,MAAO,OAMvBE,uBAEW,EAGXC,yBACW,QAGXC,sBACWnB,KAAKO,OAAOa,eAGvBC,6BACW,6BAGXC,YAAYC,wBACEA,8DAIJC,oBAAeC,qCACfC,aAAeC,wBAAcC,IAAIJ,cACnCE,oBACOA,aAAaG,aAGlBC,mCAAa,cAAcC,wBACfP,uDACOC,6EAGXO,SAASF,WAAWG,KAAMH,WAAYA,WAAWI,UACxDJ"}