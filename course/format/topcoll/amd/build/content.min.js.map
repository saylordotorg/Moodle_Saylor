{"version":3,"file":"content.min.js","sources":["../src/content.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Collapsed Topics Course index main component.\n *\n * @module     format_topcoll/content\n * @class      format_topcoll/content\n * @copyright  2022 G J Barnard based upon work done by:\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Component from 'core_courseformat/local/content';\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\n\nexport default class TopcollComponent extends Component {\n\n    /**\n     * Constructor hook.\n     *\n     * @param {Object} descriptor the component descriptor\n     */\n    create(descriptor) {\n        super.create(descriptor);\n    }\n\n    /**\n     * Static method to create a component instance form the mustahce template.\n     *\n     * @param {string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @param {number} sectionReturn the content section return\n     * @return {Component}\n     */\n    static init(target, selectors, sectionReturn) {\n        return new TopcollComponent({\n            element: document.getElementById(target),\n            reactive: getCurrentCourseEditor(),\n            selectors,\n            sectionReturn,\n        });\n    }\n\n    /**\n     * Refresh the section list.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshCourseSectionlist({element}) {\n        // If we have a section return means we only show a single section so no need to fix order.\n        if (this.reactive.sectionReturn != 0) {\n            return;\n        }\n        const sectionlist = element.sectionlist.slice(1) ?? []; // Remove section 0 from the list!\n        const listparent = this.getElement(this.selectors.COURSE_SECTIONLIST);\n        // For now section cannot be created at a frontend level.\n        const createSection = this._createSectionItem.bind(this);\n        if (listparent) {\n            this._fixTopcollSectionOrder(listparent, sectionlist, this.selectors.SECTION, this.dettachedSections, createSection);\n        }\n    }\n\n    /**\n     * Fix/reorder the section or cms order.\n     *\n     * @param {Element} container the HTML element to reorder.\n     * @param {Array} neworder an array with the ids order\n     * @param {string} selector the element selector\n     * @param {Object} dettachedelements a list of dettached elements\n     * @param {function} createMethod method to create missing elements\n     */\n    async _fixTopcollSectionOrder(container, neworder, selector, dettachedelements, createMethod) {\n        if (container === undefined) {\n            return;\n        }\n\n        // Empty lists should not be visible.\n        if (!neworder.length) {\n            container.classList.add('hidden');\n            container.innerHTML = '';\n            return;\n        }\n\n        // Grant the list is visible (in case it was empty).\n        container.classList.remove('hidden');\n\n        // Move the elements in order at the beginning of the list.\n        neworder.forEach((itemid, index) => {\n            let item = this.getElement(selector, itemid) ?? dettachedelements[itemid] ?? createMethod(container, itemid);\n            if (item === undefined) {\n                // Missing elements cannot be sorted.\n                return;\n            }\n            let itemno = this.getElement('#tcnoid-'+itemid);\n            if (itemno !== undefined) {\n                itemno.textContent = index + 1; // Update the section number in the 'left' part.\n            }\n            // Get the current elemnt at that position.\n            const currentitem = container.children[index];\n            if (currentitem === undefined) {\n                container.append(item);\n                return;\n            }\n            if (currentitem !== item) {\n                container.insertBefore(item, currentitem);\n            }\n        });\n\n        // Dndupload add a fake element we need to keep.\n        let dndFakeActivity;\n\n        // Remove the remaining elements.\n        while (container.children.length > neworder.length) {\n            const lastchild = container.lastChild;\n            if (lastchild?.classList?.contains('dndupload-preview')) {\n                dndFakeActivity = lastchild;\n            } else {\n                dettachedelements[lastchild?.dataset?.id ?? 0] = lastchild;\n            }\n            container.removeChild(lastchild);\n        }\n        // Restore dndupload fake element.\n        if (dndFakeActivity) {\n            container.append(dndFakeActivity);\n        }\n    }\n}\n"],"names":["TopcollComponent","Component","create","descriptor","target","selectors","sectionReturn","element","document","getElementById","reactive","_refreshCourseSectionlist","this","sectionlist","slice","listparent","getElement","COURSE_SECTIONLIST","createSection","_createSectionItem","bind","_fixTopcollSectionOrder","SECTION","dettachedSections","container","neworder","selector","dettachedelements","createMethod","undefined","length","classList","add","innerHTML","dndFakeActivity","remove","forEach","itemid","index","item","itemno","textContent","currentitem","children","insertBefore","append","lastchild","lastChild","_lastchild$classList","contains","dataset","_lastchild$dataset","id","removeChild"],"mappings":";;;;;;;;;qJA4BqBA,yBAAyBC,iBAO1CC,OAAOC,kBACGD,OAAOC,wBAWLC,OAAQC,UAAWC,sBACpB,IAAIN,iBAAiB,CACxBO,QAASC,SAASC,eAAeL,QACjCM,UAAU,0CACVL,UAAAA,UACAC,cAAAA,gBAURK,8DAA0BJ,QAACA,iBAEY,GAA/BK,KAAKF,SAASJ,2BAGZO,0CAAcN,QAAQM,YAAYC,MAAM,0DAAM,GAC9CC,WAAaH,KAAKI,WAAWJ,KAAKP,UAAUY,oBAE5CC,cAAgBN,KAAKO,mBAAmBC,KAAKR,MAC/CG,iBACKM,wBAAwBN,WAAYF,YAAaD,KAAKP,UAAUiB,QAASV,KAAKW,kBAAmBL,6CAahFM,UAAWC,SAAUC,SAAUC,kBAAmBC,sBAC1DC,IAAdL,qBAKCC,SAASK,cACVN,UAAUO,UAAUC,IAAI,eACxBR,UAAUS,UAAY,QA8BtBC,oBAzBJV,UAAUO,UAAUI,OAAO,UAG3BV,SAASW,SAAQ,CAACC,OAAQC,wCAClBC,4CAAO3B,KAAKI,WAAWU,SAAUW,qDAAWV,kBAAkBU,+BAAWT,aAAaJ,UAAWa,gBACxFR,IAATU,gBAIAC,OAAS5B,KAAKI,WAAW,WAAWqB,aACzBR,IAAXW,SACAA,OAAOC,YAAcH,MAAQ,SAG3BI,YAAclB,UAAUmB,SAASL,YACnBT,IAAhBa,YAIAA,cAAgBH,MAChBf,UAAUoB,aAAaL,KAAMG,aAJ7BlB,UAAUqB,OAAON,SAYlBf,UAAUmB,SAASb,OAASL,SAASK,QAAQ,gCAC1CgB,UAAYtB,UAAUuB,0DACxBD,MAAAA,wCAAAA,UAAWf,2CAAXiB,qBAAsBC,SAAS,qBAC/Bf,gBAAkBY,eAElBnB,gDAAkBmB,MAAAA,sCAAAA,UAAWI,6CAAXC,mBAAoBC,0DAAM,GAAKN,UAErDtB,UAAU6B,YAAYP,WAGtBZ,iBACAV,UAAUqB,OAAOX"}