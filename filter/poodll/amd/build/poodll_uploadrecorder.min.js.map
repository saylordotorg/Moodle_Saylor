{"version":3,"sources":["../src/poodll_uploadrecorder.js"],"names":["define","$","log","uploader","debug","config","instanceprops","fetch_instance_props","widgetid","init_instance_props","supports_current_browser","embed","element","ip","clone","init","insert_controls","register_events","acceptmedia","mediatype","iOS","test","navigator","userAgent","window","MSStream","controls","M","util","get_string","prepend","self","on","e","FileSelectHandler","files","target","dataTransfer","i","file","type","uploadBlob","ParseFile","filedata","reader","FileReader","onloadend","result","uploadFile","readAsDataURL"],"mappings":"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","sourcesContent":["/* jshint ignore:start */\ndefine(['jquery', 'core/log', 'filter_poodll/uploader'], function ($, log, uploader) {\n\n    \"use strict\"; // jshint ;_;\n\n    log.debug('PoodLL Upload Recorder: initialising');\n\n    return {\n\n        config: null,\n\n        instanceprops: [],\n\n        fetch_instance_props: function (widgetid) {\n            return this.instanceprops[widgetid];\n        },\n\n        init_instance_props: function (widgetid) {\n            var props = {};\n            props.config = null;\n            props.uploader = null;\n            this.instanceprops[widgetid] = props\n        },\n\n        // This recorder supports the current browser\n        supports_current_browser: function (config) {\n            return true;//or false\n        },\n\n        // Perform the embed of this recorder on the page\n        //into the element passed in. with config\n        embed: function (element, config) {\n            this.init_instance_props(config.widgetid);\n            var ip = this.fetch_instance_props(config.widgetid);\n            //set config\n            ip.config = config;\n\n            //set uploader\n            ip.uploader = uploader.clone();\n            ip.uploader.init(element, config);\n\n            //get form and evenets working\n            this.insert_controls(element, config.widgetid);\n            this.register_events(config.widgetid);\n        },\n\n        insert_controls: function (element, widgetid) {\n            var ip = this.fetch_instance_props(widgetid);\n\n            //for now\n            var acceptmedia = '';\n            var config = ip.config;\n            switch (config.mediatype) {\n                case 'video':\n                    acceptmedia = 'video/*';\n                    break;\n                case 'snapshot':\n                case 'image':\n                    acceptmedia = 'image/*';\n                case 'audio':\n                    var iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\n                    if (iOS) {\n                        acceptmedia = 'video/*';\n                    } else {\n                        acceptmedia = 'audio/*';\n                    }\n                default:\n                    acceptmedia = '';\n            }\n\n            //html5 recorder proper\n            var controls = '<div class=\"p_btn_wrapper\">';\n\n            controls += '<input type=\"file\" id=\"' + config.widgetid + '_poodllfileselect\" name=\"poodllfileselect[]\" accept=\"' + acceptmedia + '\"/>';\n            controls += '<button type=\"button\" class=\"p_btn\">' + M.util.get_string('recui_recordorchoose', 'filter_poodll') + '</button>';\n            controls += '</div>';\n            $(element).prepend(controls);\n        },\n\n        // handle audio/video/image file uploads for Mobile\n        register_events: function (widgetid) {\n            var self = this;\n            $('#' + widgetid + '_poodllfileselect').on('change', function (e) {\n                    self.FileSelectHandler(e, widgetid);\n                }\n            );\n\n        },\n\n        // file selection\n        FileSelectHandler: function (e, widgetid) {\n            var ip = this.fetch_instance_props(widgetid);\n\n            // fetch FileList object\n            var files = e.target.files || e.dataTransfer.files;\n\n            // process all File objects\n            for (var i = 0, file; file = files[i]; i++) {\n                //this.ParseFile(f,widgetid);\n                log.debug('filetype:' + file.type);\n                ip.uploader.uploadBlob(file, file.type);\n            }\n        },\n\n        // output file information\n        ParseFile: function (file, widgetid) {\n            var ip = this.fetch_instance_props(widgetid);\n\n            // start upload\n            var filedata = \"\";\n            var reader = new FileReader();\n            reader.onloadend = function (e) {\n                filedata = e.target.result;\n                ip.uploader.uploadFile(filedata, file.type);\n            };\n            log.debug('filetype:' + file.type);\n            reader.readAsDataURL(file);\n\n        }\n\n    }//end of returned object\n});//total end"],"file":"poodll_uploadrecorder.min.js"}