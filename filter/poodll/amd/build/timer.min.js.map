{"version":3,"sources":["../src/timer.js"],"names":["define","$","log","debug","increment","initseconds","seconds","finalseconds","intervalhandle","callback","enabled","clone","extend","init","parseInt","start","self","customSetInterval","func","time","lastTime","Date","now","lastDelay","outp","tick","dTime","id","setTimeout","disable","enable","fetch_display_time","someseconds","theHours","substr","length","theMinutes","theSeconds","display_time","stop","clearTimeout","reset","pause","resume"],"mappings":"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","sourcesContent":["/* jshint ignore:start */\ndefine(['jquery', 'core/log'], function ($, log) {\n\n    \"use strict\"; // jshint ;_;\n\n    log.debug('Timer: initialising');\n\n    return {\n        increment: 1,\n        initseconds: 0,\n        seconds: 0,\n        finalseconds: 0,\n        intervalhandle: null,\n        callback: null,\n        enabled: false,\n\n        //for making multiple instances\n        clone: function () {\n            return $.extend(true, {}, this);\n        },\n\n        init: function (initseconds, callback) {\n            this.initseconds = parseInt(initseconds);\n            this.seconds = parseInt(initseconds);\n            this.callback = callback;\n            this.enabled = true;\n        },\n\n        start: function () {\n            if (!this.enabled) {\n                return;\n            }\n\n            var self = this;\n            this.finalseconds = 0;\n            if (this.initseconds > 0) {\n                this.increment = -1;\n            } else {\n                this.increment = 1;\n            }\n            this.intervalhandle = this.customSetInterval(function () {\n                self.seconds = self.seconds + self.increment;\n                self.finalseconds = self.finalseconds + 1;\n                self.callback();\n            }, 1000);\n        },\n\n        //we use a custom set interval which self adjusts for inaccuracies.\n        customSetInterval: function (func, time) {\n            var lastTime = Date.now(),\n                lastDelay = time,\n                outp = {};\n\n            function tick() {\n                var now = Date.now(),\n                    dTime = now - lastTime;\n\n                lastTime = now;\n                lastDelay = time + lastDelay - dTime;\n                outp.id = setTimeout(tick, lastDelay);\n                func();\n\n            }\n\n            outp.id = setTimeout(tick, time);\n            return outp;\n        },\n\n        disable: function () {\n            this.enabled = false;\n        },\n\n        enable: function () {\n            this.enabled = true;\n        },\n\n        fetch_display_time: function (someseconds) {\n            if (!someseconds) {\n                someseconds = this.seconds;\n            }\n            var theHours = '00' + parseInt(someseconds / 3600);\n            theHours = theHours.substr(theHours.length - 2, 2);\n            var theMinutes = '00' + parseInt(someseconds / 60);\n            theMinutes = theMinutes.substr(theMinutes.length - 2, 2);\n            var theSeconds = '00' + parseInt(someseconds % 60);\n            theSeconds = theSeconds.substr(theSeconds.length - 2, 2);\n            var display_time = theHours + ':' + theMinutes + ':' + theSeconds;\n            return display_time;\n        },\n\n        stop: function () {\n            clearTimeout(this.intervalhandle.id);\n        },\n\n        reset: function () {\n            this.seconds = this.initseconds;\n        },\n\n        pause: function () {\n            this.increment = 0;\n        },\n        resume: function () {\n            if (this.initseconds > 0) {\n                this.increment = -1;\n            } else {\n                this.increment = 1;\n            }\n        }\n\n    };//end of returned object\n});//total end\n"],"file":"timer.min.js"}