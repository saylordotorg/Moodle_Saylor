{"version":3,"sources":["../src/s3multipartupload.js"],"names":["define","$","log","debug","PART_SIZE","SERVER_LOC","completed","file","fileInfo","sendBackData","uploadXHR","partURLs","byterate","lastUploadedSize","lastUploadedTime","loaded","total","init","name","type","size","lastModifiedDate","createMultipartUpload","xhr","XMLHttpRequest","that","onreadystatechange","readyState","status","payload","responseText","payloadobject","JSON","parse","returnCode","messageObject","id","config","code","message","returnMessage","hermes","postMessage","allowedURL","posturl","postURL","filename","s3filename","s3root","cloudfilename","shortfilename","cloudroot","shortroot","sendAll","parts","prepareParts","xhrparams","wstoken","moodlewsrestformat","mediatype","serverurl","M","cfg","wwwroot","open","setRequestHeader","send","doMultipartUpload","start","blobs","end","blob","partNum","Math","min","filePart","slice","push","i","length","partNumber","contentLength","sendToS3","theurl","index","self","request","updateProgress","onS3UploadError","upload","onprogress","e","lengthComputable","time_diff","Date","getTime","cancel","abort","post","command","done","completeMultipartUpload","data","onUploadCompleted","fail","jqXHR","textStatus","errorThrown","onServerError","complete","onProgressChanged","onPrepareCompleted"],"mappings":"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","sourcesContent":["/* jshint ignore:start */\ndefine(['jquery', 'core/log'], function ($, log) {\n\n    \"use strict\"; // jshint ;_;\n\n    log.debug('Filter PoodLL: s3multipartupload initialising');\n\n    return {\n\n        PART_SIZE: 10 * 1024 * 1024, // Minimum part size defined by aws s3 is 5 MB(5 * 1024 * 1024), maximum 5 GB (5 * 1024 * 1024 * 1024)\n        SERVER_LOC: '?', // Location of the server\n        completed: false,\n        file: null,\n        fileInfo: null,\n        sendBackData: null,\n        uploadXHR: [],\n        partURLs: [],\n        // Progress monitoring\n        byterate: [],\n        lastUploadedSize: [],\n        lastUploadedTime: [],\n        loaded: [],\n        total: [],\n\n\n        init: function (file) {\n            this.completed = false;\n            this.file = file;\n            this.fileInfo = {\n                name: this.file.name,\n                type: this.file.type,\n                size: this.file.size,\n                lastModifiedDate: this.file.lastModifiedDate\n            };\n            this.sendBackData = null;\n            this.uploadXHR = [];\n            // Progress monitoring\n            this.byterate = [];\n            this.lastUploadedSize = [];\n            this.lastUploadedTime = [];\n            this.loaded = [];\n            this.total = [];\n\n        },\n\n        /**\n         * Creates the multipart upload\n         */\n        createMultipartUpload: function () {\n\n            //The REST API we are calling\n            var functionname = 'local_cpapi_fetch_multipartupload_details';\n\n            //fetch the Posturl. We need this.\n            //set up our ajax request\n            var xhr = new XMLHttpRequest();\n            var that = this;\n\n            //set up our handler for the response\n            xhr.onreadystatechange = function (e) {\n                if (this.readyState === 4) {\n                    if (xhr.status == 200) {\n\n                        //get a yes or forgetit or tryagain\n                        var payload = xhr.responseText;\n                        var payloadobject = JSON.parse(payload);\n                        if (payloadobject) {\n\n                            //returnCode > 0  indicates an error\n                            if (payloadobject.returnCode > 0) {\n                                //We alert the iframe host that something did not go right\n                                var messageObject = {};\n                                messageObject.id = that.config.id;\n                                messageObject.type = \"error\";\n                                messageObject.code = payloadobject.returnCode;\n                                messageObject.message = payloadobject.returnMessage;\n                                that.config.hermes.postMessage(messageObject);\n                                return;\n                                //if all good, then lets do the upload\n                            } else {\n                                that.partURLs = payloadobject.partURLs;\n                                that.config.allowedURL = payloadobject.allowedURL;\n                                that.config.posturl = payloadobject.postURL;\n                                that.config.filename = payloadobject.filename;\n                                that.config.s3filename = payloadobject.s3filename;\n                                that.config.s3root = payloadobject.s3root;\n                                that.config.cloudfilename = payloadobject.shortfilename;\n                                that.config.cloudroot = payloadobject.shortroot;\n\n                                //do the upload\n                                that.sendAll();\n                            }\n                        } else {\n                            log.debug('error:' + payloadobject.message);\n                        }\n                    } else {\n                        log.debug('Not 200 response:' + xhr.status);\n                    }\n                }\n            };\n\n            //prepare our upload parts\n            var parts = this.prepareParts();\n\n\n            //log.debug(params);\n            var xhrparams = \"wstoken=\" + this.config.wstoken\n                + \"&wsfunction=\" + functionname\n                + \"&moodlewsrestformat=\" + this.config.moodlewsrestformat\n                + \"&mediatype=\" + this.config.mediatype\n                + '&parts=' + parts;\n\n            var serverurl = M.cfg.wwwroot + \"/webservice/rest/server.php\";\n            xhr.open(\"POST\", serverurl, true);\n            xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n            xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n            xhr.send(xhrparams);\n        },\n\n        /**\n         * Creates the multipart upload\n         */\n        doMultipartUpload: function () {\n\n            //The REST API we are calling\n            var functionname = 'local_cpapi_fetch_multipartupload_urls';\n\n            //fetch the Posturl. We need this.\n            //set up our ajax request\n            var xhr = new XMLHttpRequest();\n            var that = this;\n\n            //set up our handler for the response\n            xhr.onreadystatechange = function (e) {\n                if (this.readyState === 4) {\n                    if (xhr.status == 200) {\n\n                        //get a yes or forgetit or tryagain\n                        var payload = xhr.responseText;\n                        var payloadobject = JSON.parse(payload);\n                        if (payloadobject) {\n\n                            //returnCode > 0  indicates an error\n                            if (payloadobject.returnCode > 0) {\n                                //We alert the iframe host that something did not go right\n                                var messageObject = {};\n                                messageObject.id = that.config.id;\n                                messageObject.type = \"error\";\n                                messageObject.code = payloadobject.returnCode;\n                                messageObject.message = payloadobject.returnMessage;\n                                that.config.hermes.postMessage(messageObject);\n                                return;\n                                //if all good, then lets do the upload\n                            } else {\n                                that.partURLs = payloadobject.partURLs;\n                                that.config.allowedURL = payloadobject.allowedURL;\n                                that.config.posturl = payloadobject.postURL;\n                                that.config.filename = payloadobject.filename;\n                                that.config.s3filename = payloadobject.s3filename;\n                                that.config.s3root = payloadobject.s3root;\n                                that.config.cloudfilename = payloadobject.shortfilename;\n                                that.config.cloudroot = payloadobject.shortroot;\n\n                                //do the upload\n                                that.sendAll();\n                            }\n                        } else {\n                            log.debug('error:' + payloadobject.message);\n                        }\n                    } else {\n                        log.debug('Not 200 response:' + xhr.status);\n                    }\n                }\n            };\n\n            //prepare our upload parts\n            var parts = this.prepareParts();\n\n\n            //log.debug(params);\n            var xhrparams = \"wstoken=\" + this.config.wstoken\n                + \"&wsfunction=\" + functionname\n                + \"&moodlewsrestformat=\" + this.config.moodlewsrestformat\n                + \"&mediatype=\" + this.config.mediatype\n                + '&parts=' + parts;\n\n            var serverurl = M.cfg.wwwroot + \"/webservice/rest/server.php\";\n            xhr.open(\"POST\", serverurl, true);\n            xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n            xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n            xhr.send(xhrparams);\n        },\n\n\n/**\n * Call this function to start uploading to server\n */\nstart: function() {\n    this.createMultipartUpload();\n},\n\n/** private */\nprepareParts: function() {\n    var blobs = this.blobs = [];\n    this.partURLs = [];\n    var start = 0;\n    var parts =[];\n    var end, blob;\n    var partNum = 0;\n\n    //create blobs and determine each blob file size\n    while(start < this.file.size) {\n        end = Math.min(start + this.PART_SIZE, this.file.size);\n        filePart = this.file.slice(start, end);\n        // this is to prevent push blob with 0Kb\n        if (filePart.size > 0)\n            blobs.push(filePart);\n        start = this.PART_SIZE * ++partNum;\n    }\n    //return blob details so we can use them when uploading\n    for (var i = 0; i < blobs.length; i++) {\n        blob = blobs[i];\n        parts[i]={};\n        parts[i].partNumber= i+1;\n        parts[i].contentLength = blob.size;\n    }\n    return parts;\n},\n\n\n /*\nuploadParts: function() {\n    var blobs = this.blobs = [], promises = [];\n    var start = 0;\n    var parts =0;\n    var end, blob;\n    var partNum = 0;\n\n    while(start < this.file.size) {\n        end = Math.min(start + this.PART_SIZE, this.file.size);\n        filePart = this.file.slice(start, end);\n        // this is to prevent push blob with 0Kb\n        if (filePart.size > 0)\n            blobs.push(filePart);\n        start = this.PART_SIZE * ++partNum;\n    }\n    //fetch and store the presigned  upload URLs\n    for (var i = 0; i < blobs.length; i++) {\n        blob = blobs[i];\n        promises.push(this.uploadXHR[i]=$.post(this.SERVER_LOC, {\n            command: 'part',\n            sendBackData: this.sendBackData,\n            partNumber: i+1,\n            contentLength: blob.size\n        }));\n    }\n    $.when.apply(null, promises)\n        .then(this.sendAll.bind(this), this.onServerError)\n        .done(this.onPrepareCompleted);\n},\n*/\n\n/**\n * Sends all the created upload parts in a loop\n */\nsendAll: function() {\n    var blobs = this.blobs;\n    var length = blobs.length;\n    for (var i = 0; i < length; i++) {\n        this.sendToS3(partURLs[i], blobs[i], i);\n    }\n},\n\n/**\n * Used to send each uploadPart\n * @param  theurl the upload url\n * @param  blob blob  data bytes\n * @param  int index part index (base zero)\n */\nsendToS3: function(theurl, blob, index) {\n    var self = this;\n    var size = blob.size;\n    var request = self.uploadXHR[index] = new XMLHttpRequest();\n\n    //handle a result from request object\n    request.onreadystatechange = function() {\n        if (request.readyState === 4) { // 4 is DONE\n            // self.uploadXHR[index] = null;\n            if (request.status !== 200) {\n                self.updateProgress();\n                self.onS3UploadError(request);\n                return;\n            }\n            self.updateProgress();\n        }\n    };\n\n    //handle an  on progress event from the upload of the request\n    request.upload.onprogress = function(e) {\n        if (e.lengthComputable) {\n            self.total[index] = size;\n            self.loaded[index] = e.loaded;\n            if (self.lastUploadedTime[index])\n            {\n                var time_diff=(new Date().getTime() - self.lastUploadedTime[index])/1000;\n                if (time_diff > 0.005) // 5 miliseconds has passed\n                {\n                    var byterate=(self.loaded[index] - self.lastUploadedSize[index])/time_diff;\n                    self.byterate[index] = byterate;\n                    self.lastUploadedTime[index]=new Date().getTime();\n                    self.lastUploadedSize[index]=self.loaded[index];\n                }\n            }\n            else\n            {\n                self.byterate[index] = 0;\n                self.lastUploadedTime[index]=new Date().getTime();\n                self.lastUploadedSize[index]=self.loaded[index];\n            }\n            // Only send update to user once, regardless of how many\n            // parallel XHRs we have (unless the first one is over).\n            if (index==0 || self.total[0]==self.loaded[0])\n                self.updateProgress();\n        }\n    };\n    //send the request !!\n    request.open('PUT', theurl, true);\n    request.send(blob);\n\n}, //end of sendToS3\n\n/**\n * Abort multipart upload\n */\ncancel: function() {\n    var self = this;\n    for (var i=0; i<this.uploadXHR.length; ++i) {\n        this.uploadXHR[i].abort();\n    }\n    $.post(self.SERVER_LOC, {\n        command: 'abort',\n        sendBackData: self.sendBackData\n    }).done(function(data) {\n\n    });\n},\n\n/**\n * Complete multipart upload\n */\ncompleteMultipartUpload: function() {\n    var self = this;\n    if (this.completed) return;\n    this.completed=true;\n    $.post(self.SERVER_LOC, {\n        command: 'complete',\n        sendBackData: self.sendBackData\n    }).done(function(data) {\n        self.onUploadCompleted(data);\n    }).fail(function(jqXHR, textStatus, errorThrown) {\n        self.onServerError('complete', jqXHR, textStatus, errorThrown);\n    });\n},\n\n/**\n * Track progress, propagate event, and check for completion\n */\nupdateProgress: function() {\n    var total=0;\n    var loaded=0;\n    var byterate=0.0;\n    var complete=1;\n    for (var i=0; i<this.total.length; ++i) {\n        loaded += +this.loaded[i] || 0;\n        total += this.total[i];\n        if (this.loaded[i]!=this.total[i])\n        {\n            // Only count byterate for active transfers\n            byterate += +this.byterate[i] || 0;\n            complete=0;\n        }\n    }\n    if (complete)\n        this.completeMultipartUpload();\n    total=this.fileInfo.size;\n    this.onProgressChanged(loaded, total, byterate);\n},\n\n// Overridable events:\n\n/**\n * Overrride this function to catch errors occured when communicating to your server\n *\n * @param {type} command Name of the command which failed,one of 'CreateMultipartUpload', 'SignUploadPart','CompleteMultipartUpload'\n * @param {type} jqXHR jQuery XHR\n * @param {type} textStatus resonse text status\n * @param {type} errorThrown the error thrown by the server\n */\nonServerError: function(command, jqXHR, textStatus, errorThrown) {},\n\n/**\n * Overrride this function to catch errors occured when uploading to S3\n *\n * @param XMLHttpRequest xhr the XMLHttpRequest object\n */\nonS3UploadError: function(xhr) {},\n\n/**\n * Override this function to show user update progress\n *\n * @param {type} uploadedSize is the total uploaded bytes\n * @param {type} totalSize the total size of the uploading file\n * @param {type} speed bytes per second\n */\nonProgressChanged: function(uploadedSize, totalSize, bitrate) {},\n\n/**\n * Override this method to execute something when upload finishes\n *\n */\nonUploadCompleted: function(serverData) {},\n/**\n * Override this method to execute something when part preparation is completed\n *\n */\nonPrepareCompleted: function() {}\n\n};//end of return object\n});//utterly the end"],"file":"s3multipartupload.min.js"}