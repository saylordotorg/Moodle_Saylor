{"version":3,"sources":["../src/hermes.js"],"names":["define","$","log","debug","allowedURL","id","iframeembed","enabled","eventListeners","clone","extend","init","registerEvents","disable","enable","on","type","handler","listener","push","sendEvent","event","i","length","postMessage","messageObject","hasOwnProperty","window","parent","that","addEventListener","e","indexOf","origin","data"],"mappings":"AACAA,OAAM,wBAAC,CAAC,QAAD,CAAW,UAAX,CAAD,CAAyB,SAAUC,CAAV,CAAaC,CAAb,CAAkB,CAE7C,aAEAA,CAAG,CAACC,KAAJ,CAAU,qCAAV,EAKA,MAAO,CAEHC,UAAU,CAAE,EAFT,CAGHC,EAAE,CAAE,EAHD,CAIHC,WAAW,GAJR,CAKHC,OAAO,GALJ,CAMHC,cAAc,GANX,CASHC,KAAK,CAAE,gBAAY,CACf,MAAOR,CAAAA,CAAC,CAACS,MAAF,IAAe,EAAf,CAAmB,IAAnB,CACV,CAXE,CAcHC,IAAI,CAAE,cAAUN,CAAV,CAAcD,CAAd,CAA0BE,CAA1B,CAAuC,CAGzC,KAAKF,UAAL,CAAkBA,CAAlB,CACA,KAAKC,EAAL,CAAUA,CAAV,CACA,KAAKC,WAAL,CAAmBA,CAAnB,CACA,KAAKC,OAAL,IACA,KAAKC,cAAL,IACA,KAAKI,cAAL,EACH,CAvBE,CAyBHC,OAAO,CAAE,kBAAY,CACjB,KAAKN,OAAL,GACH,CA3BE,CA6BHO,MAAM,CAAE,iBAAY,CAChB,KAAKP,OAAL,GACH,CA/BE,CAkCHQ,EAAE,CAAE,YAASC,CAAT,CAAcC,CAAd,CAAsB,CACtB,GAAIC,CAAAA,CAAQ,GAAZ,CACAA,CAAQ,CAACF,IAAT,CAAgBA,CAAhB,CACAE,CAAQ,CAACD,OAAT,CAAmBA,CAAnB,CACA,KAAKT,cAAL,CAAoBW,IAApB,CAAyBD,CAAzB,CACH,CAvCE,CA0CHE,SAAS,CAAE,mBAASC,CAAT,CAAgB,CACvB,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAG,KAAKd,cAAL,CAAoBe,MAAxC,CAAgDD,CAAC,EAAjD,CAAqD,CACjD,GAAID,CAAK,CAACL,IAAN,EAAc,KAAKR,cAAL,CAAoBc,CAApB,EAAuBN,IAAzC,CAA+C,CAC3C,KAAKR,cAAL,CAAoBc,CAApB,EAAuBL,OAAvB,CAA+BI,CAA/B,CACH,CACJ,CACJ,CAhDE,CAmDHG,WAAW,CAAE,qBAAUC,CAAV,CAAyB,CAClC,GAAI,CAAC,KAAKlB,OAAV,CAAmB,CACf,MACH,CAED,GAAI,CAACkB,CAAa,CAACC,cAAd,CAA6B,MAA7B,CAAL,CAA2C,CACvCxB,CAAG,CAACC,KAAJ,CAAU,8DAAV,EACA,MACH,CACD,GAAI,KAAKG,WAAT,CAAsB,CAClBmB,CAAa,CAACpB,EAAd,CAAmB,KAAKA,EAAxB,CACAsB,MAAM,CAACC,MAAP,CAAcJ,WAAd,CAA0BC,CAA1B,CAAyC,KAAKrB,UAA9C,CACH,CACJ,CAhEE,CAoEHQ,cAAc,CAAE,yBAAU,CAEtB,GAAIiB,CAAAA,CAAI,CAAG,IAAX,CACAF,MAAM,CAACG,gBAAP,CAAwB,SAAxB,CAAmC,SAAUC,CAAV,CAAa,CAE5C,GAAsB,IAAjB,EAAAF,CAAI,CAACzB,UAAN,EAAiE,CAAtC,GAAAyB,CAAI,CAACzB,UAAL,CAAgB4B,OAAhB,CAAwBD,CAAC,CAACE,MAA1B,CAA/B,CAAwE,CACpE,MACH,CAGD,GAAIC,CAAAA,CAAI,CAAGH,CAAC,CAACG,IAAb,CACA,GAAIA,CAAI,EAAIA,CAAI,CAACR,cAAL,CAAoB,IAApB,CAAR,EACAQ,CAAI,CAAC7B,EAAL,EAAWwB,CAAI,CAACxB,EADhB,EACsB6B,CAAI,CAACR,cAAL,CAAoB,MAApB,CAD1B,CACuD,CACnDG,CAAI,CAACT,SAAL,CAAeW,CAAC,CAACG,IAAjB,CACH,CACJ,CAZD,CAaH,CApFE,CAsFV,CA/FK,CAAN","sourcesContent":["/* jshint ignore:start */\ndefine(['jquery', 'core/log'], function ($, log) {\n\n    \"use strict\"; // jshint ;_;\n\n    log.debug('Hermes (the messenger) initialising');\n\n    //posts messages back to the parent frame.\n    //if it is allowed then we are good. Right?\n\n    return {\n\n        allowedURL: '',\n        id: '',\n        iframeembed: false,\n        enabled: false,\n        eventListeners: false,\n\n        //for making multiple instances\n        clone: function () {\n            return $.extend(true, {}, this);\n        },\n\n        //init\n        init: function (id, allowedURL, iframeembed) {\n            //the id tag is passed in initially passed in as $config->id from poodlltools::fetchAMDRecorderCode\n            //or from data-id in cloudpodll iframe. This allows the receiving code to know which recorder generated event\n            this.allowedURL = allowedURL;\n            this.id = id;\n            this.iframeembed = iframeembed;\n            this.enabled = true;\n            this.eventListeners = new Array();\n            this.registerEvents();\n        },\n\n        disable: function () {\n            this.enabled = false;\n        },\n\n        enable: function () {\n            this.enabled = true;\n        },\n\n        //this registers handlers for message events of a type from around the recorder\n        on: function(type,handler){\n            var listener = new Object();\n            listener.type = type;\n            listener.handler = handler;\n            this.eventListeners.push(listener);\n        },\n\n        //this handles the sending of message events recevied from parent around the recorder\n        sendEvent: function(event) {\n            for (var i = 0; i < this.eventListeners.length; i++) {\n                if (event.type == this.eventListeners[i].type) {\n                    this.eventListeners[i].handler(event);\n                }\n            }\n        },\n\n        //This posts a message to the parent page\n        postMessage: function (messageObject) {\n            if (!this.enabled) {\n                return;\n            }\n\n            if (!messageObject.hasOwnProperty('type')) {\n                log.debug('All message objects must have at least the \"type\" property');\n                return;\n            }\n            if (this.iframeembed) {\n                messageObject.id = this.id;\n                window.parent.postMessage(messageObject, this.allowedURL);\n            }\n        },\n\n        //We only listen to the message event from parent page\n        //if its valid, we pass it on to registered handlers within the recorder\n        registerEvents: function(){\n            //register our receive message handler\n            var that = this;\n            window.addEventListener('message', function (e) {\n                // Must be our parent\n                if ((that.allowedURL==null) || that.allowedURL.indexOf(e.origin) !== 0) {\n                    return;\n                }\n\n                //process data and if it is valid do the action\n                var data = e.data;\n                if (data && data.hasOwnProperty('id') &&\n                    data.id == that.id && data.hasOwnProperty('type')) {\n                    that.sendEvent(e.data);\n                }\n            });\n        }\n    };//end of returned object\n});//total end\n"],"file":"hermes.min.js"}