{"version":3,"sources":["../src/anim_hwave_mic.js"],"names":["define","$","log","debug","analyser","cvs","cvsctx","sounddetected","imgone","imgoneloaded","drawparams","micColor","wavColor","lineWidth","clone","extend","setDrawParam","paramkey","paramvalue","init","getContext","textAlign","that","Image","addEventListener","src","M","cfg","wwwroot","clear","clearRect","width","height","beginPath","strokeStyle","moveTo","lineTo","stroke","drawMic","ctx","cwidth","cheight","mic","x","y","drawImage","start","core","fftSize","bufferLength","dataArray","Uint8Array","canvasCtx","draw","requestAnimationFrame","theinterval","getByteTimeDomainData","level","i","v"],"mappings":"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","sourcesContent":["/* jshint ignore:start */\ndefine(['jquery', 'core/log'], function ($, log) {\n\n    \"use strict\"; // jshint ;_;\n\n    log.debug('anim_horizontal_wave_mic: initialising');\n\n    return {\n\n        analyser: null,\n        cvs: null,\n        cvsctx: null,\n        sounddetected: false,\n        imgone: null,\n        imgoneloaded: false,\n        drawparams: {\n            micColor: '#CCCCCC',\n            wavColor: \"#CCCCCC\",\n            lineWidth: 2\n        },\n\n        //for making multiple instances\n        clone: function () {\n            return $.extend(true, {}, this);\n        },\n\n        setDrawParam: function (paramkey, paramvalue) {\n            this.drawparams[paramkey] = paramvalue;\n        },\n\n\n        //init\n        init: function (analyser, cvs) {\n            this.cvs = cvs;\n            this.cvsctx = cvs.getContext(\"2d\");\n            this.cvsctx.textAlign = \"center\";\n            this.analyser = analyser;\n\n            //init images\n            //listen for load to ensure initial display\n            var that = this;\n            this.imgone = new Image();\n            this.imgone.addEventListener('load', function () {\n                that.imgoneloaded = true;\n            });\n            this.imgone.src = M.cfg.wwwroot + '/filter/poodll/pix/svg/mic.svg';\n        },\n\n        clear: function () {\n            if (!this.imgoneloaded) {\n                var that = this;\n                this.imgone.addEventListener('load', function () {\n                    that.imgoneloaded = true;\n                    that.clear();\n                });\n                return;\n            }\n            this.cvsctx.clearRect(0, 0, this.cvs.width, this.cvs.height);\n\n            this.cvsctx.beginPath();\n            this.cvsctx.lineWidth = this.drawparams.lineWidth;\n            this.cvsctx.strokeStyle = this.drawparams.wavColor;\n            this.cvsctx.moveTo(0, this.cvs.height / 2);\n            this.cvsctx.lineTo(this.cvs.width, this.cvs.height / 2);\n            this.cvsctx.stroke();\n\n            // this.cvsctx.beginPath();\n            //  this.cvsctx.strokeStyle = this.drawparams.micColor;\n            this.drawMic(this.cvsctx, this.cvs.width, this.cvs.height, this.imgone);\n            //  this.cvsctx.stroke();\n        },\n\n        drawMic: function (ctx, cwidth, cheight, mic) {\n            var x = (cwidth - mic.width) / 2;\n            var y = (cheight - mic.height) / 2;\n            ctx.drawImage(mic, x, y);\n        },\n\n        start: function () {\n            this.analyser.core.fftSize = 2048;\n            var bufferLength = this.analyser.core.fftSize;\n            var dataArray = new Uint8Array(bufferLength);\n            var cwidth = this.cvs.width;\n            var cheight = this.cvs.height;\n            var canvasCtx = this.cvsctx;\n            var analyser = this.analyser;\n            var that = this;\n            this.clear();\n\n            var draw = function () {\n\n                var drawVisual = requestAnimationFrame(draw);\n\n                //cancel out if the theinterval is null\n                if (!analyser.theinterval) {\n                    return;\n                }\n\n                analyser.core.getByteTimeDomainData(dataArray);\n\n                //filling is rubbish, we just clear it\n                //canvasCtx.fillStyle = 'rgb(200, 200, 200)';\n                //canvasCtx.fillRect(0, 0, cwidth, cheight);\n                canvasCtx.clearRect(0, 0, cwidth, cheight);\n\n                canvasCtx.lineWidth = that.drawparams.lineWidth;\n                canvasCtx.strokeStyle = that.drawparams.wavColor;\n\n                canvasCtx.beginPath();\n\n                var sliceWidth = cwidth * 2.0 / bufferLength;\n                var x = 0;\n                var oldy = 0;\n\n                //we check if we could capture sound here\n                if (bufferLength > 0) {\n                    var level = dataArray[bufferLength - 1];\n                    if (level != 128) {\n                        that.sounddetected = true;\n                    }\n                }\n\n                for (var i = 0; i < bufferLength; i++) {\n\n                    var v = dataArray[i] / 128.0;\n                    var y = v * cheight / 2;\n\n                    if (i === 0) {\n                        canvasCtx.moveTo(x, y);\n                    } else {\n                        //canvasCtx.lineTo(x, oldy);\n                        canvasCtx.lineTo(x, y);\n\n                    }\n                    oldy = y;\n                    x += sliceWidth;\n                }\n                canvasCtx.lineTo(cwidth, cheight / 2);\n                canvasCtx.stroke();\n\n                //draw a microphone\n                that.drawMic(canvasCtx, cwidth, cheight, that.imgone);\n\n\n            };\n\n            draw();\n        }//END OF START\n    };//end of returned object\n});//total end\n"],"file":"anim_hwave_mic.min.js"}