{"version":3,"sources":["../src/speech_browser.js"],"names":["define","$","log","debug","recognition","recognizing","ignore_onend","final_transcript","start_timestamp","lang","clone","extend","will_work_ok","window","init","opts","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","language","register_events","set_grammar","grammar","SpeechGrammarList","webkitSpeechGrammarList","speechRecognitionList","addFromString","grammars","start","Date","now","stop","that","onstart","onerror","event","error","timeStamp","onend","onresult","interim_transcript","i","resultIndex","results","length","isFinal","transcript","onfinalspeechcapture","JSON","stringify","oninterimspeechcapture","speechtext"],"mappings":"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","sourcesContent":["/* jshint ignore:start */\ndefine(['jquery', 'core/log'], function ($, log) {\n\n    \"use strict\"; // jshint ;_;\n\n    log.debug('speech_browser: initialising');\n\n    return {\n\n        recognition: null,\n        recognizing: false,\n        ignore_onend: false,\n        final_transcript: '',\n        start_timestamp: 0,\n        lang: 'en-US',\n\n\n        //for making multiple instances\n        clone: function () {\n            return $.extend(true, {}, this);\n        },\n\n        will_work_ok: function(opts){\n            return 'webkitSpeechRecognition' in window || 'SpeechRecognition' in window;\n        },\n\n        init: function (opts) {\n            var SpeechRecognition = SpeechRecognition || webkitSpeechRecognition;\n            this.recognition = new SpeechRecognition();\n            this.recognition.continuous = true;\n            this.recognition.interimResults = true;\n            this.lang = opts.language ? opts.language : 'en-US';\n\n            this.register_events();\n        },\n\n        set_grammar: function (grammar) {\n            var SpeechGrammarList = SpeechGrammarList || webkitSpeechGrammarList;\n            if (SpeechGrammarList) {\n                var speechRecognitionList = new SpeechGrammarList();\n                speechRecognitionList.addFromString(grammar, 1);\n                this.recognition.grammars = speechRecognitionList;\n            }\n        },\n\n        start: function (stream) {\n            //browser recognition does not actually need to the stream\n            if (this.recognizing) {\n                return;\n            }\n            this.recognizing = true;\n            this.final_transcript = '';\n            this.recognition.lang = this.lang;//select_dialect.value;\n            this.recognition.start();\n            this.ignore_onend = false;\n            this.start_timestamp = Date.now();//event.timeStamp;\n\n        },\n        stop: function () {\n            // if (this.recognizing) {\n            this.recognizing = false;\n            this.recognition.stop();\n            return;\n            //}\n        },\n\n        register_events: function () {\n\n            var recognition = this.recognition;\n            var that = this;\n\n            recognition.onstart = function () {\n                that.recognizing = true;\n\n            };\n            recognition.onerror = function (event) {\n                if (event.error == 'no-speech') {\n                    log.debug('info_no_speech');\n                    that.ignore_onend = true;\n                }\n                if (event.error == 'audio-capture') {\n                    log.debug('info_no_microphone');\n                    that.ignore_onend = true;\n                }\n                if (event.error == 'not-allowed') {\n                    if (event.timeStamp - that.start_timestamp < 100) {\n                        log.debug('info_blocked');\n                    } else {\n                        log.debug('info_denied');\n                    }\n                    that.ignore_onend = true;\n                }\n            };\n            recognition.onend = function () {\n                //that.recognizing = false;\n\n                // we restart by default\n                // we might need to be more clever here\n                if (that.recognizing == false) {\n                    return;\n                }\n                if (that.ignore_onend) {\n                    that.recognizing = false;\n                } else {\n                    recognition.start();\n                }\n\n            };\n            recognition.onresult = function (event) {\n                var interim_transcript = '';\n                for (var i = event.resultIndex; i < event.results.length; ++i) {\n                    if (event.results[i].isFinal) {\n                        that.final_transcript += event.results[i][0].transcript;\n                        that.onfinalspeechcapture(that.final_transcript,JSON.stringify(event.results));\n                        that.final_transcript = '';\n                    } else {\n                        interim_transcript += event.results[i][0].transcript;\n                        that.oninterimspeechcapture(interim_transcript);\n                    }\n                }\n\n\n            };\n        },//end of register events\n\n        onfinalspeechcapture: function (speechtext,speechresults) {\n            log.debug(speechtext);\n        },\n        oninterimspeechcapture: function (speechtext) {\n            // log.debug(speechtext);\n        }\n\n    };//end of returned object\n});//total end\n"],"file":"speech_browser.min.js"}