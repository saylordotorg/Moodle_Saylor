{"version":3,"sources":["../src/msr_poodll.js"],"names":["define","$","log","utils","stereoaudiorecorder","plainrecorder","debug","sampleRate","mimeType","audioChannels","bufferSize","therecorder","audioctx","audioanalyser","clone","extend","init","mediaStream","mediaType","encoder","has_mediarecorder","start","stop","clear","pause","resume","ondataavailable","blob","onStartedDrawingNonBlankFrames","onstop","error"],"mappings":"AACAA,OAAM,4BAAC,CAAC,QAAD,CACC,UADD,CACa,yBADb,CACwC,+BADxC,CACyE,yBADzE,CAAD,CAEF,SAAUC,CAAV,CAAaC,CAAb,CAAkBC,CAAlB,CAAyBC,CAAzB,CAA8CC,CAA9C,CAA6D,CAEzD,aAEAH,CAAG,CAACI,KAAJ,CAAU,kCAAV,EAEA,MAAO,CAEHC,UAAU,CAAE,IAFT,CAGHC,QAAQ,CAAE,WAHP,CAIHC,aAAa,CAAE,CAJZ,CAKHC,UAAU,CAAE,IALT,CAMHC,WAAW,CAAE,IANV,CAOHC,QAAQ,CAAE,IAPP,CAQHC,aAAa,CAAE,IARZ,CAWHC,KAAK,CAAE,gBAAY,CACf,MAAOb,CAAAA,CAAC,CAACc,MAAF,IAAe,EAAf,CAAmB,IAAnB,CACV,CAbE,CAiBHC,IAAI,CAAE,cAAUC,CAAV,CAAuBL,CAAvB,CAAiCC,CAAjC,CAAgDK,CAAhD,CAA2DC,CAA3D,CAAoE,CAGtE,KAAKP,QAAL,CAAgBA,CAAhB,CACA,KAAKC,aAAL,CAAqBA,CAArB,CAGA,GAAe,MAAX,EAAAM,CAAJ,CAAuB,CACnB,OAAQA,CAAR,EACI,IAAK,aAAL,CACI,GAAiB,OAAb,EAAAD,CAAJ,CAA0B,CACtB,KAAKP,WAAL,CAAmBP,CACtB,CAFD,IAEO,CACH,KAAKO,WAAL,CAAmBN,CACtB,CACD,MACJ,IAAK,OAAL,CACA,QACI,KAAKM,WAAL,CAAmBN,CAAnB,CAVR,CAaH,CAdD,IAcO,IAAIF,CAAK,CAACiB,iBAAN,EAAJ,CAA+B,CAClC,KAAKT,WAAL,CAAmBN,CAAnB,CACAH,CAAG,CAACI,KAAJ,CAAU,sBAAV,CAGH,CALM,IAKA,IAAiB,OAAb,EAAAY,CAAJ,CAA0B,CACzB,KAAKP,WAAL,CAAmBP,CAAnB,CACAF,CAAG,CAACI,KAAJ,CAAU,uBAAV,CAGP,CACD,GAAI,KAAKK,WAAT,CAAsB,CAClB,KAAKA,WAAL,CAAiBK,IAAjB,CAAsB,IAAtB,CAA4BC,CAA5B,CAAyCL,CAAzC,CAAmDM,CAAnD,CACH,CAEJ,CArDE,CAuDHG,KAAK,CAAE,gBAAY,CACf,KAAKV,WAAL,CAAiBU,KAAjB,GAEA,KAAKR,aAAL,CAAmBQ,KAAnB,EACH,CA3DE,CA6DHC,IAAI,CAAE,eAAY,CACd,KAAKX,WAAL,CAAiBW,IAAjB,GACA,KAAKT,aAAL,CAAmBU,KAAnB,EACH,CAhEE,CAkEHC,KAAK,CAAE,gBAAY,CACf,KAAKb,WAAL,CAAiBa,KAAjB,GACA,KAAKX,aAAL,CAAmBU,KAAnB,EACH,CArEE,CAuEHE,MAAM,CAAE,iBAAY,CAChB,KAAKd,WAAL,CAAiBc,MAAjB,GACA,KAAKZ,aAAL,CAAmBQ,KAAnB,EACH,CA1EE,CA4EHK,eAAe,CAAE,yBAAUC,CAAV,CAAgB,CAC7BzB,CAAG,CAACI,KAAJ,CAAU,mBAAqBqB,CAA/B,CACH,CA9EE,CAgFHC,8BAA8B,CAAE,yCAAY,CACxC1B,CAAG,CAACI,KAAJ,CAAU,mCAAV,CACH,CAlFE,CAoFHuB,MAAM,CAAE,gBAAUC,CAAV,CAAiB,CACrB5B,CAAG,CAACI,KAAJ,CAAUwB,CAAV,CACH,CAtFE,CAwFV,CAhGC,CAAN","sourcesContent":["/* jshint ignore:start */\ndefine(['jquery',\n        'core/log', 'filter_poodll/utils_amd', 'filter_poodll/msr_stereoaudio', 'filter_poodll/msr_plain'],\n    function ($, log, utils, stereoaudiorecorder, plainrecorder) {\n\n        \"use strict\"; // jshint ;_;\n\n        log.debug('PoodLL MS Recorder: initialising');\n\n        return {\n\n            sampleRate: 48000,//44100,\n            mimeType: 'audio/wav',\n            audioChannels: 1,\n            bufferSize: 2048,\n            therecorder: null,\n            audioctx: null,\n            audioanalyser: null,\n\n            //for making multiple instances\n            clone: function () {\n                return $.extend(true, {}, this);\n            },\n\n            // init the poodll recorder\n            // basically we check the users preferred recorders and if the rec supports the browser\n            init: function (mediaStream, audioctx, audioanalyser, mediaType, encoder) {\n                //we want to use the same context for absolutely everything\n                //so we pass it around. analyser should be available to skins but we set it up here\n                this.audioctx = audioctx;\n                this.audioanalyser = audioanalyser;\n\n                //this is where we choose which recorder/encoder set we will use\n                if (encoder != 'auto') {\n                    switch (encoder) {\n                        case 'stereoaudio':\n                            if (mediaType == 'audio') {\n                                this.therecorder = stereoaudiorecorder;\n                            } else {\n                                this.therecorder = plainrecorder;\n                            }\n                            break;\n                        case 'plain':\n                        default:\n                            this.therecorder = plainrecorder;\n                    }\n                    //if browser has mediarecorder, lets use it!\n                } else if (utils.has_mediarecorder()) {\n                    this.therecorder = plainrecorder;\n                    log.debug('using plain recorder');\n\n                 //we can handle audio using wav encoder, so even without mediarecorder we are ok\n                } else if (mediaType == 'audio') {\n                        this.therecorder = stereoaudiorecorder;\n                        log.debug('using stereo recorder');\n                        //before init is called, set mimeType/sampleRate/audioChannels\n                        //etc on this object, they will be picked up when stereoaudiorecorder helper runs\n                }\n                if (this.therecorder) {\n                    this.therecorder.init(this, mediaStream, audioctx, mediaType);\n                }\n\n            },\n\n            start: function () {\n                this.therecorder.start();\n                //start audio analyser which generates events for wav/freq visualisations\n                this.audioanalyser.start();\n            },\n\n            stop: function () {\n                this.therecorder.stop();\n                this.audioanalyser.clear();\n            },\n\n            pause: function () {\n                this.therecorder.pause();\n                this.audioanalyser.clear();\n            },\n\n            resume: function () {\n                this.therecorder.resume();\n                this.audioanalyser.start();\n            },\n\n            ondataavailable: function (blob) {\n                log.debug('ondataavailable:' + blob);\n            },\n\n            onStartedDrawingNonBlankFrames: function () {\n                log.debug('started drawing non blank frames:');\n            },\n\n            onstop: function (error) {\n                log.debug(error);\n            }\n        };// end of returned object\n    });// total end\n"],"file":"msr_poodll.min.js"}