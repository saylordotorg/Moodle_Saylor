{"version":3,"sources":["../src/anim_fbars.js"],"names":["define","$","log","debug","analyser","cvs","cvsctx","clone","extend","init","getContext","clear","clearRect","width","height","start","core","fftSize","bufferLength","frequencyBinCount","dataArray","Uint8Array","cwidth","cheight","canvasCtx","draw","requestAnimationFrame","theinterval","getByteFrequencyData","barWidth","barHeight","x","i","fillStyle","fillRect"],"mappings":"AACAA,OAAM,4BAAC,CAAC,QAAD,CAAW,UAAX,CAAD,CAAyB,SAAUC,CAAV,CAAaC,CAAb,CAAkB,CAE7C,aAEAA,CAAG,CAACC,KAAJ,CAAU,8BAAV,EAEA,MAAO,CAEHC,QAAQ,CAAE,IAFP,CAGHC,GAAG,CAAE,IAHF,CAIHC,MAAM,CAAE,IAJL,CAOHC,KAAK,CAAE,gBAAY,CACf,MAAON,CAAAA,CAAC,CAACO,MAAF,IAAe,EAAf,CAAmB,IAAnB,CACV,CATE,CAaHC,IAAI,CAAE,cAAUL,CAAV,CAAoBC,CAApB,CAAyB,CAC3B,KAAKA,GAAL,CAAWA,CAAX,CACA,KAAKC,MAAL,CAAcD,CAAG,CAACK,UAAJ,CAAe,IAAf,CAAd,CACA,KAAKN,QAAL,CAAgBA,CACnB,CAjBE,CAmBHO,KAAK,CAAE,gBAAY,CACf,KAAKL,MAAL,CAAYM,SAAZ,CAAsB,CAAtB,CAAyB,CAAzB,CAA4B,KAAKP,GAAL,CAASQ,KAArC,CAA4C,KAAKR,GAAL,CAASS,MAArD,CACH,CArBE,CAuBHC,KAAK,CAAE,gBAAY,CACf,KAAKX,QAAL,CAAcY,IAAd,CAAmBC,OAAnB,CAA6B,GAA7B,CADe,GAEXC,CAAAA,CAAY,CAAG,KAAKd,QAAL,CAAcY,IAAd,CAAmBG,iBAFvB,CAGXC,CAAS,CAAG,GAAIC,CAAAA,UAAJ,CAAeH,CAAf,CAHD,CAIXI,CAAM,CAAG,KAAKjB,GAAL,CAASQ,KAJP,CAKXU,CAAO,CAAG,KAAKlB,GAAL,CAASS,MALR,CAMXU,CAAS,CAAG,KAAKlB,MANN,CAOXF,CAAQ,CAAG,KAAKA,QAPL,CAQf,KAAKO,KAAL,GAEA,GAAIc,CAAAA,CAAI,CAAG,UAAY,CAEFC,qBAAqB,CAACD,CAAD,CAFnB,CAKnB,GAAI,CAACrB,CAAQ,CAACuB,WAAd,CAA2B,CACvB,MACH,CAEDvB,CAAQ,CAACY,IAAT,CAAcY,oBAAd,CAAmCR,CAAnC,EAKAI,CAAS,CAACZ,SAAV,CAAoB,CAApB,CAAuB,CAAvB,CAA0BU,CAA1B,CAAkCC,CAAlC,EAMA,OAJIM,CAAAA,CAAQ,CAA6B,GAA1B,EAACP,CAAM,CAAGJ,CAAV,CAIf,CAHIY,CAGJ,CAFIC,CAAC,CAAG,CAER,CAASC,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGd,CAApB,CAAkCc,CAAC,EAAnC,CAAuC,CACnCF,CAAS,CAAGV,CAAS,CAACY,CAAD,CAArB,CAEAR,CAAS,CAACS,SAAV,CAAsB,QAAUH,CAAS,CAAG,GAAtB,EAA6B,SAAnD,CACAN,CAAS,CAACU,QAAV,CAAmBH,CAAnB,CAAsBR,CAAO,CAAGO,CAAS,CAAG,CAA5C,CAA+CD,CAA/C,CAAyDC,CAAS,CAAG,CAArE,EAEAC,CAAC,EAAIF,CAAQ,CAAG,CACnB,CACJ,CA5BD,CA8BAJ,CAAI,EACP,CAhEE,CAkEV,CAxEK,CAAN","sourcesContent":["/* jshint ignore:start */\ndefine(['jquery', 'core/log'], function ($, log) {\n\n    \"use strict\"; // jshint ;_;\n\n    log.debug('anim_freq bars: initialising');\n\n    return {\n\n        analyser: null,\n        cvs: null,\n        cvsctx: null,\n\n        //for making multiple instances\n        clone: function () {\n            return $.extend(true, {}, this);\n        },\n\n\n        //init\n        init: function (analyser, cvs) {\n            this.cvs = cvs;\n            this.cvsctx = cvs.getContext(\"2d\");\n            this.analyser = analyser;\n        },\n\n        clear: function () {\n            this.cvsctx.clearRect(0, 0, this.cvs.width, this.cvs.height);\n        },\n\n        start: function () {\n            this.analyser.core.fftSize = 256;\n            var bufferLength = this.analyser.core.frequencyBinCount;\n            var dataArray = new Uint8Array(bufferLength);\n            var cwidth = this.cvs.width;\n            var cheight = this.cvs.height;\n            var canvasCtx = this.cvsctx;\n            var analyser = this.analyser;\n            this.clear();\n\n            var draw = function () {\n                //this sets up the loop\n                var drawVisual = requestAnimationFrame(draw);\n\n                //cancel out if the theinterval is null\n                if (!analyser.theinterval) {\n                    return;\n                }\n\n                analyser.core.getByteFrequencyData(dataArray);\n\n                //filling is rubbish, we just clear it\n                //canvasCtx.fillStyle = 'rgb(0, 0, 0)';\n                //canvasCtx.fillRect(0, 0, cwidth, cheight);\n                canvasCtx.clearRect(0, 0, cwidth, cheight);\n\n                var barWidth = (cwidth / bufferLength) * 2.5;\n                var barHeight;\n                var x = 0;\n\n                for (var i = 0; i < bufferLength; i++) {\n                    barHeight = dataArray[i];\n\n                    canvasCtx.fillStyle = 'rgb(' + (barHeight + 100) + ',50,50)';\n                    canvasCtx.fillRect(x, cheight - barHeight / 2, barWidth, barHeight / 2);\n\n                    x += barWidth + 1;\n                }\n            };\n\n            draw();\n        }//END OF START\n    };//end of returned object\n});//total end\n"],"file":"anim_fbars.min.js"}