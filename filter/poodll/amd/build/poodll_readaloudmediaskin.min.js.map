{"version":3,"file":"poodll_readaloudmediaskin.min.js","sources":["../src/poodll_readaloudmediaskin.js"],"sourcesContent":["/* jshint ignore:start */\ndefine(['jquery', 'core/log', 'filter_poodll/utils_amd', 'filter_poodll/upskin_radial',\n        'filter_poodll/anim_hwave_mic', 'filter_poodll/dlg_devicesettings'],\n    function ($, log, utils, upskin_radial, hwave_mic, settings) {\n\n        \"use strict\"; // jshint ;_;\n\n        log.debug('PoodLL Read Aloud Skin: initialising');\n\n        return {\n\n            instanceprops: null,\n            pmr: null,\n            devsettings: null,\n            therecanim: null,\n\n            //for making multiple instances\n            clone: function () {\n                return $.extend(true, {}, this);\n            },\n\n            init: function (ip, pmr) {\n                this.instanceprops = ip;\n                this.pmr = pmr;\n                this.devsettings = settings.clone();\n                this.devsettings.init(pmr, ip);\n            },\n\n\n            fetch_instanceprops: function () {\n                return this.instanceprops;\n            },\n\n\n            onUploadSuccess: function (controlbarid) {\n                $('#' + controlbarid + ' > .poodll_save-recording').hide();\n                // $('#' + controlbarid  + '_messages').hide();\n                $('#' + controlbarid + ' > .poodll_savedsuccessfully').show();\n            },\n\n            onUploadFailure: function (controlbarid) {\n                return;\n            },\n\n            fetch_status_bar: function (skin) {\n                var status = '<div class=\"poodll_status_' + skin + '\" width=\"320\" height=\"50\">00:00:00</div>';\n                return status;\n            },\n\n            fetch_preview_audio: function (skin) {\n                var preview = '<audio class=\"poodll_preview_' + skin + ' hide\" playsInline muted></audio>';\n                return preview;\n            },\n            fetch_preview_video: function (skin) {\n                return this.fetch_preview_audio(skin);\n            },\n            fetch_resource_audio: function (skin) {\n                var resourceplayer = '<audio class=\"poodll_resourceplayer_' + skin + ' hide\" ></audio>';\n                return resourceplayer;\n            },\n            fetch_resource_video: function (skin) {\n                return this.fetch_resource_audio(skin);\n            },\n\n            onMediaError: function (e) {\n                console.error('media error', e);\n            },\n\n            onMediaSuccess_video: function (controlbarid) {\n                var ip = this.fetch_instanceprops(controlbarid);\n                this.set_visual_mode('recordingmode', controlbarid);\n            },\n\n            onMediaSuccess_audio: function (controlbarid) {\n                var ip = this.fetch_instanceprops(controlbarid);\n                ip.controlbar.preview.attr('src', null);\n\n                //clear messages\n                ip.uploader.Output('');\n\n                //wave animation\n                this.therecanim.start();\n\n                //timer and status bar\n                ip.timer.reset();\n                ip.timer.start();\n                this.update_status(controlbarid);\n\n                //visuals\n                this.set_visual_mode('recordingmode', controlbarid);\n            },\n\n            handle_timer_update: function (controlbarid) {\n                var ip = this.fetch_instanceprops(controlbarid);\n                ip.controlbar.status.html(ip.timer.fetch_display_time());\n                if (ip.timer.seconds == 0 && ip.timer.initseconds > 0) {\n                    ip.controlbar.stopbutton.click();\n                }\n            },\n\n            update_status: function (controlbarid) {\n                var ip = this.fetch_instanceprops(controlbarid);\n                ip.controlbar.status.html(ip.timer.fetch_display_time());\n            },\n\n            fetch_uploader_skin: function (controlbarid, element) {\n                var ip = this.fetch_instanceprops(controlbarid);\n                var upskin = upskin_radial.clone();\n                upskin.init(ip.config, element, ip.controlbar.playcanvas, ip.controlbar.status);\n                return upskin;\n            },\n\n            //set visuals for different states (ie recording or playing)\n            set_visual_mode: function (mode, controlbarid) {\n                var self = this;\n                var ip = this.fetch_instanceprops(controlbarid);\n\n                switch (mode) {\n\n                    case 'startmode':\n\n                        ip.controlbar.status.hide();\n                        self.disable_button(ip.controlbar.startbutton);\n                        self.enable_button(ip.controlbar.testbutton);\n                        self.disable_button(ip.controlbar.placeholderbutton);\n                        self.disable_button(ip.controlbar.stopbutton);\n                        self.therecanim.clear();\n                        break;\n\n                    case 'testingmode':\n\n                        ip.controlbar.status.hide();\n                        self.disable_button(ip.controlbar.startbutton);\n                        self.disable_button(ip.controlbar.testbutton);\n                        self.enable_button(ip.controlbar.placeholderbutton);\n                        self.disable_button(ip.controlbar.stopbutton);\n                        break;\n\n                    case 'readymode':\n\n                        ip.controlbar.status.hide();\n                        self.enable_button(ip.controlbar.startbutton);\n                        self.disable_button(ip.controlbar.testbutton);\n                        self.disable_button(ip.controlbar.placeholderbutton);\n                        self.disable_button(ip.controlbar.stopbutton);\n                        self.therecanim.clear();\n                        break;\n\n                    case 'recordingmode':\n                        //when testing(timer off) we do not want the stop button. Just really recording and allowearlyexit\n                        if (ip.config.allowearlyexit == \"1\" && ip.timer.enabled) {\n                            self.enable_button(ip.controlbar.stopbutton);\n                        }else{\n                            self.enable_button(ip.controlbar.placeholderbutton);\n                        }\n                        self.disable_button(ip.controlbar.startbutton);\n                        ip.controlbar.status.hide();\n                        break;\n\n                    case 'aftermode':\n                        self.disable_button(ip.controlbar.startbutton);\n                        self.disable_button(ip.controlbar.stopbutton);\n                        self.disable_button(ip.controlbar.placeholderbutton);\n                        ip.controlbar.status.show();\n\n                        break;\n\n                }\n\n            },\n\n            //insert the control bar and return it to be reused\n            insert_controlbar_video: function (element, controlbarid, preview, resource) {\n                return this.prepare_controlbar_audio(element, controlbarid, preview, resource);\n            },\n            //insert the control bar and return it to be reused\n            insert_controlbar_audio: function (element, controlbarid, preview, resource) {\n                var controlbar = this.prepare_controlbar(element, controlbarid, preview, resource, 'audio');\n                return controlbar;\n            },\n\n            //insert the control bar and return it to be reused\n            prepare_controlbar: function (element, controlbarid, preview, resource, mediatype) {\n                var ip = this.fetch_instanceprops(controlbarid);\n                var skin_style = ip.config.media_skin_style;\n\n                var recorder_class = 'poodll_mediarecorder_audio';\n                var size_class = 'poodll_mediarecorder_size_auto';\n\n                var ss = this.pmr.fetch_strings();\n                var ss_startlabel = M.util.get_string('recui_startactivity', 'filter_poodll');\n                var ss_testlabel = M.util.get_string('recui_testmic', 'filter_poodll');\n                var ss_stoplabel = M.util.get_string('recui_stop', 'filter_poodll');\n\n                var status = this.fetch_status_bar('readaloud');\n                var controls = '<div class=\"poodll_mediarecorderholder_readaloud '\n                    + recorder_class + '\" id=\"holder_' + controlbarid + '\">';\n\n                controls += '<div class=\"poodll_mediarecorderbox_readaloud\" id=\"' + controlbarid + '\">';\n                controls += this.devsettings.fetch_dialogue_box();\n                controls += ip.downloaddialog.fetch_dialogue_box();\n                controls += ip.errordialog.fetch_dialogue_box();\n                controls += '<div class=\"style-holder ' + skin_style + '\">';\n                controls += preview,\n                    controls += '<div class=\"settingsicon\" id=\"settingsicon_' + controlbarid + '\"><button type=\"button\" class=\"btn btn-info btn-lg\" data-toggle=\"modal\" data-target=\"#myModal\"><i class=\"fa fa-cogs\" aria-hidden=\"true\"></i></button></div>';\n                controls += '<canvas id=\"' + controlbarid + '_playcanvas\" width=\"250\" height=\"120\"></canvas>';\n                controls += '<button type=\"button\" class=\"poodll_mediarecorder_button_readaloud poodll_start-recording_readaloud\">' + ss_startlabel + '</button>';\n                controls += '<button type=\"button\" class=\"poodll_mediarecorder_button_readaloud poodll_test-recording_readaloud\">' + ss_testlabel + '</button>';\n                controls += '<button type=\"button\" class=\"poodll_mediarecorder_button_readaloud poodll_testing-placeholder_readaloud\" style=\"background-color: #CCCCCC;\">' + ss_testlabel  + '</button>';\n                controls += '<button type=\"button\" class=\"poodll_mediarecorder_button_readaloud poodll_stop-recording_readaloud\">' + ss_stoplabel + '</button>';\n                controls += status,\n                    controls += '</div></div></div>';\n                $(element).prepend(controls);\n                //<i class=\"fa fa-stop\" aria-hidden=\"true\"></i>\n                var controlbar = {\n                    settingsdialog: $('#' + controlbarid + ' .poodll_dialogue_box_settings'),\n                    downloaddialog: $('#' + controlbarid + ' .poodll_dialogue_box_download'),\n                    errorsdialog: $('#' + controlbarid + ' .poodll_dialogue_box_errors'),\n                    settingsicon: $('#' + controlbarid + ' .settingsicon'),\n                    status: $('#' + controlbarid + ' .poodll_status_readaloud'),\n                    preview: $('#' + controlbarid + ' .poodll_preview_readaloud'),\n                    startbutton: $('#' + controlbarid + ' .poodll_start-recording_readaloud'),\n                    testbutton: $('#' + controlbarid + ' .poodll_test-recording_readaloud'),\n                    placeholderbutton: $('#' + controlbarid + ' .poodll_testing-placeholder_readaloud'),\n                    stopbutton: $('#' + controlbarid + ' .poodll_stop-recording_readaloud'),\n                    playcanvas: $('#' + controlbarid + '_playcanvas')\n                };\n                //settings and error and download dialogs\n                //settings is on 'this' because it is shown from skkn events, but errors are from pmr stuff\n                ip.downloaddialog.set_dialogue_box(controlbar.downloaddialog);\n                ip.errordialog.set_dialogue_box(controlbar.errorsdialog);\n                this.devsettings.set_dialogue_box(controlbar.settingsdialog);\n\n                return controlbar;\n            }, //end of fetch_control_bar_readaloud\n\n\n            register_controlbar_events_video: function (onMediaSuccess, controlbarid) {\n                return this.register_controlbar_events_audio(onMediaSuccess, controlbarid);\n            },\n\n            register_controlbar_events_audio: function (onMediaSuccess, controlbarid) {\n\n                var self = this;\n                var pmr = this.pmr;\n                var ip = this.fetch_instanceprops(controlbarid);\n\n                //init recording anim\n                ip.config.recanim = 'hwave_mic';\n                var recanim = hwave_mic.clone();\n                self.therecanim = recanim;\n                recanim.init(ip.audioanalyser, ip.controlbar.playcanvas.get(0));\n\n                //set visual mode\n                this.set_visual_mode('startmode', controlbarid);\n\n\n                //Test button click\n                ip.controlbar.testbutton.click(function () {\n                    //we will start recording here.\n                    //but its just a throwaway so we disable messages to API client and timer\n                    ip.config.hermes.disable();\n                    ip.timer.disable();\n\n\n\n                    var testover = function () {\n                        //stop recording\n                        pmr.do_stop_audio(ip);\n                        //wave animation\n                        recanim.clear();\n                        if (recanim.sounddetected) {\n                            self.set_visual_mode('readymode', controlbarid);\n                        }\n                    };\n                    pmr.do_start_audio(ip, onMediaSuccess);\n                    self.set_visual_mode('testingmode', controlbarid);\n                    setTimeout(testover, 4000);\n                });\n\n\n                ip.controlbar.settingsicon.click(function () {\n                    if (!self.uploaded) {\n                        self.devsettings.open();\n                    } else {\n                        ip.downloaddialog.open();\n                    }\n                });\n\n                //Start button click\n                ip.controlbar.startbutton.click(function () {\n                    //we start real recording here.\n                    // so we enable messages to API client and timer\n                    ip.config.hermes.enable();\n                    ip.timer.enable();\n\n                    pmr.do_start_audio(ip, onMediaSuccess);\n                });\n\n\n                //Stop button click\n                ip.controlbar.stopbutton.click(function () {\n\n                    //stop recording\n                    pmr.do_stop_audio(ip);\n\n                    //wave animation\n                    recanim.clear();\n\n\n                    //timer and status bar\n                    ip.timer.stop()\n                    self.update_status(controlbarid);\n\n                    //call upload right away\n                    //but we have to do it this lame deferred way because some mediastreamrecorders return a single\n                    //blob shortly after we stop. We init like that too, to make sure we do not truncate a users recording\n                    //if the mini blobs did not arrive\n                    var doDeferredUpload = function () {\n                        if (ip.blobs && ip.blobs.length > 0) {\n                            pmr.do_save_audio(ip);\n                            ip.uploaded = true;\n                            self.disable_button(ip.controlbar.startbutton);\n                        } else {\n                            setTimeout(doDeferredUpload, 200);\n                        }\n                    }\n                    setTimeout(doDeferredUpload, 200);\n\n                    //set visuals\n                    self.set_visual_mode('aftermode', controlbarid);\n\n                });\n\n\n                window.onbeforeunload = function () {\n                    //no need to do anything here\n                    // self.enable_button(ip.controlbar.startbutton);\n\n                };\n            }, //end of register_control_bar_events_readaloud\n\n\n            enable_button: function (button) {\n                $(button).attr('disabled', false);\n                $(button).removeClass('pmr_disabled');\n            },\n            disable_button: function (button) {\n                $(button).attr('disabled', true);\n                $(button).addClass('pmr_disabled');\n            },\n\n        };//end of returned object\n    });//total end\n"],"names":["define","$","log","utils","upskin_radial","hwave_mic","settings","debug","instanceprops","pmr","devsettings","therecanim","clone","extend","this","init","ip","fetch_instanceprops","onUploadSuccess","controlbarid","hide","show","onUploadFailure","fetch_status_bar","skin","fetch_preview_audio","fetch_preview_video","fetch_resource_audio","fetch_resource_video","onMediaError","e","console","error","onMediaSuccess_video","set_visual_mode","onMediaSuccess_audio","controlbar","preview","attr","uploader","Output","start","timer","reset","update_status","handle_timer_update","status","html","fetch_display_time","seconds","initseconds","stopbutton","click","fetch_uploader_skin","element","upskin","config","playcanvas","mode","disable_button","startbutton","enable_button","testbutton","placeholderbutton","clear","allowearlyexit","enabled","insert_controlbar_video","resource","prepare_controlbar_audio","insert_controlbar_audio","prepare_controlbar","mediatype","skin_style","media_skin_style","ss_startlabel","fetch_strings","M","util","get_string","ss_testlabel","ss_stoplabel","controls","fetch_dialogue_box","downloaddialog","errordialog","prepend","settingsdialog","errorsdialog","settingsicon","set_dialogue_box","register_controlbar_events_video","onMediaSuccess","register_controlbar_events_audio","self","recanim","audioanalyser","get","hermes","disable","do_start_audio","setTimeout","do_stop_audio","sounddetected","uploaded","open","enable","stop","doDeferredUpload","blobs","length","do_save_audio","window","onbeforeunload","button","removeClass","addClass"],"mappings":"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"}