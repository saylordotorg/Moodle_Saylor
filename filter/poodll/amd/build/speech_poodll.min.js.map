{"version":3,"sources":["../src/speech_poodll.js"],"names":["define","$","log","browserrecognition","awstranscriber","debug","recognizer","clone","extend","will_work_ok","opts","init","set_grammar","grammar","start","stream","onfinalspeechcapture","oninterimspeechcapture","stop","speechtext"],"mappings":"AACAA,OAAM,+BAAC,CAAC,QAAD,CAAW,UAAX,CAAuB,8BAAvB,CAAuD,qCAAvD,CAAD,CAAgG,SAAUC,CAAV,CAAaC,CAAb,CAAkBC,CAAlB,CAAsCC,CAAtC,CAAsD,CAExJ,aAEAF,CAAG,CAACG,KAAJ,CAAU,6BAAV,EAEA,MAAO,CAEHC,UAAU,CAAE,IAFT,CAMHC,KAAK,CAAE,gBAAY,CACf,MAAON,CAAAA,CAAC,CAACO,MAAF,IAAe,EAAf,CAAmB,IAAnB,CACV,CARE,CAWHC,YAAY,CAAE,sBAAUC,CAAV,CAAgB,CAG1B,GAAG,wBAA0BA,CAAAA,CAA7B,CAAmC,CAC/B,OAAQA,CAAI,qBAAZ,EACI,IAAK,KAAL,CACI,MAAON,CAAAA,CAAc,CAACK,YAAf,CAA4BC,CAA5B,CAAP,CACJ,IAAK,SAAL,CACI,MAAOP,CAAAA,CAAkB,CAACM,YAAnB,CAAgCC,CAAhC,CAAP,CAJR,CAMH,CAEF,MAASP,CAAAA,CAAkB,CAACM,YAAnB,CAAgCC,CAAhC,GACAN,CAAc,CAACK,YAAf,CAA4BC,CAA5B,CAEX,CA1BE,CA4BHC,IAAI,CAAE,cAAUD,CAAV,CAAgB,CAGlB,GAAG,wBAA0BA,CAAAA,CAA7B,CAAkC,CAC9B,OAAQA,CAAI,qBAAZ,EACI,IAAK,KAAL,CACI,KAAKJ,UAAL,CAAkBF,CAAc,CAACG,KAAf,EAAlB,CACA,KAAKD,UAAL,CAAgBK,IAAhB,CAAqBD,CAArB,EACA,MACJ,IAAK,SAAL,CACI,KAAKJ,UAAL,CAAkBH,CAAkB,CAACI,KAAnB,EAAlB,CACA,KAAKD,UAAL,CAAgBK,IAAhB,CAAqBD,CAArB,EACA,MARR,CAUH,CAGD,GAAG,CAAC,KAAKJ,UAAT,CAAqB,CACjB,GAAIH,CAAkB,CAACM,YAAnB,CAAgCC,CAAhC,CAAJ,CAA2C,CACvC,KAAKJ,UAAL,CAAkBH,CAAkB,CAACI,KAAnB,EAAlB,CACA,KAAKD,UAAL,CAAgBK,IAAhB,CAAqBD,CAArB,CACH,CAHD,IAGO,IAAIN,CAAc,CAACK,YAAf,CAA4BC,CAA5B,CAAJ,CAAuC,CAC1C,KAAKJ,UAAL,CAAkBF,CAAc,CAACG,KAAf,EAAlB,CACA,KAAKD,UAAL,CAAgBK,IAAhB,CAAqBD,CAArB,CACH,CAHM,IAGA,CAEHR,CAAG,CAACG,KAAJ,CAAU,mCAAV,EACA,QACH,CACJ,CACJ,CA1DE,CA4DHO,WAAW,CAAE,qBAAUC,CAAV,CAAmB,CAC5B,KAAKP,UAAL,CAAgBM,WAAhB,CAA4BC,CAA5B,CACH,CA9DE,CAgEHC,KAAK,CAAE,eAAUC,CAAV,CAAkB,CACrB,GAAI,CAAC,KAAKT,UAAV,CAAsB,CAClB,MACH,CACD,KAAKA,UAAL,CAAgBU,oBAAhB,CAAuC,KAAKA,oBAA5C,CACA,KAAKV,UAAL,CAAgBW,sBAAhB,CAAyC,KAAKA,sBAA9C,CACA,GAAI,KAAKX,UAAT,CAAqB,CACjB,KAAKA,UAAL,CAAgBQ,KAAhB,CAAsBC,CAAtB,CACH,CACJ,CAzEE,CA0EHG,IAAI,CAAE,eAAY,CACd,GAAI,CAAC,KAAKZ,UAAV,CAAsB,CAClB,MACH,CACD,GAAI,KAAKA,UAAT,CAAqB,CACjB,KAAKA,UAAL,CAAgBY,IAAhB,EACH,CACJ,CAjFE,CAmFHF,oBAAoB,CAAE,8BAAUG,CAAV,CAAoC,CACtD,GAAI,CAAC,KAAKb,UAAV,CAAsB,CAClB,MACH,CACDJ,CAAG,CAACG,KAAJ,CAAU,SAAWc,CAArB,CACH,CAxFE,CAyFHF,sBAAsB,CAAE,gCAAUE,CAAV,CAAsB,CAC1C,GAAI,CAAC,KAAKb,UAAV,CAAsB,CAClB,MACH,CACDJ,CAAG,CAACG,KAAJ,CAAU,WAAac,CAAvB,CACH,CA9FE,CAgGV,CAtGK,CAAN","sourcesContent":["/* jshint ignore:start */\ndefine(['jquery', 'core/log', 'filter_poodll/speech_browser', 'filter_poodll/speech_awstranscriber'], function ($, log, browserrecognition, awstranscriber) {\n\n    \"use strict\"; // jshint ;_;\n\n    log.debug('speech_poodll: initialising');\n\n    return {\n\n        recognizer: null,\n\n\n        //for making multiple instances\n        clone: function () {\n            return $.extend(true, {}, this);\n        },\n\n        //check that we can streaming transcribe\n        will_work_ok: function (opts) {\n            //a specific streaming transcriber might be requested\n            //if not , we can just use what is available\n            if('streamingtranscriber' in opts) {\n                switch (opts['streamingtranscriber']) {\n                    case 'aws':\n                        return awstranscriber.will_work_ok(opts);\n                    case 'browser':\n                        return browserrecognition.will_work_ok(opts);\n                }\n            }\n            //if no valid streamingtranscriber suggested just defaults\n           return ( browserrecognition.will_work_ok(opts) ||\n                    awstranscriber.will_work_ok(opts));\n\n        },\n\n        init: function (opts) {\n            //multiple recognizers presenting a single interface\n            //if a transcriber is requested we use that, otherwise we default to browser then AWS\n            if('streamingtranscriber' in opts){\n                switch (opts['streamingtranscriber']){\n                    case 'aws':\n                        this.recognizer = awstranscriber.clone();\n                        this.recognizer.init(opts);\n                        break;\n                    case 'browser':\n                        this.recognizer = browserrecognition.clone();\n                        this.recognizer.init(opts);\n                        break;\n                }\n            }\n\n            //if no hinted transcriber, just choose\n            if(!this.recognizer) {\n                if (browserrecognition.will_work_ok(opts)) {\n                    this.recognizer = browserrecognition.clone();\n                    this.recognizer.init(opts);\n                } else if (awstranscriber.will_work_ok(opts)) {\n                    this.recognizer = awstranscriber.clone();\n                    this.recognizer.init(opts)\n                } else {\n                    //should never arrive here. supposed to check first\n                    log.debug('no usable speech recognizer found');\n                    return false;\n                }\n            }\n        },\n\n        set_grammar: function (grammar) {\n            this.recognizer.set_grammar(grammar);\n        },\n\n        start: function (stream) {\n            if (!this.recognizer) {\n                return;\n            }\n            this.recognizer.onfinalspeechcapture = this.onfinalspeechcapture;\n            this.recognizer.oninterimspeechcapture = this.oninterimspeechcapture;\n            if (this.recognizer) {\n                this.recognizer.start(stream);\n            }\n        },\n        stop: function () {\n            if (!this.recognizer) {\n                return;\n            }\n            if (this.recognizer) {\n                this.recognizer.stop();\n            }\n        },\n\n        onfinalspeechcapture: function (speechtext,speechresults) {\n            if (!this.recognizer) {\n                return;\n            }\n            log.debug('final:' + speechtext);\n        },\n        oninterimspeechcapture: function (speechtext) {\n            if (!this.recognizer) {\n                return;\n            }\n            log.debug('interim:' + speechtext);\n        }\n    };//end of returned object\n});//total end\n"],"file":"speech_poodll.min.js"}