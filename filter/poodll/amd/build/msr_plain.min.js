define(["jquery","core/log","filter_poodll/utils_amd"],(function($,log,utils){return log.debug("PoodLL Plain Recorder: initialising"),{timeout:0,mediaRecorder:null,mediaStream:null,audioctx:null,msr:null,mediaType:null,audioBitsPerSecond:12800,videoBitsPerSecond:25e5,clone:function(){return $.extend(!0,{},this)},init:function(msr,mediaStream,audioctx,mediaType){this.msr=msr,this.mediaStream=mediaStream,this.audioctx=audioctx,this.mediaType=mediaType},start:function(timeSlice,__disableLogs){var stream,that=this;"audio"===this.mediaType&&(this.mediaStream.getVideoTracks().length&&this.mediaStream.getAudioTracks().length&&(log.debug("Somehow we got a video stream, paring it down to just audio. "),navigator.mozGetUserMedia?(stream=new MediaStream).addTrack(this.mediaStream.getAudioTracks()[0]):stream=new MediaStream(this.mediaStream.getAudioTracks()),this.mediaStream=stream));if(this.mimeType=!1,"audio"===this.mediaType){if(MediaRecorder.isTypeSupported){for(var audiotypes=["ogg","webm","quicktime","mp4","m4a","wav"],i=0;i<audiotypes.length;i++){var themimetype="audio/"+audiotypes[i];if(MediaRecorder.isTypeSupported(themimetype)){this.mimeType=themimetype;break}}!1===this.mimeType&&(this.mimeType=utils.is_chrome()?"audio/webm":"audio/ogg")}else this.mimeType="audio/mp4";var rec_options={audioBitsPerSecond:this.audioBitsPerSecond,mimeType:this.mimeType}}else{if(MediaRecorder.isTypeSupported){var videotypes=["webm","ogv","quicktime","mp4","mpeg"];for(i=0;i<videotypes.length;i++){themimetype="video/"+videotypes[i];if(MediaRecorder.isTypeSupported(themimetype)){this.mimeType=themimetype;break}}!1===this.mimeType&&(this.mimeType="video/webm")}else this.mimeType="video/mp4";rec_options={mimeType:this.mimeType}}try{this.mediaRecorder=new MediaRecorder(this.mediaStream,rec_options)}catch(e){this.mediaRecorder=new MediaRecorder(this.mediaStream),log.debug("MediaRecorder API seems unable to record mimeType:"+this.mimeType)}log.debug("msr_plain using mime type:"+this.mimeType),this.mediaRecorder.ignoreMutedMedia=this.ignoreMutedMedia||!1,this.mediaRecorder.ondataavailable=function(e){if(e.data&&e.data.size){var blob=e.data;that.msr.ondataavailable(blob)}},this.mediaRecorder.onerror=function(error){"InvalidState"===error.name?log.debug("The MediaRecorder is not in a state in which the proposed operation is allowed to be executed."):"OutOfMemory"===error.name?log.debug("The UA has exhaused the available memory. User agents SHOULD provide as much additional information as possible in the message attribute."):"IllegalStreamModification"===error.name?log.debug("A modification to the stream has occurred that makes it impossible to continue recording. An example would be the addition of a Track while recording is occurring. User agents SHOULD provide as much additional information as possible in the message attribute."):"OtherRecordingError"===error.name?log.debug("Used for an fatal error other than those listed above. User agents SHOULD provide as much additional information as possible in the message attribute."):"GenericError"===error.name?log.debug("The UA cannot provide the codec or recording option that has been requested.",error):log.debug("MediaRecorder Error",error),that.mediaRecorder&&"inactive"!==that.mediaRecorder.state&&"stopped"!==that.mediaRecorder.state&&that.mediaRecorder.stop()},this.audioctx.createMediaStreamSource(this.mediaStream).connect(this.msr.audioanalyser.core);try{that.mediaRecorder.start(timeSlice)}catch(e){that.mediaRecorder=null}},stop:function(callback){this.mediaRecorder&&"recording"===this.mediaRecorder.state&&this.mediaRecorder.stop()},pause:function(){this.mediaRecorder&&"recording"===this.mediaRecorder.state&&this.mediaRecorder.pause()},resume:function(){this.mediaRecorder&&"paused"===this.mediaRecorder.state&&this.mediaRecorder.resume()},clearRecordedData:function(){this.mediaRecorder&&(this.pause(),this.stop())},isMediaStreamActive:function(){if("active"in this.mediaStream){if(!this.mediaStream.active)return!1}else if("ended"in this.mediaStream&&this.mediaStream.ended)return!1;return!0},looper:function(){this.mediaRecorder&&(!1!==this.isMediaStreamActive()?setTimeout(this.looper,1e3):this.stop())}}}));

//# sourceMappingURL=msr_plain.min.js.map