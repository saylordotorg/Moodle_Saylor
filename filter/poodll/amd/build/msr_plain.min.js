define(["jquery","core/log","filter_poodll/utils_amd"],function(a,b,c){"use strict";return b.debug("PoodLL Plain Recorder: initialising"),{timeout:0,mediaRecorder:null,mediaStream:null,audioctx:null,msr:null,mediaType:null,audioBitsPerSecond:12800,videoBitsPerSecond:25e5,clone:function(){return a.extend(!0,{},this)},init:function(a,b,c,d){this.msr=a,this.mediaStream=b,this.audioctx=c,this.mediaType=d},start:function(a,d){var e=this;if("audio"===this.mediaType&&this.mediaStream.getVideoTracks().length&&this.mediaStream.getAudioTracks().length){b.debug("Somehow we got a video stream, paring it down to just audio. ");var f;navigator.mozGetUserMedia?(f=new MediaStream,f.addTrack(this.mediaStream.getAudioTracks()[0])):f=new MediaStream(this.mediaStream.getAudioTracks()),this.mediaStream=f}if(this.mimeType=!1,"audio"===this.mediaType){if(MediaRecorder.isTypeSupported){for(var g=["ogg","webm","quicktime","mp4","m4a","wav"],h=0;h<g.length;h++){var i="audio/"+g[h];if(MediaRecorder.isTypeSupported(i)){this.mimeType=i;break}}this.mimeType===!1&&(this.mimeType=c.is_chrome()?"audio/webm":"audio/ogg")}else this.mimeType="audio/mp4";var j={audioBitsPerSecond:this.audioBitsPerSecond,mimeType:this.mimeType}}else{if(MediaRecorder.isTypeSupported){for(var k=["webm","ogv","quicktime","mp4","mpeg"],h=0;h<k.length;h++){var i="video/"+k[h];if(MediaRecorder.isTypeSupported(i)){this.mimeType=i;break}}this.mimeType===!1&&(this.mimeType="video/webm")}else this.mimeType="video/mp4";var j={mimeType:this.mimeType}}try{this.mediaRecorder=new MediaRecorder(this.mediaStream,j)}catch(l){this.mediaRecorder=new MediaRecorder(this.mediaStream),b.debug("MediaRecorder API seems unable to record mimeType:"+this.mimeType)}b.debug("msr_plain using mime type:"+this.mimeType),this.mediaRecorder.ignoreMutedMedia=this.ignoreMutedMedia||!1,this.mediaRecorder.ondataavailable=function(a){if(a.data&&a.data.size){var b=a.data;e.msr.ondataavailable(b)}},this.mediaRecorder.onerror=function(a){"InvalidState"===a.name?b.debug("The MediaRecorder is not in a state in which the proposed operation is allowed to be executed."):"OutOfMemory"===a.name?b.debug("The UA has exhaused the available memory. User agents SHOULD provide as much additional information as possible in the message attribute."):"IllegalStreamModification"===a.name?b.debug("A modification to the stream has occurred that makes it impossible to continue recording. An example would be the addition of a Track while recording is occurring. User agents SHOULD provide as much additional information as possible in the message attribute."):"OtherRecordingError"===a.name?b.debug("Used for an fatal error other than those listed above. User agents SHOULD provide as much additional information as possible in the message attribute."):"GenericError"===a.name?b.debug("The UA cannot provide the codec or recording option that has been requested.",a):b.debug("MediaRecorder Error",a),e.mediaRecorder&&"inactive"!==e.mediaRecorder.state&&"stopped"!==e.mediaRecorder.state&&e.mediaRecorder.stop()};var m=this.audioctx.createMediaStreamSource(this.mediaStream);m.connect(this.msr.audioanalyser.core);try{e.mediaRecorder.start(a)}catch(l){e.mediaRecorder=null}},stop:function(a){this.mediaRecorder&&"recording"===this.mediaRecorder.state&&this.mediaRecorder.stop()},pause:function(){this.mediaRecorder&&"recording"===this.mediaRecorder.state&&this.mediaRecorder.pause()},resume:function(){this.mediaRecorder&&"paused"===this.mediaRecorder.state&&this.mediaRecorder.resume()},clearRecordedData:function(){this.mediaRecorder&&(this.pause(),this.stop())},isMediaStreamActive:function(){if("active"in this.mediaStream){if(!this.mediaStream.active)return!1}else if("ended"in this.mediaStream&&this.mediaStream.ended)return!1;return!0},looper:function(){if(this.mediaRecorder)return this.isMediaStreamActive()===!1?void this.stop():void setTimeout(this.looper,1e3)}}});