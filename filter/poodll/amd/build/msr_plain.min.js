define ("filter_poodll/msr_plain",["jquery","core/log","filter_poodll/utils_amd"],function(a,b,c){"use strict";b.debug("PoodLL Plain Recorder: initialising");return{timeout:0,mediaRecorder:null,mediaStream:null,audioctx:null,msr:null,mediaType:null,audioBitsPerSecond:12800,videoBitsPerSecond:25e5,clone:function clone(){return a.extend(!0,{},this)},init:function init(a,b,c,d){this.msr=a;this.mediaStream=b;this.audioctx=c;this.mediaType=d},start:function start(a){var d=this;if("audio"===this.mediaType){if(this.mediaStream.getVideoTracks().length&&this.mediaStream.getAudioTracks().length){b.debug("Somehow we got a video stream, paring it down to just audio. ");var e;if(!!navigator.mozGetUserMedia){e=new MediaStream;e.addTrack(this.mediaStream.getAudioTracks()[0])}else{e=new MediaStream(this.mediaStream.getAudioTracks())}this.mediaStream=e}}this.mimeType=!1;if("audio"===this.mediaType){if(!MediaRecorder.isTypeSupported){this.mimeType="audio/mp4"}else{for(var f=["ogg","webm","quicktime","mp4","m4a","wav"],g=0,h;g<f.length;g++){h="audio/"+f[g];if(MediaRecorder.isTypeSupported(h)){this.mimeType=h;break}}if(!1===this.mimeType){this.mimeType=c.is_chrome()?"audio/webm":"audio/ogg"}}var j={audioBitsPerSecond:this.audioBitsPerSecond,mimeType:this.mimeType}}else{if(!MediaRecorder.isTypeSupported){this.mimeType="video/mp4"}else{for(var k=["webm","ogv","quicktime","mp4","mpeg"],g=0,h;g<k.length;g++){h="video/"+k[g];if(MediaRecorder.isTypeSupported(h)){this.mimeType=h;break}}if(!1===this.mimeType){this.mimeType="video/webm"}}var j={mimeType:this.mimeType}}try{this.mediaRecorder=new MediaRecorder(this.mediaStream,j)}catch(a){this.mediaRecorder=new MediaRecorder(this.mediaStream);b.debug("MediaRecorder API seems unable to record mimeType:"+this.mimeType)}b.debug("msr_plain using mime type:"+this.mimeType);this.mediaRecorder.ignoreMutedMedia=this.ignoreMutedMedia||!1;this.mediaRecorder.ondataavailable=function(a){if(!a.data||!a.data.size){return}var b=a.data;d.msr.ondataavailable(b)};this.mediaRecorder.onerror=function(a){if("InvalidState"===a.name){b.debug("The MediaRecorder is not in a state in which the proposed operation is allowed to be executed.")}else if("OutOfMemory"===a.name){b.debug("The UA has exhaused the available memory. User agents SHOULD provide as much additional information as possible in the message attribute.")}else if("IllegalStreamModification"===a.name){b.debug("A modification to the stream has occurred that makes it impossible to continue recording. An example would be the addition of a Track while recording is occurring. User agents SHOULD provide as much additional information as possible in the message attribute.")}else if("OtherRecordingError"===a.name){b.debug("Used for an fatal error other than those listed above. User agents SHOULD provide as much additional information as possible in the message attribute.")}else if("GenericError"===a.name){b.debug("The UA cannot provide the codec or recording option that has been requested.",a)}else{b.debug("MediaRecorder Error",a)}if(!!d.mediaRecorder&&"inactive"!==d.mediaRecorder.state&&"stopped"!==d.mediaRecorder.state){d.mediaRecorder.stop()}};var l=this.audioctx.createMediaStreamSource(this.mediaStream);l.connect(this.msr.audioanalyser.core);try{d.mediaRecorder.start(a)}catch(a){d.mediaRecorder=null}},stop:function stop(){if(!this.mediaRecorder){return}if("recording"===this.mediaRecorder.state){this.mediaRecorder.stop()}},pause:function pause(){if(!this.mediaRecorder){return}if("recording"===this.mediaRecorder.state){this.mediaRecorder.pause()}},resume:function resume(){if(!this.mediaRecorder){return}if("paused"===this.mediaRecorder.state){this.mediaRecorder.resume()}},clearRecordedData:function clearRecordedData(){if(!this.mediaRecorder){return}this.pause();this.stop()},isMediaStreamActive:function isMediaStreamActive(){if("active"in this.mediaStream){if(!this.mediaStream.active){return!1}}else if("ended"in this.mediaStream){if(this.mediaStream.ended){return!1}}return!0},looper:function looper(){if(!this.mediaRecorder){return}if(!1===this.isMediaStreamActive()){this.stop();return}setTimeout(this.looper,1e3)}}});
//# sourceMappingURL=msr_plain.min.js.map
