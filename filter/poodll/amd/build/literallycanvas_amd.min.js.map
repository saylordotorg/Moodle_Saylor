{"version":3,"sources":["../src/literallycanvas_amd.js"],"names":["define","$","log","utils","uploader","React","LC","debug","instanceprops","loadliterallycanvas","opts","theid","optscontrol","get","JSON","parse","value","config","remove","element","lc_element","zoomMax","zoomMin","backimagebuffer","backgroundimage","Image","src","crossOrigin","backgroundshape","createShape","x","y","image","scale","lc","init","imageURLPrefix","backgroundColor","backgroundShapes","recorderid","vectordata","indexOf","loadSnapshot","clone","registerEvents","recid","mfp","on","m","savebutton","disabled","innerHTML","th","timeouthandles","clearTimeout","setTimeout","WhiteboardUploadHandler","uploadbutton","click","cvs","getCvs","pokeVectorData","uploadFile","toDataURL"],"mappings":"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","sourcesContent":["/* jshint ignore:start */\ndefine(['jquery', 'core/log', 'filter_poodll/utils_amd', 'filter_poodll/uploader', 'filter_poodll/react_amd', 'filter_poodll/literallycanvas'], function ($, log, utils, uploader, React, LC) {\n\n    \"use strict\"; // jshint ;_;\n\n    log.debug('Filter PoodLL: literallycanvas.js initialising');\n\n    return {\n\n        instanceprops: [],\n\n\n        // handle literallycanvas whiteboard saves for Moodle\n        loadliterallycanvas: function (opts) {\n\n            //pick up opts from html\n            var theid = '#amdopts_' + opts['recorderid'];\n            var optscontrol = $(theid).get(0);\n            if (optscontrol) {\n                opts = JSON.parse(optscontrol.value);\n                this.config = opts;\n                $(theid).remove();\n            }\n\n            //init the whiteboard\t(diff logic if have a background image)\n            var element = '#' + opts['recorderid'] + '_literally';\n            var lc_element = $(element)[0];\n\n            //zoom feature\n            var zoomMax = 4;\n            var zoomMin = 0.2;\n\n            if (opts['whiteboardnozoom'] > 0) {\n                zoomMax = 1;\n                zoomMin = 1;\n            }\n\n            if (opts['backgroundimage']) {\n                //simple using opts['backgroundimage'] as src would be better than using a buffer image, but LC won't show it.\n                var backimagebuffer = $('#' + opts['recorderid'] + '_separate-background-image')[0];\n                var backgroundimage = new Image();\n                backgroundimage.src = backimagebuffer.src;\n                backgroundimage.crossOrigin = \"Anonymous\";\n                var backgroundshape = LC.createShape('Image', {x: 0, y: 0, image: backgroundimage, scale: 1});\n\n\n                var lc = LC.init(lc_element, {\n                    imageURLPrefix: opts['imageurlprefix'],\n                    backgroundColor: opts['backgroundcolor'],\n                    backgroundShapes: [backgroundshape],\n                    recorderid: opts['recorderid'],\n                    zoomMax: zoomMax,\n                    zoomMin: zoomMin\n\n                });\n            } else {\n                var lc = LC.init(lc_element, {\n                    imageURLPrefix: opts['imageurlprefix'],\n                    backgroundColor: opts['backgroundcolor'],\n                    recorderid: opts['recorderid'],\n                    zoomMax: zoomMax,\n                    zoomMin: zoomMin\n                });\n            }\n\n            //store our lc reference\n            opts.lc = lc;\n\n            //restore previous drawing if any\n            var vectordata = opts['vectordata'];\n            if (vectordata) {\n                //don't restore drawingboardjs vector if its there, goes to error\n                if (vectordata.indexOf('{\"shapes\"') == 0 || vectordata.indexOf('{\"colors\"') == 0) {\n                    lc.loadSnapshot(JSON.parse(vectordata));\n                }\n            }\n\n            //init the uploader\n            opts.uploader = uploader.clone();\n            opts.uploader.init(element, opts);\n\n            //save opts under recorder id key. This is important to support multi on one page\n            //\"this\" is a singleton\n            this.instanceprops[opts['recorderid']] = opts;\n\n\n            //register the draw and save events that we need to handle\n            this.registerEvents(opts['recorderid']);\n\n        },\n\n        registerEvents: function (recid) {\n\n            var mfp = this;\n            var opts = this.instanceprops[recid];\n\n\n            //handle autosave\n            if (opts['autosave']) {\n                //if user has drawn, commence countdown to save\n                opts.lc.on('drawingChange', function () {\n                    var m = $('#' + recid + '_messages')[0];\n                    var savebutton = $('#' + recid + '_btn_upload_whiteboard')[0];\n                    if (m) {\n                        if (savebutton) {\n                            savebutton.disabled = false;\n                        }\n                        m.innerHTML = '';\n                        var th = utils.timeouthandles[recid];\n                        if (th) {\n                            clearTimeout(th);\n                        }\n                        utils.timeouthandles[recid] = setTimeout(\n                            function () {\n                                utils.WhiteboardUploadHandler(recid, opts.lc, opts, opts.uploader);\n                            },\n                            opts['autosave']);\n                    }\n                });\n\n                //if no autosave\n            } else {\n                //lc.on('drawingChange',(function(mfp){return function(){mfp.setUnsavedWarning;}})(this));\n                //if user has drawn, alert to unsaved state\n                opts.lc.on('drawingChange', function () {\n                    var m = $('#' + recid + '_messages');\n                    if (m) {\n                        m.innerHTML = 'File has not been saved.';\n                    }\n                });\n            }//end of handling autosave\n\n            //set up the upload/save button\n            var uploadbuttonstring = '#' + recid + '_btn_upload_whiteboard';\n            var uploadbutton = $(uploadbuttonstring);\n            if (uploadbutton) {\n                if (opts['autosave']) {\n                    uploadbutton.click(function () {\n                        utils.WhiteboardUploadHandler(recid, opts.lc, opts, opts.uploader);\n                    });\n                } else {\n                    uploadbutton.click(\n                        function () {\n                            var cvs = utils.getCvs(recid, opts.lc, opts);\n                            utils.pokeVectorData(recid, opts.lc, opts);\n                            opts.uploader.uploadFile(cvs.toDataURL(), 'image');\n                        });\n                }\n            }\n        },\n\n    }\n});"],"file":"literallycanvas_amd.min.js"}