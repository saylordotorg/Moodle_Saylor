{"version":3,"sources":["../src/dlg_download.js"],"names":["define","$","log","dialog","utils","debug","dlg","instanceprops","pmr","dlgbox","init","clone","setHeader","extend","fetch_blob_url","concatenatedBlob","simpleConcatenateBlobs","blobs","type","mediaurl","URL","createObjectURL","fetch_dialogue_box","set_dialogue_box","open","self","ip","ext","nowdatetime","Date","toISOString","replace","filename","config","mediatype","doConcatenateBlobs","bits","split","length","theurl","displaytext","M","util","get_string","content","setContent","registerEvents"],"mappings":"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","sourcesContent":["define(['jquery', 'core/log', 'filter_poodll/dlg_poodll', 'filter_poodll/utils_amd'], function ($, log, dialog, utils) {\r\n\r\n    log.debug('download dialog: initialising');\r\n\r\n\r\n    return {\r\n        dlg: null,\r\n        instanceprops: null,\r\n        pmr: null,\r\n        dlgbox: null,\r\n\r\n        init: function (pmr, instanceprops) {\r\n            this.dlg = dialog.clone();\r\n            this.dlg.setHeader('Download');\r\n            this.instanceprops = instanceprops;\r\n            this.pmr = pmr;\r\n        },\r\n        //for making multiple instances\r\n        clone: function () {\r\n            return $.extend(true, {}, this);\r\n        },\r\n\r\n        fetch_blob_url: function () {\r\n            var concatenatedBlob = utils.simpleConcatenateBlobs(this.instanceprops.blobs, this.instanceprops.blobs[0].type);\r\n            var mediaurl = URL.createObjectURL(concatenatedBlob);\r\n            return mediaurl;\r\n        },\r\n\r\n        fetch_dialogue_box: function () {\r\n            //this returns html that will be set to the DOM\r\n            return this.dlg.fetch_dialogue_box('download');\r\n        },\r\n        set_dialogue_box: function (dlgbox) {\r\n            //this is the jquery object that is the dlgbox in the DOM\r\n            this.dlgbox = dlgbox;\r\n            this.dlg.set_dialogue_box(dlgbox);\r\n\r\n        },\r\n        open: function () {\r\n            var self = this;\r\n            var ip = this.instanceprops;\r\n            var ext = '';\r\n            //make a filename with a 6 digit random number.\r\n            var nowdatetime = (new Date()).toISOString().replace(/[^0-9]/g, \"\");\r\n            var filename = ip.config.mediatype + '_' + nowdatetime;\r\n            //(Math.round(Math.random() * 899999,0) + 100000);\r\n            utils.doConcatenateBlobs(this.instanceprops.blobs, function (concatenatedBlob) {\r\n\r\n                //get blob type\r\n                switch (concatenatedBlob.type) {\r\n                    case 'audio/wav':\r\n                    case 'audio/pcm':\r\n                        ext = '.wav';\r\n                        break;\r\n                    case 'audio/ogg':\r\n                        ext = '.ogg';\r\n                        break;\r\n                    case 'audio/webm':\r\n                    case 'video/webm':\r\n                        ext = '.webm';\r\n                        break;\r\n\r\n                    default:\r\n                        var bits = concatenatedBlob.type.split('/');\r\n                        if (bits.length > 1) {\r\n                            ext = '.' + bits[1];\r\n                        } else {\r\n                            //if we ever get here we will just have to save an extension-less file.\r\n                        }\r\n                }\r\n                filename = filename + ext;\r\n\r\n                var theurl = URL.createObjectURL(concatenatedBlob);\r\n                var displaytext = M.util.get_string('recui_downloadfile', 'filter_poodll');\r\n                var content = '<div class=\"filter_poodll_dlgdownload_content\">';\r\n                content += '<a href=\"' + theurl + '\" download=\"' + filename + '\" class=\"btn btn-secondary\">' + displaytext + '</a>';\r\n                content += '</div>';\r\n                //set the html to the dialog and DOM\r\n                self.dlg.setContent(content);\r\n                //register events for the select boxes\r\n                self.registerEvents();\r\n                //open the dialog\r\n                self.dlg.open();\r\n            });\r\n        },\r\n\r\n        registerEvents: function () {\r\n            //we have no events\r\n        }\r\n    }\r\n\r\n});"],"file":"dlg_download.min.js"}