{"version":3,"sources":["../src/msr_stereoaudio.js"],"names":["define","$","log","helper","debug","timeout","mediaRecorder","mediaStream","msr","mediaType","clone","extend","init","audioctx","start","timeSlice","stop","that","record","setInterval","requestData","clearInterval","pause","resume","ondataavailable","blob","onstop","error"],"mappings":"AACAA,OAAM,iCAAC,CAAC,QAAD,CACC,UADD,CACa,sCADb,CAAD,CAEF,SAAUC,CAAV,CAAaC,CAAb,CAAkBC,CAAlB,CAA0B,CAEtB,aAEAD,CAAG,CAACE,KAAJ,CAAU,+BAAV,EAEA,MAAO,CACHC,OAAO,CAAE,CADN,CAEHC,aAAa,CAAE,IAFZ,CAGHC,WAAW,CAAE,IAHV,CAIHC,GAAG,CAAE,IAJF,CAKHC,SAAS,CAAE,OALR,CAQHC,KAAK,CAAE,gBAAY,CACf,MAAOT,CAAAA,CAAC,CAACU,MAAF,IAAe,EAAf,CAAmB,IAAnB,CACV,CAVE,CAcHC,IAAI,CAAE,cAAUJ,CAAV,CAAeD,CAAf,CAA4BM,CAA5B,CAAsCJ,CAAtC,CAAiD,CACnD,KAAKD,GAAL,CAAWA,CAAX,CACA,KAAKD,WAAL,CAAmBA,CAAnB,CACA,KAAKM,QAAL,CAAgBA,CAAhB,CACA,KAAKJ,SAAL,CAAiBA,CACpB,CAnBE,CAqBHK,KAAK,CAAE,eAAUC,CAAV,CAA+B,CAElC,GAAkB,CAAf,QAAKV,OAAR,CAAoB,CAChB,KAAKW,IAAL,EACH,CAEDD,CAAS,CAAGA,CAAS,EAAI,GAAzB,CACA,GAAIE,CAAAA,CAAI,CAAG,IAAX,CAEA,KAAKX,aAAL,CAAqBH,CAAM,CAACO,KAAP,EAArB,CACA,KAAKJ,aAAL,CAAmBM,IAAnB,CAAwB,KAAKJ,GAA7B,CAAkC,KAAKD,WAAvC,CAAoD,KAAKM,QAAzD,EAEA,KAAKP,aAAL,CAAmBY,MAAnB,GAEA,KAAKb,OAAL,CAAec,WAAW,CAAC,UAAY,CACnCF,CAAI,CAACX,aAAL,CAAmBc,WAAnB,EACH,CAFyB,CAEvBL,CAFuB,CAG7B,CAtCE,CAwCHC,IAAI,CAAE,eAAY,CACd,GAAI,KAAKV,aAAT,CAAwB,CACpB,KAAKA,aAAL,CAAmBU,IAAnB,GACAK,aAAa,CAAC,KAAKhB,OAAN,CAAb,CACA,KAAKA,OAAL,CAAc,CACjB,CACJ,CA9CE,CA+CHiB,KAAK,CAAE,gBAAY,CACf,GAAI,CAAC,KAAKhB,aAAV,CAAyB,CACrB,MACH,CAED,KAAKA,aAAL,CAAmBgB,KAAnB,EACH,CArDE,CAuDHC,MAAM,CAAE,iBAAY,CAChB,GAAI,CAAC,KAAKjB,aAAV,CAAyB,CACrB,MACH,CACD,KAAKA,aAAL,CAAmBiB,MAAnB,EACH,CA5DE,CA8DHC,eAAe,CAAE,yBAAUC,CAAV,CAAgB,CAC7BvB,CAAG,CAACE,KAAJ,CAAU,mBAAqBqB,CAA/B,CACH,CAhEE,CAkEHC,MAAM,CAAE,gBAAUC,CAAV,CAAiB,CACrBzB,CAAG,CAACE,KAAJ,CAAUuB,CAAV,CACH,CApEE,CAsEV,CA9EC,CAAN","sourcesContent":["/* jshint ignore:start */\ndefine(['jquery',\n        'core/log', 'filter_poodll/msr_helper_stereoaudio'],\n    function ($, log, helper) {\n\n        \"use strict\"; // jshint ;_;\n\n        log.debug('PoodLL Recorder: initialising');\n\n        return {\n            timeout: 0,\n            mediaRecorder: null,\n            mediaStream: null,\n            msr: null,\n            mediaType: 'audio',\n\n            //for making multiple instances\n            clone: function () {\n                return $.extend(true, {}, this);\n            },\n\n            // init the poodll recorder\n            // basically we check the users preferred recorders and if the rec supports the browser\n            init: function (msr, mediaStream, audioctx, mediaType) {\n                this.msr = msr;\n                this.mediaStream = mediaStream;\n                this.audioctx = audioctx;\n                this.mediaType = mediaType;//always audio\n            },\n\n            start: function (timeSlice, audioctx) {\n                //should start be called more than once, bad things could happen, so stop and then start\n                if(this.timeout!==0){\n                    this.stop();\n                }\n\n                timeSlice = timeSlice || 1000;\n                var that = this;\n\n                this.mediaRecorder = helper.clone();\n                this.mediaRecorder.init(this.msr, this.mediaStream, this.audioctx);\n\n                this.mediaRecorder.record();\n\n                this.timeout = setInterval(function () {\n                    that.mediaRecorder.requestData();\n                }, timeSlice);\n            },\n\n            stop: function () {\n                if (this.mediaRecorder) {\n                    this.mediaRecorder.stop();\n                    clearInterval(this.timeout);\n                    this.timeout =0;\n                }\n            },\n            pause: function () {\n                if (!this.mediaRecorder) {\n                    return;\n                }\n\n                this.mediaRecorder.pause();\n            },\n\n            resume: function () {\n                if (!this.mediaRecorder) {\n                    return;\n                }\n                this.mediaRecorder.resume();\n            },\n\n            ondataavailable: function (blob) {\n                log.debug('ondataavailable:' + blob);\n            },\n\n            onstop: function (error) {\n                log.debug(error);\n            }\n        };// end of returned object\n    });// total end\n"],"file":"msr_stereoaudio.min.js"}