{"version":3,"sources":["../src/speech_awstranscriber.js"],"names":["define","$","log","debug","final_transcript","start_timestamp","transcriber","clone","extend","will_work_ok","opts","ret","init","that","require","M","cfg","wwwroot","register_events","set_grammar","start","stream","active","ignore_onend","Date","now","stop","onFinalResult","speechtext","speechresults","onfinalspeechcapture","oninterimspeechcapture"],"mappings":"AACAA,OAAM,uCAAC,CAAC,QAAD,CAAW,UAAX,CAAD,CAAyB,SAAUC,CAAV,CAAaC,CAAb,CAAkB,CAE7C,aAEAA,CAAG,CAACC,KAAJ,CAAU,2BAAV,EAEA,MAAO,CAEHC,gBAAgB,CAAE,EAFf,CAGHC,eAAe,CAAE,CAHd,CAIHC,WAAW,CAAE,IAJV,CAQHC,KAAK,CAAE,gBAAY,CACf,MAAON,CAAAA,CAAC,CAACO,MAAF,IAAe,EAAf,CAAmB,IAAnB,CACV,CAVE,CAYHC,YAAY,CAAE,sBAASC,CAAT,CAAc,CACxB,GAAIC,CAAAA,CAAG,GAAP,CAGA,OAAOD,CAAI,SAAX,EACI,IAAK,OAAL,CACA,IAAK,OAAL,CACA,IAAK,OAAL,CACA,IAAK,OAAL,CACA,IAAK,OAAL,CACA,IAAK,OAAL,CACIC,CAAG,GAAH,CACA,MACJ,QACIA,CAAG,GAAH,CAVR,CAcA,GAAGA,CAAH,CAAQ,CACJ,OAAQD,CAAI,OAAZ,EACI,IAAK,SAAL,CACA,IAAK,SAAL,CACA,IAAK,SAAL,CACA,IAAK,QAAL,CACA,IAAK,QAAL,CACA,IAAK,QAAL,CACIC,CAAG,GAAH,CACA,MACJ,QACIA,CAAG,GAAH,CAVR,CAYH,CACD,MAAOA,CAAAA,CACV,CA7CE,CAgDHC,IAAI,CAAE,cAAUF,CAAV,CAAgB,CAClB,GAAIG,CAAAA,CAAI,CAAG,IAAX,CAEAC,OAAO,CAAC,CAAC,2FAAD,CAAD,CAA+F,SAASR,CAAT,CAAqB,CACvHO,CAAI,CAACP,WAAL,CAAmBA,CAAnB,CACAI,CAAI,WAAJ,CAAqB,GAArB,CACAA,CAAI,MAAJ,CAAgBA,CAAI,QAApB,CACAA,CAAI,SAAJ,CAAmBK,CAAC,CAACC,GAAF,CAAMC,OAAzB,CACAJ,CAAI,CAACP,WAAL,CAAiBM,IAAjB,CAAsBF,CAAtB,EACAG,CAAI,CAACK,eAAL,EACH,CAPM,CAsBV,CAzEE,CA2EHC,WAAW,CAAE,sBAAmB,CAS/B,CApFE,CAsFHC,KAAK,CAAE,eAAUC,CAAV,CAAkB,CACrB,GAAI,KAAKf,WAAL,CAAiBgB,MAArB,CAA6B,CACzB,MACH,CACD,KAAKlB,gBAAL,CAAwB,EAAxB,CACA,KAAKE,WAAL,CAAiBc,KAAjB,CAAuBC,CAAvB,CAA+B,KAAKf,WAApC,EACA,KAAKiB,YAAL,IACA,KAAKlB,eAAL,CAAuBmB,IAAI,CAACC,GAAL,EAE1B,CA/FE,CAgGHC,IAAI,CAAE,eAAY,CACd,GAAI,CAAC,KAAKpB,WAAL,CAAiBgB,MAAtB,CAA8B,CAC1B,MACH,CACD,KAAKhB,WAAL,CAAiBoB,IAAjB,CAAsB,KAAKpB,WAA3B,CACH,CArGE,CAuGHY,eAAe,CAAE,0BAAY,CACzB,GAAIL,CAAAA,CAAI,CAAC,IAAT,CACA,KAAKP,WAAL,CAAiBqB,aAAjB,CAAiC,SAASC,CAAT,CAAqBC,CAArB,CAAoC,CACzDhB,CAAI,CAACiB,oBAAL,CAA0BF,CAA1B,CAAqCC,CAArC,CACX,CAEJ,CA7GE,CA+GHC,oBAAoB,CAAE,8BAAUF,CAAV,CAAoC,CACtD1B,CAAG,CAACC,KAAJ,CAAUyB,CAAV,CACH,CAjHE,CAkHHG,sBAAsB,CAAE,iCAAsB,CAE7C,CApHE,CAuHV,CA7HK,CAAN","sourcesContent":["/* jshint ignore:start */\ndefine(['jquery', 'core/log'], function ($, log) {\n\n    \"use strict\"; // jshint ;_;\n\n    log.debug('aws_instant: initialising');\n\n    return {\n\n        final_transcript: '',\n        start_timestamp: 0,\n        transcriber: null,\n\n\n        //for making multiple instances\n        clone: function () {\n            return $.extend(true, {}, this);\n        },\n\n        will_work_ok: function(opts){\n            var ret = false;\n\n            //The instance languages\n            switch(opts['language']){\n                case 'en-AU':\n                case 'en-GB':\n                case 'en-US':\n                case 'es-US':\n                case 'fr-FR':\n                case 'fr-CA':\n                    ret =true;\n                    break;\n                default:\n                    ret = false;\n            }\n\n            //The supported regions\n            if(ret) {\n                switch (opts['region']) {\n                    case \"useast1\":\n                    case \"useast2\":\n                    case \"uswest2\":\n                    case \"sydney\":\n                    case \"dublin\":\n                    case \"ottawa\":\n                        ret =true;\n                        break;\n                    default:\n                        ret = false;\n                }\n            }\n            return ret;\n        },\n\n\n        init: function (opts) {\n            var that = this;\n            //require(['http://localhost/moodle/local/cpapi/cloudpoodll/amd/build/awstranscriber.min.js'],function(transcriber){\n            require(['https://cdn.jsdelivr.net/gh/justinhunt/cloudpoodll@latest/amd/build/awstranscriber.min.js'],function(transcriber){\n                that.transcriber = transcriber;\n                opts['expiretime'] = 300;\n                opts['token'] = opts['wstoken'];\n                opts['wsserver'] = M.cfg.wwwroot;\n                that.transcriber.init(opts);\n                that.register_events();\n            });\n\n            //init streaming transcriber\n            /*\n            var opts = {};\n            opts['language'] = lang;\n            opts['region'] = app.props.region;\n            opts['token'] = app.props.token;\n            opts['parent'] = app.props.parent;\n            opts['owner'] = app.props.owner;\n            opts['appid'] = app.props.appid;\n            opts['expiretime'] = app.props.expiretime;\n            */\n\n\n        },\n\n        set_grammar: function (grammar) {\n            /*\n            var SpeechGrammarList = SpeechGrammarList || webkitSpeechGrammarList;\n            if (SpeechGrammarList) {\n                var speechRecognitionList = new SpeechGrammarList();\n                speechRecognitionList.addFromString(grammar, 1);\n                this.recognition.grammars = speechRecognitionList;\n            }\n            */\n        },\n\n        start: function (stream) {\n            if (this.transcriber.active) {\n                return;\n            }\n            this.final_transcript = '';\n            this.transcriber.start(stream, this.transcriber);\n            this.ignore_onend = false;\n            this.start_timestamp = Date.now();//event.timeStamp;\n\n        },\n        stop: function () {\n            if (!this.transcriber.active) {\n                return;\n            }\n            this.transcriber.stop(this.transcriber);\n        },\n\n        register_events: function () {\n            var that=this;\n            this.transcriber.onFinalResult = function(speechtext, speechresults) {\n                        that.onfinalspeechcapture(speechtext,speechresults);\n            };\n\n        },//end of register events\n\n        onfinalspeechcapture: function (speechtext,speechresults) {\n            log.debug(speechtext);\n        },\n        oninterimspeechcapture: function (speechtext) {\n            // log.debug(speechtext);\n        }\n\n    };//end of returned object\n});//total end\n"],"file":"speech_awstranscriber.min.js"}