{"version":3,"sources":["../src/audioanalyser.js"],"names":["define","$","log","debug","acontext","core","freq_data","wav_data","theinterval","clone","extend","clear","clearInterval","init","createAnalyser","start","bufferLength","frequencyBinCount","Uint8Array","thisthing","setInterval","process_recent_data","that","getByteTimeDomainData","wav_event","getByteFrequencyData","freq_event"],"mappings":"AACAA,OAAM,+BAAC,CAAC,QAAD,CAAW,UAAX,CAAD,CAAyB,SAAUC,CAAV,CAAaC,CAAb,CAAkB,CAE7C,aAEAA,CAAG,CAACC,KAAJ,CAAU,6BAAV,EAEA,MAAO,CAEHC,QAAQ,CAAE,IAFP,CAGHC,IAAI,CAAE,IAHH,CAIHC,SAAS,CAAE,IAJR,CAKHC,QAAQ,CAAE,IALP,CAMHC,WAAW,CAAE,IANV,CASHC,KAAK,CAAE,gBAAY,CACf,MAAOR,CAAAA,CAAC,CAACS,MAAF,IAAe,EAAf,CAAmB,IAAnB,CACV,CAXE,CAaHC,KAAK,CAAE,gBAAY,CACfC,aAAa,CAAC,KAAKJ,WAAN,CAAb,CACA,KAAKA,WAAL,CAAmB,IACtB,CAhBE,CAmBHK,IAAI,CAAE,cAAUT,CAAV,CAAoB,CACtB,GAAI,KAAKI,WAAT,CAAsB,CAClB,KAAKG,KAAL,EACH,CACD,KAAKP,QAAL,CAAgBA,CAAhB,CACA,KAAKC,IAAL,CAAY,KAAKD,QAAL,CAAcU,cAAd,EACf,CAzBE,CA4BHC,KAAK,CAAE,gBAAY,CACf,GAAI,KAAKP,WAAT,CAAsB,CAClB,KAAKG,KAAL,EACH,CACD,GAAIK,CAAAA,CAAY,CAAG,KAAKX,IAAL,CAAUY,iBAA7B,CACA,KAAKX,SAAL,CAAiB,GAAIY,CAAAA,UAAJ,CAAeF,CAAf,CAAjB,CACA,KAAKT,QAAL,CAAgB,GAAIW,CAAAA,UAAJ,CAAeF,CAAf,CAAhB,CAGA,GAAIG,CAAAA,CAAS,CAAG,IAAhB,CACA,KAAKX,WAAL,CAAmBY,WAAW,CAAC,UAAY,CACnCD,CAAS,CAACE,mBAAV,CAA8BF,CAA9B,CACH,CAFyB,CAGxB,GAHwB,CAKjC,CA3CE,CA6CHE,mBAAmB,CAAE,6BAAUC,CAAV,CAAgB,CAUjCA,CAAI,CAACjB,IAAL,CAAUkB,qBAAV,CAAgCD,CAAI,CAACf,QAArC,EACAe,CAAI,CAACE,SAAL,CAAeF,CAAI,CAACf,QAApB,EAGAe,CAAI,CAACjB,IAAL,CAAUoB,oBAAV,CAA+BH,CAAI,CAAChB,SAApC,EACAgB,CAAI,CAACI,UAAL,CAAgBJ,CAAI,CAAChB,SAArB,CACH,CA7DE,CAmEHkB,SAAS,CAAE,oBAAgB,CAC1B,CApEE,CAqEHE,UAAU,CAAE,qBAAgB,CAC3B,CAtEE,CAwEV,CA9EK,CAAN","sourcesContent":["/* jshint ignore:start */\ndefine(['jquery', 'core/log'], function ($, log) {\n\n    \"use strict\"; // jshint ;_;\n\n    log.debug('audioanalyser: initialising');\n\n    return {\n\n        acontext: null,\n        core: null,\n        freq_data: null,\n        wav_data: null,\n        theinterval: null,\n\n        //for making multiple instances\n        clone: function () {\n            return $.extend(true, {}, this);\n        },\n\n        clear: function () {\n            clearInterval(this.theinterval);\n            this.theinterval = null;\n        },\n\n        //init\n        init: function (acontext) {\n            if (this.theinterval) {\n                this.clear();\n            }\n            this.acontext = acontext;\n            this.core = this.acontext.createAnalyser();\n        },\n\n        //start\n        start: function () {\n            if (this.theinterval) {\n                this.clear();\n            }\n            var bufferLength = this.core.frequencyBinCount;\n            this.freq_data = new Uint8Array(bufferLength);\n            this.wav_data = new Uint8Array(bufferLength);\n\n            //this runs the events loop that we use to publish data\n            var thisthing = this;\n            this.theinterval = setInterval(function () {\n                    thisthing.process_recent_data(thisthing);\n                }\n                , 2000);\n\n        },\n\n        process_recent_data: function (that) {\n\n\n            //prepare the loop that will roll over publishing data\n            /*\n\t\t\tvar raf = window.requestAnimationFrame || window.mozRequestAnimationFrame ||\n\t\t\t\t\t\t  window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n\t\t\traf(that.process_recent_data);\n\t\t\t*/\n            //get store and publish wav data\n            that.core.getByteTimeDomainData(that.wav_data);\n            that.wav_event(that.wav_data);\n\n            //get store and publish freq data\n            that.core.getByteFrequencyData(that.freq_data);\n            that.freq_event(that.freq_data);\n        },\n\n        //overwrite these to get events 5 a second\n        //but probably you will just call getByteTimeDomainData or gtByteFrequencyData from\n        //requestanimationframe in your drawing code if youa re using visualisations\n        //wav_event: function(data){log.debug(data);},\n        wav_event: function (data) {\n        },\n        freq_event: function (data) {\n        }\n    };//end of returned object\n});//total end\n"],"file":"audioanalyser.min.js"}