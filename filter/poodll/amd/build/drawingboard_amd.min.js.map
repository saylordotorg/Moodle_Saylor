{"version":3,"sources":["../src/drawingboard_amd.js"],"names":["define","$","log","utils","uploader","DrawingBoard","debug","instanceprops","loaddrawingboard","opts","theid","optscontrol","get","JSON","parse","value","erasercolor","config","remove","element","db","Board","recorderid","size","background","controls","Size","type","DrawingMode","filler","eraser","pencil","droppable","webStorage","enlargeYourContainer","eraserColor","vectordata","indexOf","history","Y","setImg","values","position","clone","init","registerEvents","recid","doStartDrawing","m","document","getElementById","innerHTML","savebutton","disabled","th","timeouthandles","clearTimeout","setTimeout","WhiteboardUploadHandler","doStopDrawing","ev","bind","uploadbutton","autosave","click","cvs","getCvs","pokeVectorData","uploadFile","toDataURL"],"mappings":"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","sourcesContent":["/* jshint ignore:start */\ndefine(['jquery', 'core/log', 'filter_poodll/utils_amd', 'filter_poodll/uploader', 'filter_poodll/drawingboard'], function ($, log, utils, uploader, DrawingBoard) {\n\n    \"use strict\"; // jshint ;_;\n\n    log.debug('Filter PoodLL: drawingboard.js initialising');\n\n    return {\n\n        instanceprops: [],\n\n\n        // handle drawingboard whiteboard saves for Moodle\n        loaddrawingboard: function (opts) {\n\n            //pick up opts from html\n            var theid = '#amdopts_' + opts['recorderid'];\n            var optscontrol = $(theid).get(0);\n            if (optscontrol) {\n                opts = JSON.parse(optscontrol.value);\n                if (opts['bgimage']) {\n                    var erasercolor = 'transparent';\n                } else {\n                    var erasercolor = 'background';\n                    opts['bgimage'] = '#FFF';\n                }\n\n                this.config = opts;\n                $(theid).remove();\n            }\n\n\n            // load the whiteboard and save the canvas reference\n            var element = '#' + opts['recorderid'] + 'drawing-board-id';\n            var db = new DrawingBoard.Board(opts['recorderid'] + '_drawing-board-id', {\n                recorderid: opts['recorderid'],\n                size: 3,\n                background: opts['bgimage'],\n                controls: ['Color',\n                    {Size: {type: 'auto'}},\n                    {DrawingMode: {filler: false, eraser: true, pencil: true}},\n                    'Navigation'\n                ],\n                droppable: true,\n                webStorage: false,\n                enlargeYourContainer: true,\n                eraserColor: erasercolor\n            });\n            opts.db = db;\n\n\n            //restore previous drawing if any\n            //restore vectordata\n            var vectordata = opts['vectordata'];\n            if (vectordata) {\n                //dont do anything if its not JSON (ie it coule be from LC)\n                if (vectordata.indexOf('{\"shapes\"') != 0 && vectordata.indexOf('{\"colors\"') != 0) {\n                    db.history = Y.JSON.parse(vectordata);\n                    db.setImg(db.history.values[db.history.position - 1]);\n                }\n            }\n\n            //init uploader\n            opts.uploader = uploader.clone();\n            opts.uploader.init(element, opts);\n\n            //store opts in instance props, cos this is a singleton\n            this.instanceprops[opts['recorderid']] = opts;\n\n            //register the draw and save events that we need to handle\n            this.registerEvents(opts['recorderid']);\n\n        },\n\n        registerEvents: function (recid) {\n            //register events. if autosave we need to do more.\n            var opts = this.instanceprops[recid];\n            if (opts['autosave']) {\n                //autosave, clear messages and save callbacks on start drawing\n                var doStartDrawing = function () {\n                    var m = document.getElementById(recid + '_messages');\n                    if (m) {\n                        m.innerHTML = 'File has not been saved.';\n                        var savebutton = document.getElementById(recid + '_btn_upload_whiteboard');\n                        savebutton.disabled = false;\n                        var th = utils.timeouthandles[recid];\n                        if (th) {\n                            clearTimeout(th);\n                        }\n                        utils.timeouthandles[recid] = setTimeout(\n                            function () {\n                                utils.WhiteboardUploadHandler(recid, opts.db, opts, opts.uploader);\n                            },\n                            opts['autosave']);\n                    }\n                }//end of start drawing function\n\n                //autosave, clear previous callbacks,set new save callbacks on stop drawing\n                var doStopDrawing = function () {\n                    var m = document.getElementById(recid + '_messages');\n                    if (m) {\n                        var th = utils.timeouthandles[recid];\n                        if (th) {\n                            clearTimeout(th);\n                        }\n                        utils.timeouthandles[recid] = setTimeout(\n                            function () {\n                                utils.WhiteboardUploadHandler(recid, opts.db, opts, opts.uploader);\n                            },\n                            opts['autosave']);\n                    }\n                }//end of stop drawing function\n\n                //autosave, clear previous callbacks,set new save callbacks on stop drawing\n                opts.db.ev.bind('board:startDrawing', doStartDrawing);\n                opts.db.ev.bind('board:stopDrawing', doStopDrawing);\n                opts.db.ev.bind('board:reset', doStopDrawing);\n                opts.db.ev.bind('historyNavigation', doStopDrawing);\n\n\n            } else {\n                var doStopDrawing = function () {\n                    var m = document.getElementById(recid + '_messages');\n                    if (m) {\n                        m.innerHTML = 'File has not been saved.';\n                    }\n                }//end of stop drawing function\n                opts.db.ev.bind('board:stopDrawing', doStopDrawing);\n            }\n\n            //set up the upload/save button\n            var uploadbuttonstring = '#' + recid + '_btn_upload_whiteboard';\n            var uploadbutton = $(uploadbuttonstring);\n            if (uploadbutton) {\n                if (opts.autosave) {\n                    uploadbutton.click(function () {\n                        utils.WhiteboardUploadHandler(recid, opts.db, opts, opts.uploader);\n                    });\n                } else {\n                    uploadbutton.click(\n                        function () {\n                            var cvs = utils.getCvs(recid, opts.db, opts);\n                            utils.pokeVectorData(recid, opts.db, opts);\n                            opts.uploader.uploadFile(cvs.toDataURL(), 'image');\n                        });\n                }\n            }//end of if upload button\n        } //end of reg events\n    }\n});"],"file":"drawingboard_amd.min.js"}