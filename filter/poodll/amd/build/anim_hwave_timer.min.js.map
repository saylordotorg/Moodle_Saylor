{"version":3,"sources":["../src/anim_hwave_timer.js"],"names":["define","$","log","debug","analyser","cvs","cvsctx","sounddetected","displaytime","drawparams","wavColor","textColor","lineWidth","font","textAlign","clone","extend","init","getContext","setDrawParam","paramkey","paramvalue","clear","clearRect","width","height","strokeStyle","beginPath","drawTime","stroke","ctx","cwidth","cheight","fillStyle","fillText","start","core","fftSize","bufferLength","dataArray","Uint8Array","canvasCtx","that","draw","requestAnimationFrame","theinterval","getByteTimeDomainData","lineheight","x","level","i","v","y","moveTo","lineTo"],"mappings":"AACAA,OAAM,kCAAC,CAAC,QAAD,CAAW,UAAX,CAAD,CAAyB,SAAUC,CAAV,CAAaC,CAAb,CAAkB,CAE7C,aAEAA,CAAG,CAACC,KAAJ,CAAU,uCAAV,EAEA,MAAO,CAEHC,QAAQ,CAAE,IAFP,CAGHC,GAAG,CAAE,IAHF,CAIHC,MAAM,CAAE,IAJL,CAKHC,aAAa,GALV,CAMHC,WAAW,CAAE,UANV,CAOHC,UAAU,CAAE,CACRC,QAAQ,CAAE,SADF,CAERC,SAAS,CAAE,SAFH,CAGRC,SAAS,CAAE,CAHH,CAIRC,IAAI,CAAE,cAJE,CAKRC,SAAS,CAAE,QALH,CAPT,CAgBHC,KAAK,CAAE,gBAAY,CACf,MAAOd,CAAAA,CAAC,CAACe,MAAF,IAAe,EAAf,CAAmB,IAAnB,CACV,CAlBE,CAsBHC,IAAI,CAAE,cAAUb,CAAV,CAAoBC,CAApB,CAAyB,CAC3B,KAAKA,GAAL,CAAWA,CAAX,CACA,KAAKC,MAAL,CAAcD,CAAG,CAACa,UAAJ,CAAe,IAAf,CAAd,CACA,KAAKZ,MAAL,CAAYQ,SAAZ,CAAwB,KAAKL,UAAL,CAAgBK,SAAxC,CACA,KAAKV,QAAL,CAAgBA,CACnB,CA3BE,CA6BHe,YAAY,CAAE,sBAAUC,CAAV,CAAoBC,CAApB,CAAgC,CAC1C,KAAKZ,UAAL,CAAgBW,CAAhB,EAA4BC,CAC/B,CA/BE,CAiCHC,KAAK,CAAE,gBAAY,CACf,KAAKhB,MAAL,CAAYiB,SAAZ,CAAsB,CAAtB,CAAyB,CAAzB,CAA4B,KAAKlB,GAAL,CAASmB,KAArC,CAA4C,KAAKnB,GAAL,CAASoB,MAArD,EACA,KAAKnB,MAAL,CAAYM,SAAZ,CAAwB,CAAxB,CACA,KAAKN,MAAL,CAAYoB,WAAZ,CAA0B,KAAKjB,UAAL,CAAgBE,SAA1C,CACA,KAAKL,MAAL,CAAYqB,SAAZ,GACA,KAAKC,QAAL,CAAc,KAAKtB,MAAnB,CAA2B,KAAKE,WAAhC,CAA6C,KAAKH,GAAL,CAASmB,KAAtD,CAA6D,KAAKnB,GAAL,CAASoB,MAAtE,EACA,KAAKnB,MAAL,CAAYuB,MAAZ,EACH,CAxCE,CA0CHD,QAAQ,CAAE,kBAAUE,CAAV,CAAetB,CAAf,CAA4BuB,CAA5B,CAAoCC,CAApC,CAA6C,CACnDF,CAAG,CAACG,SAAJ,CAAgB,KAAKxB,UAAL,CAAgBE,SAAhC,CACAmB,CAAG,CAACjB,IAAJ,CAAW,KAAKJ,UAAL,CAAgBI,IAA3B,CACAiB,CAAG,CAACI,QAAJ,CAAa1B,CAAb,CAA0BuB,CAAM,CAAG,CAAnC,CAAsD,CAAhB,EAACC,CAAO,CAAG,CAAX,CAAtC,CACH,CA9CE,CAgDHG,KAAK,CAAE,gBAAY,CACf,KAAK/B,QAAL,CAAcgC,IAAd,CAAmBC,OAAnB,CAA6B,IAA7B,CADe,GAEXC,CAAAA,CAAY,CAAG,KAAKlC,QAAL,CAAcgC,IAAd,CAAmBC,OAFvB,CAGXE,CAAS,CAAG,GAAIC,CAAAA,UAAJ,CAAeF,CAAf,CAHD,CAIXP,CAAM,CAAG,KAAK1B,GAAL,CAASmB,KAJP,CAKXQ,CAAO,CAAG,KAAK3B,GAAL,CAASoB,MALR,CAMXgB,CAAS,CAAG,KAAKnC,MANN,CAOXF,CAAQ,CAAG,KAAKA,QAPL,CAQXsC,CAAI,CAAG,IARI,CASf,KAAKpB,KAAL,GAEA,GAAIqB,CAAAA,CAAI,CAAG,UAAY,CAEFC,qBAAqB,CAACD,CAAD,CAFnB,CAKnB,GAAI,CAACvC,CAAQ,CAACyC,WAAd,CAA2B,CACvB,MACH,CAEDzC,CAAQ,CAACgC,IAAT,CAAcU,qBAAd,CAAoCP,CAApC,EAKAE,CAAS,CAAClB,SAAV,CAAoB,CAApB,CAAuB,CAAvB,CAA0BQ,CAA1B,CAAkCC,CAAlC,EAEAS,CAAS,CAAC7B,SAAV,CAAsB8B,CAAI,CAACjC,UAAL,CAAgBG,SAAtC,CACA6B,CAAS,CAACf,WAAV,CAAwBgB,CAAI,CAACjC,UAAL,CAAgBC,QAAxC,CACA+B,CAAS,CAACd,SAAV,GAlBmB,GAoBfoB,CAAAA,CAAU,CAAmB,CAAhB,EAACf,CAAO,CAAG,CAAX,CApBE,CAuBfgB,CAAC,CAAG,CAvBW,CA2BnB,GAAmB,CAAf,CAAAV,CAAJ,CAAsB,CAClB,GAAIW,CAAAA,CAAK,CAAGV,CAAS,CAACD,CAAY,CAAG,CAAhB,CAArB,CACA,GAAa,GAAT,EAAAW,CAAJ,CAAkB,CACdP,CAAI,CAACnC,aAAL,GACH,CACJ,CAED,IAAK,GAAI2C,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGZ,CAApB,CAAkCY,CAAC,EAAnC,CAAuC,IAE/BC,CAAAA,CAAC,CAAGZ,CAAS,CAACW,CAAD,CAAT,CAAe,GAFY,CAG/BE,CAAC,CAAGD,CAAC,CAAGJ,CAAJ,CAAiB,CAHU,CAKnC,GAAU,CAAN,EAAAG,CAAJ,CAAa,CACTT,CAAS,CAACY,MAAV,CAAiBL,CAAjB,CAAoBI,CAApB,CACH,CAFD,IAEO,CAEHX,CAAS,CAACa,MAAV,CAAiBN,CAAjB,CAAoBI,CAApB,CAEH,CAEDJ,CAAC,EAzBqB,CAAT,CAAAjB,CAAM,CAASO,CA0B/B,CAEDG,CAAS,CAACa,MAAV,CAAiBvB,CAAjB,CAAyBgB,CAAU,CAAG,CAAtC,EAEAL,CAAI,CAACd,QAAL,CAAca,CAAd,CAAyBC,CAAI,CAAClC,WAA9B,CAA2CuB,CAA3C,CAAmDC,CAAnD,EACAS,CAAS,CAACZ,MAAV,EAEH,CAvDD,CAyDAc,CAAI,EACP,CArHE,CAuHV,CA7HK,CAAN","sourcesContent":["/* jshint ignore:start */\ndefine(['jquery', 'core/log'], function ($, log) {\n\n    \"use strict\"; // jshint ;_;\n\n    log.debug('anim_horizontal_wave_ra: initialising');\n\n    return {\n\n        analyser: null,\n        cvs: null,\n        cvsctx: null,\n        sounddetected: false,\n        displaytime: '00:00:00',\n        drawparams: {\n            wavColor: \"#CCCCCC\",\n            textColor: \"#000000\",\n            lineWidth: 2,\n            font: '30px Georgia',\n            textAlign: \"center\"\n        },\n\n        //for making multiple instances\n        clone: function () {\n            return $.extend(true, {}, this);\n        },\n\n\n        //init\n        init: function (analyser, cvs) {\n            this.cvs = cvs;\n            this.cvsctx = cvs.getContext(\"2d\");\n            this.cvsctx.textAlign = this.drawparams.textAlign;\n            this.analyser = analyser;\n        },\n\n        setDrawParam: function (paramkey, paramvalue) {\n            this.drawparams[paramkey] = paramvalue;\n        },\n\n        clear: function () {\n            this.cvsctx.clearRect(0, 0, this.cvs.width, this.cvs.height);\n            this.cvsctx.lineWidth = 2;\n            this.cvsctx.strokeStyle = this.drawparams.textColor;\n            this.cvsctx.beginPath();\n            this.drawTime(this.cvsctx, this.displaytime, this.cvs.width, this.cvs.height);\n            this.cvsctx.stroke();\n        },\n\n        drawTime: function (ctx, displaytime, cwidth, cheight) {\n            ctx.fillStyle = this.drawparams.textColor;\n            ctx.font = this.drawparams.font;\n            ctx.fillText(displaytime, cwidth / 2, (cheight / 4) * 3);\n        },\n\n        start: function () {\n            this.analyser.core.fftSize = 2048;\n            var bufferLength = this.analyser.core.fftSize;\n            var dataArray = new Uint8Array(bufferLength);\n            var cwidth = this.cvs.width;\n            var cheight = this.cvs.height;\n            var canvasCtx = this.cvsctx;\n            var analyser = this.analyser;\n            var that = this;\n            this.clear();\n\n            var draw = function () {\n\n                var drawVisual = requestAnimationFrame(draw);\n\n                //cancel out if the theinterval is null\n                if (!analyser.theinterval) {\n                    return;\n                }\n\n                analyser.core.getByteTimeDomainData(dataArray);\n\n                //filling is rubbish, we just clear it\n                //canvasCtx.fillStyle = 'rgb(200, 200, 200)';\n                //canvasCtx.fillRect(0, 0, cwidth, cheight);\n                canvasCtx.clearRect(0, 0, cwidth, cheight);\n\n                canvasCtx.lineWidth = that.drawparams.lineWidth;\n                canvasCtx.strokeStyle = that.drawparams.wavColor;\n                canvasCtx.beginPath();\n\n                var lineheight = (cheight / 4) * 3;\n\n                var sliceWidth = cwidth * 2.0 / bufferLength;\n                var x = 0;\n                var oldy = 0;\n\n                //we check if we could capture sound here\n                if (bufferLength > 0) {\n                    var level = dataArray[bufferLength - 1];\n                    if (level != 128) {\n                        that.sounddetected = true;\n                    }\n                }\n\n                for (var i = 0; i < bufferLength; i++) {\n\n                    var v = dataArray[i] / 128.0;\n                    var y = v * lineheight / 2;\n\n                    if (i === 0) {\n                        canvasCtx.moveTo(x, y);\n                    } else {\n                        //canvasCtx.lineTo(x, oldy);\n                        canvasCtx.lineTo(x, y);\n\n                    }\n                    oldy = y;\n                    x += sliceWidth;\n                }\n\n                canvasCtx.lineTo(cwidth, lineheight / 2);\n                //draw thetime\n                that.drawTime(canvasCtx, that.displaytime, cwidth, cheight);\n                canvasCtx.stroke();\n\n            };\n\n            draw();\n        }//END OF START\n    };//end of returned object\n});//total end\n"],"file":"anim_hwave_timer.min.js"}