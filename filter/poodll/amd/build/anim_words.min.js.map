{"version":3,"sources":["../src/anim_words.js"],"names":["define","$","log","speechrecognition","debug","analyser","cvs","cvsctx","speechrec","enabled","drawparams","textColor","wavColor","font","textAlign","clone","extend","init","getContext","setDrawParam","paramkey","paramvalue","clear","clearRect","width","height","stop","start","that","core","fftSize","bufferLength","dataArray","Uint8Array","cwidth","cheight","ceight","words","oninterimspeechcapture","speechtext","newwords","split","concat","draw","reqAnimFrame","window","requestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","msRequestAnimationFrame","drawVisual","getByteTimeDomainData","lineWidth","strokeStyle","beginPath","x","i","v","y","moveTo","lineTo","stroke","fillStyle","cellvcenter","fillText","length"],"mappings":"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","sourcesContent":["/* jshint ignore:start */\ndefine(['jquery', 'core/log', 'filter_poodll/speech_poodll'], function ($, log, speechrecognition) {\n\n    \"use strict\"; // jshint ;_;\n\n    log.debug('anim_words: initialising');\n\n    return {\n\n        analyser: null,\n        cvs: null,\n        cvsctx: null,\n        speechrec: null,\n        enabled: false,\n        drawparams: {\n            textColor: '#0',\n            wavColor: '#0',\n            font: '14px Comic Sans MS',\n            textAlign: \"center\"\n        },\n\n        //for making multiple instances\n        clone: function () {\n            return $.extend(true, {}, this);\n        },\n\n\n        //init\n        init: function (analyser, cvs) {\n            this.cvs = cvs;\n            this.cvsctx = cvs.getContext(\"2d\");\n            this.analyser = analyser;\n\n            this.speechrec = speechrecognition.clone();\n            this.speechrec.init('en-US');\n\n        },\n\n        setDrawParam: function (paramkey, paramvalue) {\n            this.drawparams[paramkey] = paramvalue;\n        },\n\n        //clear\n        //more specifically stop, but to be consistent with how we do other anims, we call it clear\n        clear: function () {\n            this.cvsctx.clearRect(0, 0, this.cvs.width, this.cvs.height);\n            this.enabled = false;\n            this.speechrec.stop();\n        },\n\n\n        //start the anim\n        start: function () {\n            //set up variables used in drawing\n            this.enabled = true;\n            var that = this;\n            this.analyser.core.fftSize = 2048;\n            var bufferLength = this.analyser.core.fftSize;\n            var dataArray = new Uint8Array(bufferLength);\n            var cwidth = this.cvs.width;\n            var cheight = this.cvs.height;\n\n            //clear the canvas\n            this.cvsctx.clearRect(0, 0, cwidth, this.ceight);\n\n            //set up speechrecognizer to fill words array\n            var words = ['..', '..', '..', '..', '..', '..', '..', '..'];\n            this.speechrec.oninterimspeechcapture = function (speechtext) {\n                var newwords = speechtext.split(' ');\n                words = words.concat(newwords);\n            };\n            this.speechrec.start();\n\n            var draw = function () {\n\n                //cancel out if no longer active is null.\n                if (!that.enabled) {\n                    return;\n                }\n\n                //this is the loop that continually calls itself to draw\n                var reqAnimFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame ||\n                    window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n                var drawVisual = reqAnimFrame(draw);\n\n\n                //this is the audio data\n                that.analyser.core.getByteTimeDomainData(dataArray);\n\n                //this fills grey, but its lame lets just leave it clear\n                //that.cvsctx.fillStyle = 'rgb(200, 200, 200)';\n                that.cvsctx.clearRect(0, 0, cwidth, cheight);\n\n                //sets up the pen\n                that.cvsctx.lineWidth = 2;\n                that.cvsctx.strokeStyle = that.drawparams.wavColor;\n                that.cvsctx.beginPath();\n                //how long to drw each datapoint\n                var sliceWidth = cwidth * 1.0 / bufferLength;\n                var x = 0;\n                //draw all the points\n                for (var i = 0; i < bufferLength; i++) {\n\n                    var v = dataArray[i] / 128.0;\n                    var y = v * cheight / 2;\n\n                    if (i === 0) {\n                        that.cvsctx.moveTo(x, y);\n                    } else {\n                        that.cvsctx.lineTo(x, y);\n                    }\n\n                    x += sliceWidth;\n                }\n\n                that.cvsctx.lineTo(cwidth, cheight / 2);\n                that.cvsctx.stroke();\n\n                //draw words\n                that.cvsctx.font = that.drawparams.font;\n                that.cvsctx.fillStyle = that.drawparams.textColor;\n                that.cvsctx.textAlign = that.drawparams.textAlign;\n                var cellvcenter = cheight / 4;\n                var cellwidth = cwidth / 4;\n                var cellhcenter = cwidth / 8;\n                for (i = 1; i < 9; i++) {\n                    that.cvsctx.fillText(words[words.length - i], (cellwidth * (i % 4)) + cellhcenter, i < 5 ? cellvcenter : cellvcenter * 3);\n                }\n            };\n\n            draw();\n        }//END OF START\n    };//end of returned object\n});//total end\n"],"file":"anim_words.min.js"}