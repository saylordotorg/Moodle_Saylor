{"version":3,"file":"textfit.min.js","sources":["../src/textfit.js"],"sourcesContent":["/**\r\n * Apps4EFL module.\r\n *\r\n * @package mod_wordcards\r\n * @author  Justin Hunt - poodll.com\r\n * (based on Paul Raine's APPs 4 EFL)\r\n */\r\n\r\n\r\n/**\r\n * textFit v2.3.1\r\n * Previously known as jQuery.textFit\r\n * 11/2014 by STRML (strml.github.com)\r\n * MIT License\r\n *\r\n * To use: textFit(document.getElementById('target-div'), options);\r\n *\r\n * Will make the *text* content inside a container scale to fit the container\r\n * The container is required to have a set width and height\r\n * Uses binary search to fit text with minimal layout calls.\r\n * Version 2.0 does not use jQuery.\r\n */\r\n/*global define:true, document:true, window:true, HTMLElement:true*/\r\n\r\n(function(root, factory) {\r\n    \"use strict\";\r\n\r\n    // UMD shim\r\n    if (typeof define === \"function\" && define.amd) {\r\n        // AMD\r\n        define([], factory);\r\n    } else if (typeof exports === \"object\") {\r\n        // Node/CommonJS\r\n        module.exports = factory();\r\n    } else {\r\n        // Browser\r\n        root.textFit = factory();\r\n    }\r\n\r\n}(typeof global === \"object\" ? global : this, function () {\r\n    \"use strict\";\r\n\r\n    var defaultSettings = {\r\n        alignVert: false, // if true, textFit will align vertically using css tables\r\n        alignHoriz: false, // if true, textFit will set text-align: center\r\n        multiLine: false, // if true, textFit will not set white-space: no-wrap\r\n        detectMultiLine: true, // disable to turn off automatic multi-line sensing\r\n        minFontSize: 6,\r\n        maxFontSize: 80,\r\n        reProcess: true, // if true, textFit will re-process already-fit nodes. Set to 'false' for better performance\r\n        widthOnly: false, // if true, textFit will fit text to element width, regardless of text height\r\n        alignVertWithFlexbox: false, // if true, textFit will use flexbox for vertical alignment\r\n    };\r\n\r\n    return function textFit(els, options) {\r\n\r\n        if (!options) options = {};\r\n\r\n        // Extend options.\r\n        var settings = {};\r\n        for(var key in defaultSettings){\r\n            if(options.hasOwnProperty(key)){\r\n                settings[key] = options[key];\r\n            } else {\r\n                settings[key] = defaultSettings[key];\r\n            }\r\n        }\r\n\r\n        // Convert jQuery objects into arrays\r\n        if (typeof els.toArray === \"function\") {\r\n            els = els.toArray();\r\n        }\r\n\r\n        // Support passing a single el\r\n        var elType = Object.prototype.toString.call(els);\r\n        if (elType !== '[object Array]' && elType !== '[object NodeList]' &&\r\n            elType !== '[object HTMLCollection]'){\r\n            els = [els];\r\n        }\r\n\r\n        // Process each el we've passed.\r\n        for(var i = 0; i < els.length; i++){\r\n            processItem(els[i], settings);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * The meat. Given an el, make the text inside it fit its parent.\r\n     * @param  {DOMElement} el       Child el.\r\n     * @param  {Object} settings     Options for fit.\r\n     */\r\n    function processItem(el, settings){\r\n        if (!isElement(el) || (!settings.reProcess && el.getAttribute('textFitted'))) {\r\n            return false;\r\n        }\r\n\r\n        // Set textFitted attribute so we know this was processed.\r\n        if(!settings.reProcess){\r\n            el.setAttribute('textFitted', 1);\r\n        }\r\n\r\n        var innerSpan, originalHeight, originalHTML, originalWidth;\r\n        var low, mid, high;\r\n\r\n        // Get element data.\r\n        originalHTML = el.innerHTML;\r\n        originalWidth = innerWidth(el);\r\n        originalHeight = innerHeight(el);\r\n\r\n        // Don't process if we can't find box dimensions\r\n        if (!originalWidth || (!settings.widthOnly && !originalHeight)) {\r\n            if(!settings.widthOnly)\r\n                throw new Error('Set a static height and width on the target element ' + el.outerHTML +\r\n                    ' before using textFit!');\r\n            else\r\n                throw new Error('Set a static width on the target element ' + el.outerHTML +\r\n                    ' before using textFit!');\r\n        }\r\n\r\n        // Add textFitted span inside this container.\r\n        if (originalHTML.indexOf('textFitted') === -1) {\r\n            innerSpan = document.createElement('span');\r\n            innerSpan.className = 'textFitted';\r\n            // Inline block ensure it takes on the size of its contents, even if they are enclosed\r\n            // in other tags like <p>\r\n            innerSpan.style['display'] = 'inline-block';\r\n            innerSpan.innerHTML = originalHTML;\r\n            el.innerHTML = '';\r\n            el.appendChild(innerSpan);\r\n        } else {\r\n            // Reprocessing.\r\n            innerSpan = el.querySelector('span.textFitted');\r\n            // Remove vertical align if we're reprocessing.\r\n            if (hasClass(innerSpan, 'textFitAlignVert')){\r\n                innerSpan.className = innerSpan.className.replace('textFitAlignVert', '');\r\n                innerSpan.style['height'] = '';\r\n                el.className.replace('textFitAlignVertFlex', '');\r\n            }\r\n        }\r\n\r\n        // Prepare & set alignment\r\n        if (settings.alignHoriz) {\r\n            el.style['text-align'] = 'center';\r\n            innerSpan.style['text-align'] = 'center';\r\n        }\r\n\r\n        // Check if this string is multiple lines\r\n        // Not guaranteed to always work if you use wonky line-heights\r\n        var multiLine = settings.multiLine;\r\n        if (settings.detectMultiLine && !multiLine &&\r\n            innerSpan.scrollHeight >= parseInt(window.getComputedStyle(innerSpan)['font-size'], 10) * 2){\r\n            multiLine = true;\r\n        }\r\n\r\n        // If we're not treating this as a multiline string, don't let it wrap.\r\n        if (!multiLine) {\r\n            el.style['white-space'] = 'nowrap';\r\n        }\r\n\r\n        low = settings.minFontSize + 1;\r\n        high = settings.maxFontSize + 1;\r\n\r\n        // Binary search for best fit\r\n        while (low <= high) {\r\n            mid = parseInt((low + high) / 2, 10);\r\n            innerSpan.style.fontSize = mid + 'px';\r\n            if(innerSpan.scrollWidth <= originalWidth && (settings.widthOnly || innerSpan.scrollHeight <= originalHeight)){\r\n                low = mid + 1;\r\n            } else {\r\n                high = mid - 1;\r\n            }\r\n        }\r\n        // Sub 1 at the very end, this is closer to what we wanted.\r\n        innerSpan.style.fontSize = (mid - 1) + 'px';\r\n\r\n        // Our height is finalized. If we are aligning vertically, set that up.\r\n        if (settings.alignVert) {\r\n            addStyleSheet();\r\n            var height = innerSpan.scrollHeight;\r\n            if (window.getComputedStyle(el)['position'] === \"static\"){\r\n                el.style['position'] = 'relative';\r\n            }\r\n            if (!hasClass(innerSpan, \"textFitAlignVert\")){\r\n                innerSpan.className = innerSpan.className + \" textFitAlignVert\";\r\n            }\r\n            innerSpan.style['height'] = height + \"px\";\r\n            if (settings.alignVertWithFlexbox && !hasClass(el, \"textFitAlignVertFlex\")) {\r\n                el.className = el.className + \" textFitAlignVertFlex\";\r\n            }\r\n        }\r\n    }\r\n\r\n    // Calculate height without padding.\r\n    function innerHeight(el){\r\n        var style = window.getComputedStyle(el, null);\r\n        return el.clientHeight -\r\n            parseInt(style.getPropertyValue('padding-top'), 10) -\r\n            parseInt(style.getPropertyValue('padding-bottom'), 10);\r\n    }\r\n\r\n    // Calculate width without padding.\r\n    function innerWidth(el){\r\n        var style = window.getComputedStyle(el, null);\r\n        return el.clientWidth -\r\n            parseInt(style.getPropertyValue('padding-left'), 10) -\r\n            parseInt(style.getPropertyValue('padding-right'), 10);\r\n    }\r\n\r\n    //Returns true if it is a DOM element\r\n    function isElement(o){\r\n        return (\r\n            typeof HTMLElement === \"object\" ? o instanceof HTMLElement : //DOM2\r\n                o && typeof o === \"object\" && o !== null && o.nodeType === 1 && typeof o.nodeName===\"string\"\r\n        );\r\n    }\r\n\r\n    function hasClass(element, cls) {\r\n        return (' ' + element.className + ' ').indexOf(' ' + cls + ' ') > -1;\r\n    }\r\n\r\n    // Better than a stylesheet dependency\r\n    function addStyleSheet() {\r\n        if (document.getElementById(\"textFitStyleSheet\")) return;\r\n        var style = [\r\n            \".textFitAlignVert{\",\r\n            \"position: absolute;\",\r\n            \"top: 0; right: 0; bottom: 0; left: 0;\",\r\n            \"margin: auto;\",\r\n            \"display: flex;\",\r\n            \"justify-content: center;\",\r\n            \"flex-direction: column;\",\r\n            \"}\",\r\n            \".textFitAlignVertFlex{\",\r\n            \"display: flex;\",\r\n            \"}\",\r\n            \".textFitAlignVertFlex .textFitAlignVert{\",\r\n            \"position: static;\",\r\n            \"}\",].join(\"\");\r\n\r\n        var css = document.createElement(\"style\");\r\n        css.type = \"text/css\";\r\n        css.id = \"textFitStyleSheet\";\r\n        css.innerHTML = style;\r\n        document.body.appendChild(css);\r\n    }\r\n}));"],"names":["root","factory","global","this","defaultSettings","alignVert","alignHoriz","multiLine","detectMultiLine","minFontSize","maxFontSize","reProcess","widthOnly","alignVertWithFlexbox","els","options","settings","key","hasOwnProperty","toArray","elType","Object","prototype","toString","call","i","length","processItem","el","o","HTMLElement","_typeof","nodeType","nodeName","getAttribute","innerSpan","originalHeight","originalHTML","originalWidth","low","mid","high","setAttribute","innerHTML","style","window","getComputedStyle","clientWidth","parseInt","getPropertyValue","innerWidth","clientHeight","innerHeight","Error","outerHTML","indexOf","document","createElement","className","appendChild","hasClass","querySelector","replace","scrollHeight","fontSize","scrollWidth","getElementById","join","css","type","id","body","addStyleSheet","height","element","cls","define","amd","exports","module","textFit"],"mappings":"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"}