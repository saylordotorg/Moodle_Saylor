{"version":3,"sources":["../src/mywords.js"],"names":["define","$","ajax","str","SELECTOR","DATA_SET","MY_WORDS_DIV","MY_WORDS_ACTION_BTN_ID","WORDPOOL_COUNTS","CLASS","DISABLED","BTN_NOT_IN_MY_WORDS","BTN_IN_MY_WORDS","EVENT","CLICK","DATA","TERM_ID","VALUE","ADD","REMOVE","MY_WORDS_IDS","stringStore","initStrings","callback","get_strings","key","component","done","strings","initButtonListeners","on","e","currTar","currentTarget","buttons","attr","termId","hasClass","preventDefault","addClass","fadeOut","newStatus","call","methodname","args","termid","newstatus","response","success","removeClass","fail","applyButtonStatuses","myWordsDiv","ids","JSON","parse","forEach","id","btn","init","document","ready","initFromFeedbackPage"],"mappings":"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","sourcesContent":["/**\n * Module to watch my words buttons for clicks and report to back end.\n *\n * @package mod_wordcards\n * @author David Watson - evolutioncode.uk\n */\ndefine(['jquery', 'core/ajax', 'core/str'], function($, ajax, str) {\n    const SELECTOR = {\n        DATA_SET: '*[data-action=\"wordcards-set-my-words\"]',\n        MY_WORDS_DIV: '#my-words-ids',\n        MY_WORDS_ACTION_BTN_ID: '.wordcards-mywords-action-',\n        WORDPOOL_COUNTS: '.wordpool-count'\n    }\n\n    const CLASS = {\n        DISABLED: 'disabled',\n        BTN_NOT_IN_MY_WORDS: 'btn-outline-primary',\n        BTN_IN_MY_WORDS: 'btn-primary'\n    }\n\n    const EVENT = {\n        CLICK: 'click'\n    }\n\n    const DATA = {\n        TERM_ID: 'data-termid',\n        VALUE: 'data-value',\n        ADD: 'data-add',\n        REMOVE: 'data-remove',\n        MY_WORDS_IDS: 'data-my-words-term-ids'\n    }\n    var stringStore = {};\n\n    const initStrings = function (callback) {\n        str.get_strings([\n            {key: \"addtomywords\", component: \"mod_wordcards\"},\n            {key: \"removefrommywords\", component: \"mod_wordcards\"},\n        ]).done(function (strings) {\n            stringStore = strings;\n            if (typeof callback == 'function') {\n                callback();\n            }\n        });\n    }\n\n    const initButtonListeners = function() {\n        $(SELECTOR.DATA_SET).on(EVENT.CLICK, function(e) {\n            // There are two buttons for each term (one in grid and one in flashcards).\n            const currTar = $(e.currentTarget);\n            const buttons = $(SELECTOR.MY_WORDS_ACTION_BTN_ID + currTar.attr(DATA.TERM_ID));\n            const termId = buttons.attr(DATA.TERM_ID);\n            if (!currTar.hasClass(CLASS.DISABLED)) {\n                e.preventDefault();\n                buttons.addClass(CLASS.DISABLED)\n                // Hide wordpool counts in drop down as may become incorrect here.\n                $(SELECTOR.WORDPOOL_COUNTS).fadeOut();\n                const newStatus = buttons.hasClass(CLASS.BTN_IN_MY_WORDS) ? 0 : 1;\n                ajax.call([{\n                    methodname: 'mod_wordcards_set_my_words',\n                    args: {\n                        termid: termId,\n                        newstatus: newStatus\n                    }\n                }])[0].done(function(response) {\n                    if (response.success) {\n                        buttons.removeClass(CLASS.DISABLED);\n                        if (response.newStatus) {\n                            buttons.addClass(CLASS.BTN_IN_MY_WORDS);\n                            buttons.removeClass(CLASS.BTN_NOT_IN_MY_WORDS);\n                            buttons.attr('title', stringStore[1]);\n                        } else {\n                            buttons.removeClass(CLASS.BTN_IN_MY_WORDS);\n                            buttons.addClass(CLASS.BTN_NOT_IN_MY_WORDS);\n                            buttons.attr('title', stringStore[0]);\n                        }\n                    }\n                }).fail(function() {\n                    buttons.removeClass(CLASS.DISABLED);\n                })\n            }\n        })\n    }\n\n    /**\n     * Existing button statuses are on the main freemode template markup, so we need to grab them and render them,\n     */\n    const applyButtonStatuses = function() {\n        const myWordsDiv = $(SELECTOR.MY_WORDS_DIV);\n        if (myWordsDiv) {\n            const ids = JSON.parse(myWordsDiv.attr(DATA.MY_WORDS_IDS));\n            ids.forEach((id) => {\n                const btn = $(SELECTOR.MY_WORDS_ACTION_BTN_ID + id);\n                if (!btn.hasClass(CLASS.BTN_IN_MY_WORDS)) {\n                    btn\n                        .addClass(CLASS.BTN_IN_MY_WORDS)\n                        .removeClass(CLASS.BTN_NOT_IN_MY_WORDS)\n                        .attr('title', stringStore[1]);\n                }\n            });\n            return true;\n        }\n    }\n    return {\n        init: function () {\n            $(document).ready(function() {\n                initStrings();\n                initButtonListeners();\n            })\n        },\n        initFromFeedbackPage: function () {\n            initStrings(applyButtonStatuses);\n            initButtonListeners();\n        }\n    }\n});"],"file":"mywords.min.js"}