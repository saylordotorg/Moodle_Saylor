{"version":3,"sources":["../src/pollyhelper.js"],"names":["define","$","log","debug","token","region","owner","init","fetch_polly_url","speaktext","texttype","voice","xhr","XMLHttpRequest","that","onreadystatechange","readyState","status","payload","responseText","payloadobject","JSON","parse","returnCode","returnMessage","pollyurl","onnewpollyurl","xhrparams","encodeURIComponent","open","setRequestHeader","send"],"mappings":"AAAAA,OAAM,6BAAC,CAAC,QAAD,CAAW,UAAX,CAAD,CAAyB,SAAUC,CAAV,CAAaC,CAAb,CAAkB,CAC7C,aAKAA,CAAG,CAACC,KAAJ,CAAU,4BAAV,EAEA,MAAO,CACHC,KAAK,CAAG,EADL,CAEHC,MAAM,CAAE,EAFL,CAGHC,KAAK,CAAE,EAHJ,CAKHC,IAAI,CAAE,cAASH,CAAT,CAAgBC,CAAhB,CAAwBC,CAAxB,CAA8B,CAChC,KAAKF,KAAL,CAAYA,CAAZ,CACA,KAAKC,MAAL,CAAYA,CAAZ,CACA,KAAKC,KAAL,CAAWA,CACd,CATE,CAWHE,eAAe,CAAE,yBAASC,CAAT,CAAmBC,CAAnB,CAA6BC,CAA7B,CAAoC,IAOzCC,CAAAA,CAAG,CAAG,GAAIC,CAAAA,cAP+B,CAQzCC,CAAI,CAAG,IARkC,CAW7CF,CAAG,CAACG,kBAAJ,CAAyB,UAAa,CAClC,GAAwB,CAApB,QAAKC,UAAT,CAA2B,CACvB,GAAkB,GAAd,EAAAJ,CAAG,CAACK,MAAR,CAAuB,IAGfC,CAAAA,CAAO,CAAGN,CAAG,CAACO,YAHC,CAIfC,CAAa,CAAGC,IAAI,CAACC,KAAL,CAAWJ,CAAX,CAJD,CAKnB,GAAIE,CAAJ,CAAmB,CAEf,GAA+B,CAA3B,CAAAA,CAAa,CAACG,UAAlB,CAAkC,CAC9BrB,CAAG,CAACC,KAAJ,CAAUiB,CAAa,CAACI,aAAxB,EACA,QAEH,CAJD,IAIO,IAAiC,CAA7B,GAAAJ,CAAa,CAACG,UAAlB,CAAmC,CACtC,GAAIE,CAAAA,CAAQ,CAAGL,CAAa,CAACI,aAA7B,CACAV,CAAI,CAACY,aAAL,CAAmBD,CAAnB,CACH,CAHM,IAGA,CACHvB,CAAG,CAACC,KAAJ,CAAU,kCAAV,EACAD,CAAG,CAACC,KAAJ,CAAUiB,CAAV,CACH,CACJ,CAbD,IAaO,CACHlB,CAAG,CAACC,KAAJ,CAAU,iDAAV,CACH,CACJ,CArBD,IAqBO,CACHD,CAAG,CAACC,KAAJ,CAAU,6CAA+CS,CAAG,CAACK,MAA7D,CACH,CACJ,CACJ,CA3BD,CAX6C,GAyCzCU,CAAAA,CAAS,CAAG,WAAa,KAAKvB,KAAlB,CACd,cADc,gEAGHwB,kBAAkB,CAACnB,CAAD,CAHf,CAId,YAJc,CAICC,CAJD,CAKd,SALc,CAKFC,CALE,+BAOF,KAAKL,KAPH,CAQd,UARc,CAQD,KAAKD,MAjDyB,CAoD7CO,CAAG,CAACiB,IAAJ,CAAS,MAAT,2DACAjB,CAAG,CAACkB,gBAAJ,CAAqB,eAArB,CAAsC,UAAtC,EACAlB,CAAG,CAACkB,gBAAJ,CAAqB,cAArB,CAAqC,mCAArC,EACAlB,CAAG,CAACmB,IAAJ,CAASJ,CAAT,CACP,CAnEE,CAqEHD,aAAa,CAAE,uBAAUD,CAAV,CAAoB,CAE/BvB,CAAG,CAACC,KAAJ,CAAUsB,CAAV,CACH,CAxEE,CA2EV,CAnFK,CAAN","sourcesContent":["define(['jquery', 'core/log'], function ($, log) {\r\n    \"use strict\"; // jshint ;_;\r\n    /*\r\n    This file helps you get Polly URLs at runtime\r\n     */\r\n\r\n    log.debug('Polly helper: initialising');\r\n\r\n    return {\r\n        token:  '',\r\n        region: '',\r\n        owner: '',\r\n\r\n        init: function(token, region, owner){\r\n            this.token =token;\r\n            this.region=region;\r\n            this.owner=owner;\r\n        },\r\n\r\n        fetch_polly_url: function(speaktext,texttype, voice) {\r\n\r\n                //The REST API we are calling\r\n                var functionname = 'local_cpapi_fetch_polly_url';\r\n\r\n                //fetch the Posturl. We need this.\r\n                //set up our ajax request\r\n                var xhr = new XMLHttpRequest();\r\n                var that = this;\r\n\r\n                //set up our handler for the response\r\n                xhr.onreadystatechange = function (e) {\r\n                    if (this.readyState === 4) {\r\n                        if (xhr.status == 200) {\r\n\r\n                            //get a yes or forgetit or tryagain\r\n                            var payload = xhr.responseText;\r\n                            var payloadobject = JSON.parse(payload);\r\n                            if (payloadobject) {\r\n                                //returnCode > 0  indicates an error\r\n                                if (payloadobject.returnCode > 0) {\r\n                                    log.debug(payloadobject.returnMessage);\r\n                                    return false;\r\n                                    //if all good, then lets do the embed\r\n                                } else if (payloadobject.returnCode === 0){\r\n                                    var pollyurl = payloadobject.returnMessage;\r\n                                    that.onnewpollyurl(pollyurl);\r\n                                } else {\r\n                                    log.debug('Polly Signed URL Request failed:');\r\n                                    log.debug(payloadobject);\r\n                                }\r\n                            } else {\r\n                                log.debug('Polly Signed URL Request something bad happened');\r\n                            }\r\n                        } else {\r\n                            log.debug('Polly Signed URL Request Not 200 response:' + xhr.status);\r\n                        }\r\n                    }\r\n                };\r\n\r\n                //log.debug(params);\r\n                var xhrparams = \"wstoken=\" + this.token\r\n                + \"&wsfunction=\" + functionname\r\n                + \"&moodlewsrestformat=\" + 'json'\r\n                + \"&text=\" + encodeURIComponent(speaktext)\r\n                + '&texttype=' + texttype\r\n                + '&voice=' + voice\r\n                + '&appid=' + 'mod_wordcards'\r\n                + '&owner=' + this.owner\r\n                + '&region=' + this.region;\r\n\r\n                var serverurl = 'https://cloud.poodll.com' + \"/webservice/rest/server.php\";\r\n                xhr.open(\"POST\", serverurl, true);\r\n                xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\r\n                xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n                xhr.send(xhrparams);\r\n        },\r\n\r\n        onnewpollyurl: function (pollyurl) {\r\n            //do something\r\n            log.debug(pollyurl);\r\n        },\r\n\r\n    };//end of return value\r\n});"],"file":"pollyhelper.min.js"}