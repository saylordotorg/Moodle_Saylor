{"version":3,"file":"smallreporthelper.min.js","sources":["../src/smallreporthelper.js"],"sourcesContent":["define(['jquery', 'core/log','mod_solo/definitions','core/str','core/ajax','core/notification'], function ($, log, def, str, Ajax, notification) {\n    \"use strict\"; // jshint ;_;\n    /*\n    This file does small report\n     */\n\n    log.debug('Small Report Helper: initialising');\n\n    return {\n        //controls\n        controls: {},\n        ready: false,\n        remotetranscribe: false,\n        attemptid: 0,\n        checking: '... checking ...',\n        secstillcheck: 'Checking again in: ',\n        notgradedyet: 'Your reading has not been evaluated yet.',\n        evaluated: 'Your reading has been evaluated.',\n\n        //init the module\n        init: function(attemptid){\n            this.attemptid=attemptid;\n            this.ready=false;\n            this.init_strings();\n            this.register_controls();\n            this.register_events();\n            if(!this.ready && this.attemptid){\n                this.check_for_results(this,15);\n            }\n        },\n\n        init_strings: function(){\n          var that =this;\n          str.get_string('checking','mod_solo').done(function(s){that.checking=s;});\n          str.get_string('secs_till_check','mod_solo').done(function(s){that.secstillcheck=s;});\n          str.get_string('notgradedyet','mod_solo').done(function(s){that.notgradedyet=s;});\n          str.get_string('evaluatedmessage','mod_solo').done(function(s){that.evaluated=s;});\n        },\n\n        //load all the controls so we do not have to do it later\n        register_controls: function(){\n            this.controls.placeholdertext = $('.' + def.smallreportplaceholdertext);\n            this.controls.placeholderspinner = $('.' + def.smallreportplaceholderspinner);\n        },\n\n        //attach the various event handlers we need\n        register_events: function() {\n            var that = this;\n        },//end of register events\n\n        check_for_results: function (that, seconds) {\n\n            //decrement 1 s. At 15 seconds do the check\n            seconds=seconds-1;\n            if(seconds>0){\n                setTimeout(that.check_for_results,1000,that,seconds);\n                var formattedSeconds = (\" 0\" + seconds).slice(-2);\n                that.controls.placeholdertext.html(that.secstillcheck + '<br>' + formattedSeconds );\n                return;\n            }\n\n            //do the check\n            that.controls.placeholdertext.text(that.checking);\n            that.controls.placeholderspinner.show();\n            Ajax.call([{\n                methodname: 'mod_solo_check_for_results',\n                args: {\n                    attemptid: that.attemptid\n                },\n                done: function (ajaxresult) {\n                    var payloadobject = JSON.parse(ajaxresult);\n                    if (payloadobject) {\n                        switch (payloadobject.ready) {\n                            case true:\n                                location.reload();\n                                break;\n\n                            case false:\n                            default:\n                                log.debug('result not fetched');\n                                setTimeout(that.check_for_results,1000,that,15 );\n                                that.controls.placeholdertext.text(that.secstillcheck + seconds);\n                        }\n                    }\n                    that.controls.placeholderspinner.hide();\n                },\n                fail: notification.exception\n            }]);\n        },\n\n    };//end of return value\n});"],"names":["define","$","log","def","str","Ajax","notification","debug","controls","ready","remotetranscribe","attemptid","checking","secstillcheck","notgradedyet","evaluated","init","init_strings","register_controls","register_events","this","check_for_results","that","get_string","done","s","placeholdertext","smallreportplaceholdertext","placeholderspinner","smallreportplaceholderspinner","seconds","setTimeout","formattedSeconds","slice","html","text","show","call","methodname","args","ajaxresult","payloadobject","JSON","parse","location","reload","hide","fail","exception"],"mappings":"AAAAA,oCAAO,CAAC,SAAU,WAAW,uBAAuB,WAAW,YAAY,sBAAsB,SAAUC,EAAGC,IAAKC,IAAKC,IAAKC,KAAMC,qBAM/HJ,IAAIK,MAAM,qCAEH,CAEHC,SAAU,GACVC,OAAO,EACPC,kBAAkB,EAClBC,UAAW,EACXC,SAAU,mBACVC,cAAe,sBACfC,aAAc,2CACdC,UAAW,mCAGXC,KAAM,SAASL,gBACNA,UAAUA,eACVF,OAAM,OACNQ,oBACAC,yBACAC,mBACDC,KAAKX,OAASW,KAAKT,gBACdU,kBAAkBD,KAAK,KAIpCH,aAAc,eACRK,KAAMF,KACVhB,IAAImB,WAAW,WAAW,YAAYC,MAAK,SAASC,GAAGH,KAAKV,SAASa,KACrErB,IAAImB,WAAW,kBAAkB,YAAYC,MAAK,SAASC,GAAGH,KAAKT,cAAcY,KACjFrB,IAAImB,WAAW,eAAe,YAAYC,MAAK,SAASC,GAAGH,KAAKR,aAAaW,KAC7ErB,IAAImB,WAAW,mBAAmB,YAAYC,MAAK,SAASC,GAAGH,KAAKP,UAAUU,MAIhFP,kBAAmB,gBACVV,SAASkB,gBAAkBzB,EAAE,IAAME,IAAIwB,iCACvCnB,SAASoB,mBAAqB3B,EAAE,IAAME,IAAI0B,gCAInDV,gBAAiB,aAIjBE,kBAAmB,SAAUC,KAAMQ,aAG/BA,SAAgB,GACL,GACPC,WAAWT,KAAKD,kBAAkB,IAAKC,KAAKQ,aACxCE,kBAAoB,KAAOF,SAASG,OAAO,GAC/CX,KAAKd,SAASkB,gBAAgBQ,KAAKZ,KAAKT,cAAgB,OAASmB,uBAKrEV,KAAKd,SAASkB,gBAAgBS,KAAKb,KAAKV,UACxCU,KAAKd,SAASoB,mBAAmBQ,OACjC/B,KAAKgC,KAAK,CAAC,CACPC,WAAY,6BACZC,KAAM,CACF5B,UAAWW,KAAKX,WAEpBa,KAAM,SAAUgB,gBACRC,cAAgBC,KAAKC,MAAMH,eAC3BC,kBAES,IADDA,cAAchC,MAEdmC,SAASC,cAKT3C,IAAIK,MAAM,sBACVwB,WAAWT,KAAKD,kBAAkB,IAAKC,KAAK,IAC5CA,KAAKd,SAASkB,gBAAgBS,KAAKb,KAAKT,cAAgBiB,SAGpER,KAAKd,SAASoB,mBAAmBkB,QAErCC,KAAMzC,aAAa0C"}