{"version":3,"sources":["../src/smallreporthelper.js"],"names":["define","$","log","def","str","Ajax","notification","debug","controls","ready","remotetranscribe","attemptid","checking","secstillcheck","notgradedyet","evaluated","init","init_strings","register_controls","register_events","check_for_results","that","get_string","done","s","placeholdertext","smallreportplaceholdertext","placeholderspinner","smallreportplaceholderspinner","seconds","setTimeout","formattedSeconds","slice","html","text","show","call","methodname","args","ajaxresult","payloadobject","JSON","parse","location","reload","hide","fail","exception"],"mappings":"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","sourcesContent":["define(['jquery', 'core/log','mod_solo/definitions','core/str','core/ajax','core/notification'], function ($, log, def, str, Ajax, notification) {\n    \"use strict\"; // jshint ;_;\n    /*\n    This file does small report\n     */\n\n    log.debug('Small Report Helper: initialising');\n\n    return {\n        //controls\n        controls: {},\n        ready: false,\n        remotetranscribe: false,\n        attemptid: 0,\n        checking: '... checking ...',\n        secstillcheck: 'Checking again in: ',\n        notgradedyet: 'Your reading has not been evaluated yet.',\n        evaluated: 'Your reading has been evaluated.',\n\n        //init the module\n        init: function(attemptid){\n            this.attemptid=attemptid;\n            this.ready=false;\n            this.init_strings();\n            this.register_controls();\n            this.register_events();\n            if(!this.ready && this.attemptid){\n                this.check_for_results(this,15);\n            }\n        },\n\n        init_strings: function(){\n          var that =this;\n          str.get_string('checking','mod_solo').done(function(s){that.checking=s;});\n          str.get_string('secs_till_check','mod_solo').done(function(s){that.secstillcheck=s;});\n          str.get_string('notgradedyet','mod_solo').done(function(s){that.notgradedyet=s;});\n          str.get_string('evaluatedmessage','mod_solo').done(function(s){that.evaluated=s;});\n        },\n\n        //load all the controls so we do not have to do it later\n        register_controls: function(){\n            this.controls.placeholdertext = $('.' + def.smallreportplaceholdertext);\n            this.controls.placeholderspinner = $('.' + def.smallreportplaceholderspinner);\n        },\n\n        //attach the various event handlers we need\n        register_events: function() {\n            var that = this;\n        },//end of register events\n\n        check_for_results: function (that, seconds) {\n\n            //decrement 1 s. At 15 seconds do the check\n            seconds=seconds-1;\n            if(seconds>0){\n                setTimeout(that.check_for_results,1000,that,seconds);\n                var formattedSeconds = (\" 0\" + seconds).slice(-2);\n                that.controls.placeholdertext.html(that.secstillcheck + '<br>' + formattedSeconds );\n                return;\n            }\n\n            //do the check\n            that.controls.placeholdertext.text(that.checking);\n            that.controls.placeholderspinner.show();\n            Ajax.call([{\n                methodname: 'mod_solo_check_for_results',\n                args: {\n                    attemptid: that.attemptid\n                },\n                done: function (ajaxresult) {\n                    var payloadobject = JSON.parse(ajaxresult);\n                    if (payloadobject) {\n                        switch (payloadobject.ready) {\n                            case true:\n                                location.reload();\n                                break;\n\n                            case false:\n                            default:\n                                log.debug('result not fetched');\n                                setTimeout(that.check_for_results,1000,that,15 );\n                                that.controls.placeholdertext.text(that.secstillcheck + seconds);\n                        }\n                    }\n                    that.controls.placeholderspinner.hide();\n                },\n                fail: notification.exception\n            }]);\n        },\n\n    };//end of return value\n});"],"file":"smallreporthelper.min.js"}