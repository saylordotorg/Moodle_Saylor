{"version":3,"sources":["../src/toggleselected.js"],"names":["define","$","log","debug","init","opts","register_events","init_controls","container","item","control","selectedvalue","val","selections","split","i","length","filter","addClass","mode","maxchecks","thecontainer","on","e","updatecontrol","clickednode","newdataid","data","currentvalues","includes","toString","splice","indexOf","push","preventDefault","join","trigger"],"mappings":"AAAAA,OAAM,2BAAC,CAAC,QAAD,CAAU,UAAV,CAAqB,sBAArB,CAA6C,mBAA7C,CAAD,CACF,SAASC,CAAT,CAAWC,CAAX,CAAkC,CAClC,aAMAA,CAAG,CAACC,KAAJ,CAAU,oCAAV,EAEA,MAAM,CAEFC,IAAI,CAAE,cAASC,CAAT,CAAe,CACjB,KAAKC,eAAL,CAAqBD,CAAI,UAAzB,CAAuCA,CAAI,KAA3C,CAAoDA,CAAI,cAAxD,CAA0EA,CAAI,KAA9E,CAAwFA,CAAI,UAA5F,EACA,KAAKE,aAAL,CAAmBF,CAAI,UAAvB,CAAqCA,CAAI,KAAzC,CAAkDA,CAAI,cAAtD,CAAwEA,CAAI,KAA5E,CACH,CALC,CAOFE,aAAa,CAAE,uBAASC,CAAT,CAAoBC,CAApB,CAA0BC,CAA1B,CAAuC,CAClD,GAAIC,CAAAA,CAAa,CAAGV,CAAC,CAAC,WAAYS,CAAZ,CAAsB,KAAvB,CAAD,CAA8BE,GAA9B,EAApB,CACA,GAAGD,CAAH,CAAkB,CAGd,OADIE,CAAAA,CAAU,CAAGF,CAAa,CAACG,KAAd,CAAoB,GAApB,CACjB,CAAQC,CAAC,CAAE,CAAX,CAAcA,CAAC,CAACF,CAAU,CAACG,MAA3B,CAAkCD,CAAC,EAAnC,CAAuC,CACnCd,CAAC,CAAC,IAAMO,CAAN,CAAkB,IAAlB,CAAyBC,CAA1B,CAAD,CAAiCQ,MAAjC,CAAwC,YAAcJ,CAAU,CAACE,CAAD,CAAxB,CAA8B,GAAtE,EAA2EG,QAA3E,CAAoF,QAApF,CACH,CACJ,CACJ,CAhBC,CAkBFZ,eAAe,CAAE,yBAASE,CAAT,CAAmBC,CAAnB,CAAwBC,CAAxB,CAAiCS,CAAjC,CAAuCC,CAAvC,CAAiD,CAC9D,GAAIC,CAAAA,CAAY,CAAGpB,CAAC,CAAC,IAAMO,CAAP,CAApB,CACAa,CAAY,CAACC,EAAb,CAAgB,OAAhB,CAAyB,IAAMb,CAA/B,CAAqC,SAASc,CAAT,CAAY,IAGzCC,CAAAA,CAAa,CAAIvB,CAAC,CAAC,WAAYS,CAAZ,CAAsB,KAAvB,CAHuB,CAIzCe,CAAW,CAAGxB,CAAC,CAAC,IAAD,CAJ0B,CAKzCyB,CAAS,CAAGD,CAAW,CAACE,IAAZ,CAAiB,IAAjB,CAL6B,CAM7C,OAAOR,CAAP,EACI,IAAK,UAAL,CAEI,GAAIS,CAAAA,CAAa,CAAEJ,CAAa,CAACZ,GAAd,GAAoBE,KAApB,CAA0B,GAA1B,CAAnB,CACA,GAAGc,CAAa,CAACC,QAAd,CAAuBH,CAAS,CAACI,QAAV,EAAvB,CAAH,CAAgD,CAC5CF,CAAa,CAACG,MAAd,CAAqBH,CAAa,CAACI,OAAd,CAAsBN,CAAS,CAACI,QAAV,EAAtB,CAArB,CAAiE,CAAjE,CACH,CAFD,IAEK,CACD,GAAGF,CAAa,CAACZ,MAAd,CAAuBI,CAA1B,CAAqC,CACjCQ,CAAa,CAACK,IAAd,CAAmBP,CAAnB,CACH,CAFD,IAEK,CACDH,CAAC,CAACW,cAAF,GACA,MACH,CACJ,CAGDN,CAAa,CAAGA,CAAa,CAACX,MAAd,CAAqB,SAASM,CAAT,CAAW,CAAC,MAAOA,CAAAA,CAAE,CAA1C,CAAhB,CACAC,CAAa,CAACZ,GAAd,CAAkBgB,CAAa,CAACO,IAAd,CAAmB,GAAnB,CAAlB,EACA,MAEJ,IAAK,OAAL,CACA,QACIX,CAAa,CAACZ,GAAd,CAAkBc,CAAlB,EAtBR,CAyBDF,CAAa,CAACY,OAAd,CAAsB,QAAtB,CACF,CAhCD,CAiCH,CArDC,CAyDT,CAnEK,CAAN","sourcesContent":["define(['jquery','core/log','mod_solo/definitions', 'core/notification'],\n    function($,log, def,notification) {\n    \"use strict\"; // jshint ;_;\n\n/*\nThis file contains class and ID definitions.\n */\n\n    log.debug('solo Toggle Selected: initialising');\n\n    return{\n\n        init: function(opts) {\n            this.register_events(opts['container'],opts['item'],opts['updatecontrol'],opts['mode'], opts['maxchecks']);\n            this.init_controls(opts['container'],opts['item'],opts['updatecontrol'],opts['mode']);\n        },\n\n        init_controls: function(container, item, control,mode){\n            var selectedvalue = $('[name=\"' + control + '\"]').val();\n            if(selectedvalue) {\n                //we could differentiate here between radio and checkbox modes, but split works for both\n                var selections = selectedvalue.split(',');\n                for(var i =0; i<selections.length;i++) {\n                    $('.' + container + ' .' + item).filter('[data-id=' + selections[i] + ']').addClass('active');\n                }\n            }\n        },\n\n        register_events: function(container,item,control, mode, maxchecks){\n            var thecontainer = $('.' + container);\n            thecontainer.on('click', '.' + item, function(e) {\n\n                //we set the new value AND trigger an event in case we are listening for one elsewhere\n                var updatecontrol =  $('[name=\"' + control + '\"]');\n                var clickednode = $(this);\n                var newdataid = clickednode.data('id');\n                switch(mode){\n                    case 'checkbox':\n\n                        var currentvalues =updatecontrol.val().split(',');\n                        if(currentvalues.includes(newdataid.toString())){\n                            currentvalues.splice(currentvalues.indexOf(newdataid.toString()),1);\n                        }else{\n                            if(currentvalues.length < maxchecks) {\n                                currentvalues.push(newdataid);\n                            }else{\n                                e.preventDefault();\n                                return;\n                            }\n                        }\n\n                        //clean up any empty values that somehow get in, then set it\n                        currentvalues = currentvalues.filter(function(e){return e});\n                        updatecontrol.val(currentvalues.join(','));\n                        break;\n\n                    case 'radio':\n                    default:\n                        updatecontrol.val(newdataid);\n\n                }\n               updatecontrol.trigger('change');\n            });\n        }\n\n};//end of return value\n\n});\n\n"],"file":"toggleselected.min.js"}