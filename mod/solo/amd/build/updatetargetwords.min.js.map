{"version":3,"sources":["../src/updatetargetwords.js"],"names":["define","$","log","def","notification","templates","debug","init","opts","theid","controlid","configcontrol","get","JSON","parse","value","remove","register_events","topics","trigger","update","on","newvalue","val","selectedtopic","each","id","targetwords","trim","tdata","split","render","then","html","d","C_TARGETWORDSDISPLAY"],"mappings":"AAAAA,OAAM,8BAAC,CAAC,QAAD,CAAU,UAAV,CAAqB,sBAArB,CAA6C,mBAA7C,CAAkE,gBAAlE,CAAD,CAAsF,SAASC,CAAT,CAAWC,CAAX,CAAgBC,CAAhB,CAAqBC,CAArB,CAAkCC,CAAlC,CAA6C,CACrI,aAMAH,CAAG,CAACI,KAAJ,CAAU,wCAAV,EAEA,MAAM,CAEFC,IAAI,CAAE,cAASC,CAAT,CAAe,IAEbC,CAAAA,CAAK,CAAG,YAAcD,CAAI,CAACE,SAFd,CAGbC,CAAa,CAAGV,CAAC,CAACQ,CAAD,CAAD,CAASG,GAAT,CAAa,CAAb,CAHH,CAIjB,GAAID,CAAJ,CAAmB,CACfH,CAAI,CAAGK,IAAI,CAACC,KAAL,CAAWH,CAAa,CAACI,KAAzB,CAAP,CACAd,CAAC,CAACQ,CAAD,CAAD,CAASO,MAAT,EACH,CAHD,IAGO,CAEHd,CAAG,CAACI,KAAJ,CAAU,gEAAV,EACA,MACH,CAED,KAAKW,eAAL,CAAqBT,CAAI,OAAzB,CAAoCA,CAAI,eAAxC,CAA4DA,CAAI,cAAhE,CACH,CAhBC,CAkBFS,eAAe,CAAE,yBAASC,CAAT,CAAgBC,CAAhB,CAAwBC,CAAxB,CAA+B,CAC5CnB,CAAC,CAAC,WAAYkB,CAAZ,CAAsB,KAAvB,CAAD,CAA8BE,EAA9B,CAAiC,QAAjC,CAA0C,UAAU,IAC5CC,CAAAA,CAAQ,CAAGrB,CAAC,CAAC,IAAD,CAAD,CAAQsB,GAAR,EADiC,CAE5CC,CAAa,GAF+B,CAGhDvB,CAAC,CAACwB,IAAF,CAAOP,CAAP,CAAc,UAAU,CACpB,GAAG,KAAKQ,EAAL,EAASJ,CAAZ,CAAqB,CACjBE,CAAa,CAAC,IACjB,CACJ,CAJD,EAKA,GAAGA,CAAH,CAAkB,CACdvB,CAAC,CAAC,WAAYmB,CAAZ,CAAqB,KAAtB,CAAD,CAA6BG,GAA7B,CAAiCC,CAAa,CAACG,WAA/C,EACA,GAAsC,EAAnC,GAAAH,CAAa,CAACG,WAAd,CAA0BC,IAA1B,EAAH,CAAyC,CAAC,MAAQ,CAClD,GAAIC,CAAAA,CAAK,CAAC,EAAV,CACAA,CAAK,YAAL,CAAsBL,CAAa,CAACG,WAAd,CAA0BG,KAA1B,CAAgC,IAAhC,CAAtB,CACAzB,CAAS,CAAC0B,MAAV,CAAiB,sBAAjB,CAAwCF,CAAxC,EAA+CG,IAA/C,CACI,SAASC,CAAT,CAAiB,CACb,GAAIC,CAAAA,CAAC,CAAEjC,CAAC,CAAC,IAAME,CAAG,CAACgC,oBAAX,CAAR,CACAD,CAAC,CAACD,IAAF,CAAOA,CAAP,CACH,CAJL,CAMH,CACJ,CApBD,CAqBH,CAxCC,CA4CT,CArDK,CAAN","sourcesContent":["define(['jquery','core/log','mod_solo/definitions', 'core/notification', 'core/templates'], function($,log, def, notification,templates) {\n    \"use strict\"; // jshint ;_;\n\n/*\nThis file contains class and ID definitions.\n */\n\n    log.debug('solo Update Target Words: initialising');\n\n    return{\n\n        init: function(opts) {\n            //pick up opts from html\n            var theid = '#amdopts_' + opts.controlid;\n            var configcontrol = $(theid).get(0);\n            if (configcontrol) {\n                opts = JSON.parse(configcontrol.value);\n                $(theid).remove();\n            } else {\n                //if there is no config we might as well give up\n                log.debug('Read Seed Test Controller: No config found on page. Giving up.');\n                return;\n            }\n\n            this.register_events(opts['topics'],opts['triggercontrol'], opts['updatecontrol']);\n        },\n\n        register_events: function(topics,trigger,update){\n            $('[name=\"' + trigger + '\"]').on('change',function(){\n                var newvalue = $(this).val();\n                var selectedtopic=false;\n                $.each(topics,function(){\n                    if(this.id==newvalue){\n                        selectedtopic=this;\n                    }\n                });\n                if(selectedtopic) {\n                    $('[name=\"' + update + '\"]').val(selectedtopic.targetwords);\n                    if(selectedtopic.targetwords.trim()===''){return;}\n                    var tdata=[];\n                    tdata['targetwords'] =selectedtopic.targetwords.split('\\n');\n                    templates.render('mod_solo/targetwords',tdata).then(\n                        function(html,js){\n                            var d= $('#' + def.C_TARGETWORDSDISPLAY);\n                            d.html(html);\n                        }\n                    );\n                }\n            });\n        }\n\n};//end of return value\n\n});\n\n"],"file":"updatetargetwords.min.js"}