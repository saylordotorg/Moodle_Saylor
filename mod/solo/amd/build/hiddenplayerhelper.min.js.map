{"version":3,"file":"hiddenplayerhelper.min.js","sources":["../src/hiddenplayerhelper.js"],"sourcesContent":["define(['jquery', 'core/log', 'mod_solo/definitions'], function ($, log, def) {\n    \"use strict\"; // jshint ;_;\n\n    log.debug('Poodll Solo hidden player helper: initialising');\n\n    return {\n\n        controls: {},\n        hiddenplayer: def.hiddenplayer,\n        hiddenplayerbutton: def.hiddenplayerbutton,\n        hiddenplayerbuttonactive: def.hiddenplayerbuttonactive,\n        hiddenplayerbuttonpaused: def.hiddenplayerbuttonpaused,\n        hiddenplayerbuttonplaying: def.hiddenplayerbuttonpaused,\n\n        init: function (opts) {\n            this.register_controls();\n            this.register_events();\n        },\n\n        register_controls: function () {\n            this.controls.hiddenplayer = $('.' + this.hiddenplayer);\n            this.controls.hiddenplayerbutton = $('.' + this.hiddenplayerbutton);\n            this.controls.playercontrols = $('.' + this.hiddenplayerbutton + ' i');\n        },\n\n        register_events: function () {\n            var that = this;\n            var audioplayer = this.controls.hiddenplayer;\n            //handle the button click\n            this.controls.hiddenplayerbutton.click(function (e) {\n                var audiosrc = $(this).attr('data-audiosource');\n                if (audiosrc === audioplayer.attr('src') && !(audioplayer.prop('paused'))) {\n                    that.dohiddenstop();\n                    that.controls.playercontrols.removeClass('fa-stop-circle');\n                    that.controls.playercontrols.addClass('fa-play-circle');\n                } else {\n                    that.controls.playercontrols.removeClass('fa-stop-circle');\n                    that.controls.playercontrols.addClass('fa-play-circle');\n                    $(this).find('i').addClass('fa-stop-circle');\n                    that.dohiddenplay(audiosrc);\n                }\n            });\n\n        },\n\n\n        dohiddenplay: function (audiosrc) {\n            var m = this;\n            var audioplayer = m.controls.hiddenplayer;\n            audioplayer.attr('src', audiosrc);\n            audioplayer[0].pause();\n            audioplayer[0].load();\n            var pp = audioplayer[0].play();\n            if (pp !== undefined) {\n                pp.then(function () {\n                    // Yay we are playing\n                }).catch(function (error) {\n                    // somethings up ... but we can ignore it\n                });\n            }\n            m.dobuttonicons();\n        },\n        dohiddenstop: function () {\n            var m = this;\n            var audioplayer = m.controls.hiddenplayer;\n            audioplayer[0].pause();\n            m.dobuttonicons();\n        },\n\n        dobuttonicons: function (theaudiosrc) {\n            var m = this;\n            var audioplayer = m.controls.hiddenplayer;\n            if (!theaudiosrc) {\n                theaudiosrc = audioplayer.attr('src');\n            }\n            m.controls.hiddenplayerbutton.each(function (index) {\n                var audiosrc = $(this).attr('data-audiosource');\n                if (audiosrc === theaudiosrc) {\n                    $(this).addClass(m.activebutton);\n                    if (audioplayer.prop('paused')) {\n                        $(this).removeClass(m.hiddenplayerbuttonplaying);\n                        $(this).addClass(m.hiddenplayerbuttonpaused);\n                        //for now we make it look like no button is selected\n                        //later we can implement better controls\n                        $(this).removeClass(m.hiddenplayerbuttonactive);\n                    } else {\n                        $(this).removeClass(m.hiddenplayerbuttonpaused);\n                        $(this).addClass(m.hiddenplayerbuttonplaying);\n                    }\n                } else {\n                    $(this).removeClass(m.hiddenplayerbuttonactive);\n                    $(this).removeClass(m.hiddenplayerbuttonplaying);\n                    $(this).removeClass(m.hiddenplayerbuttonpaused);\n                }\n            });\n        }\n    };//end of return object\n\n});"],"names":["define","$","log","def","debug","controls","hiddenplayer","hiddenplayerbutton","hiddenplayerbuttonactive","hiddenplayerbuttonpaused","hiddenplayerbuttonplaying","init","opts","register_controls","register_events","this","playercontrols","that","audioplayer","click","e","audiosrc","attr","prop","removeClass","addClass","find","dohiddenplay","dohiddenstop","pause","load","pp","play","undefined","then","catch","error","dobuttonicons","theaudiosrc","m","each","index","activebutton"],"mappings":"AAAAA,qCAAO,CAAC,SAAU,WAAY,yBAAyB,SAAUC,EAAGC,IAAKC,YAGrED,IAAIE,MAAM,kDAEH,CAEHC,SAAU,GACVC,aAAcH,IAAIG,aAClBC,mBAAoBJ,IAAII,mBACxBC,yBAA0BL,IAAIK,yBAC9BC,yBAA0BN,IAAIM,yBAC9BC,0BAA2BP,IAAIM,yBAE/BE,KAAM,SAAUC,WACPC,yBACAC,mBAGTD,kBAAmB,gBACVR,SAASC,aAAeL,EAAE,IAAMc,KAAKT,mBACrCD,SAASE,mBAAqBN,EAAE,IAAMc,KAAKR,yBAC3CF,SAASW,eAAiBf,EAAE,IAAMc,KAAKR,mBAAqB,OAGrEO,gBAAiB,eACTG,KAAOF,KACPG,YAAcH,KAAKV,SAASC,kBAE3BD,SAASE,mBAAmBY,OAAM,SAAUC,OACzCC,SAAWpB,EAAEc,MAAMO,KAAK,oBACxBD,WAAaH,YAAYI,KAAK,QAAYJ,YAAYK,KAAK,WAK3DN,KAAKZ,SAASW,eAAeQ,YAAY,kBACzCP,KAAKZ,SAASW,eAAeS,SAAS,kBACtCxB,EAAEc,MAAMW,KAAK,KAAKD,SAAS,kBAC3BR,KAAKU,aAAaN,YAPlBJ,KAAKW,eACLX,KAAKZ,SAASW,eAAeQ,YAAY,kBACzCP,KAAKZ,SAASW,eAAeS,SAAS,uBAYlDE,aAAc,SAAUN,cAEhBH,YADIH,KACYV,SAASC,aAC7BY,YAAYI,KAAK,MAAOD,UACxBH,YAAY,GAAGW,QACfX,YAAY,GAAGY,WACXC,GAAKb,YAAY,GAAGc,YACbC,IAAPF,IACAA,GAAGG,MAAK,eAELC,OAAM,SAAUC,WATfrB,KAaNsB,iBAENT,aAAc,WACFb,KACYV,SAASC,aACjB,GAAGuB,QAFPd,KAGNsB,iBAGNA,cAAe,SAAUC,iBACjBC,EAAIxB,KACJG,YAAcqB,EAAElC,SAASC,aACxBgC,cACDA,YAAcpB,YAAYI,KAAK,QAEnCiB,EAAElC,SAASE,mBAAmBiC,MAAK,SAAUC,OAC1BxC,EAAEc,MAAMO,KAAK,sBACXgB,aACbrC,EAAEc,MAAMU,SAASc,EAAEG,cACfxB,YAAYK,KAAK,WACjBtB,EAAEc,MAAMS,YAAYe,EAAE7B,2BACtBT,EAAEc,MAAMU,SAASc,EAAE9B,0BAGnBR,EAAEc,MAAMS,YAAYe,EAAE/B,4BAEtBP,EAAEc,MAAMS,YAAYe,EAAE9B,0BACtBR,EAAEc,MAAMU,SAASc,EAAE7B,8BAGvBT,EAAEc,MAAMS,YAAYe,EAAE/B,0BACtBP,EAAEc,MAAMS,YAAYe,EAAE7B,2BACtBT,EAAEc,MAAMS,YAAYe,EAAE9B"}