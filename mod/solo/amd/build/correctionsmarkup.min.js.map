{"version":3,"sources":["../src/correctionsmarkup.js"],"names":["define","$","log","debug","controls","cd","correctionscontainer","wordclass","suggestionclass","aiunmatched","options","errorwords","grammarmatches","init","config","theid","configcontrol","get","opts","JSON","parse","value","remove","register_controls","suggestedwords","markup_suggestedwords","markup_unmatchedwords","register_events","on","wordnumber","parseInt","attr","m","each","index","addClass","that","prevmatch","match","tposition","missingcnt","mi","missingwordnumber"],"mappings":"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","sourcesContent":["define(['jquery', 'core/log'], function ($, log) {\n    \"use strict\"; // jshint ;_;\n\n    log.debug('Corrections Markup: initialising');\n\n    return {\n        //controls\n\n        controls: {},\n\n        //class definitions\n        cd: {\n            correctionscontainer: 'mod_solo_corrections_cont',\n            wordclass: 'mod_solo_grading_correctionsword',\n            suggestionclass: 'mod_solo_corrections_suggestedword',\n            aiunmatched: 'mod_solo_aiunmatched',\n        },\n\n        options: {\n            errorwords: {},\n            grammarmatches: {},\n        },\n\n\n        init: function (config) {\n\n            //pick up opts from html\n            var theid = '#' + config['id'];\n            var configcontrol = $(theid).get(0);\n            if (configcontrol) {\n                var opts = JSON.parse(configcontrol.value);\n                log.debug(opts);\n                $(theid).remove();\n            } else {\n                //if there is no config we might as well give up\n                log.debug('Corrections Markup js: No config found on page. Giving up.');\n                return;\n            }\n\n            //register the controls\n            this.register_controls();\n\n\n            if (opts['sessionerrors'] !== '') {\n                this.options.suggestedwords = JSON.parse(opts['sessionerrors']);\n            } else {\n                this.options.suggestedwords = {};\n            }\n            if (opts['sessionmatches'] !== '') {\n                this.options.grammarmatches = JSON.parse(opts['sessionmatches']);\n            } else {\n                this.options.grammarmatches  = {};\n            }\n\n\n            log.debug(this.options);\n\n            //markup suggested words\n            this.markup_suggestedwords();\n            //mark up unmatched words\n            this.markup_unmatchedwords();\n\n            //register events\n            this.register_events();\n\n        },\n\n\n        register_controls: function () {\n\n            this.controls.correctionscontainer = $(\".\" + this.cd.correctionscontainer);\n\n        },\n\n        register_events: function () {\n            var that = this;\n            //set up event handlers\n            this.controls.correctionscontainer.on('click','.' + this.cd.wordclass, function () {\n                    var wordnumber = parseInt($(this).attr('data-wordnumber'));\n                    //do something\n                log.debug(wordnumber);\n\n            });\n\n        },\n\n\n        markup_suggestedwords: function () {\n            var m = this;\n            $.each(m.options.suggestedwords, function (index) {\n                log.debug('.' + m.cd.correctionscontainer + ' #' + m.cd.wordclass + '_' + m.options.suggestedwords[index].wordnumber);\n                    $('.' + m.cd.correctionscontainer + ' #' + m.cd.wordclass + '_' + m.options.suggestedwords[index].wordnumber).addClass(m.cd.suggestionclass);\n                }\n            );\n        },\n\n        //mark up all ai unmatched words as aiunmatched\n        // if words have been removed from passage, these wont be marked up yet\n        markup_unmatchedwords: function () {\n            var that = this;\n            if (this.options.grammarmatches) {\n                var prevmatch = 0;\n                $.each(this.options.grammarmatches, function (index, match) {\n                    //if there is a gap since the previous word match, it's a missing word (ie not in original)\n                    if((match.tposition - prevmatch)>1) {\n                        var missingcnt = match.tposition - prevmatch -1;\n                        for(var mi= 0; mi <missingcnt;mi++) {\n                            var missingwordnumber = match.tposition - 1 - mi;\n                            $('#' + that.cd.wordclass + '_' + missingwordnumber).addClass(that.cd.suggestionclass);\n                        }\n                    }\n                    prevmatch = match.tposition;\n                });\n            }\n\n        },\n    };\n});"],"file":"correctionsmarkup.min.js"}