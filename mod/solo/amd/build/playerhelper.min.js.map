{"version":3,"file":"playerhelper.min.js","sources":["../src/playerhelper.js"],"sourcesContent":["define([\"jquery\", \"mod_solo/conversationconstants\"], function($, constants) {\n\n    return {\n        controls: {},\n\n        init: function(mediatype){\n           this.initControls(mediatype);\n           this.registerEvents();\n        },\n\n        initControls: function(mediatype){\n            if(mediatype === constants.mediatype_video) {\n                this.controls.mediaPlayer = $(constants.videoplayer);\n            }else{\n                this.controls.mediaPlayer = $(constants.audioplayer);\n            }\n            this.controls.playBtn = $(constants.playbutton);\n            this.controls.prevBtn = $(constants.prevbutton);\n            this.controls.nextBtn = $(constants.nextbutton);\n            this.controls.progressBar = $(constants.progressbar);\n            this.controls.progressLine = $(constants.progressline);\n            this.controls.greenProgress = $(constants.greenprogress);\n            this.controls.progressMarker = $(constants.progressmarker);\n            this.controls.mediaDuration = 0;\n            this.controls.timeTotal = $(constants.timetotal);\n            this.controls.timeCurrent = $(constants.timecurrent);\n        },\n\n        toTimeString: function (date) {\n            var date = date.toTimeString().split(' ')[0];\n            date = date.slice(3, 8);\n            return date;\n        },\n\n        moveSlider: function(event) {\n\n        },\n\n        stepBack: function() {\n            var current = this.controls.mediaPlayer[0].currentTime;\n            if (current > 5) {\n                current -= 5;\n            } else {\n                current = 0;\n            }\n            this.controls.mediaPlayer[0].currentTime = current;\n        },\n        stepForward: function() {\n            var current = this.controls.mediaPlayer[0].currentTime;\n            var duration = this.controls.mediaPlayer[0].duration;\n            if (current <= (duration - 5)) {\n                current += 5;\n            } else {\n                current = duration;\n            }\n            this.controls.mediaPlayer[0].currentTime = current;\n        },\n\n        getCoords: function(elem) {\n            var box = elem.getBoundingClientRect();\n\n            return {\n                top: box.top + pageYOffset,\n                left: box.left + pageXOffset\n            };\n\n        },\n\n        registerEvents: function(){\n\n            var c = this.controls;\n            var that = this;\n\n            c.playBtn.click(function(e) {\n                e.preventDefault();\n                var readyState = c.mediaPlayer[0].readyState;\n\n                if (readyState == '4') {\n                    if (c.playBtn.hasClass('playing')) {\n                        c.mediaPlayer[0].pause();\n                    } else {\n                        c.mediaPlayer[0].play();\n                    }\n\n                    c.playBtn.toggleClass('playing');\n                } else {\n                    alert('No media..');\n                }\n\n\n\n            });\n\n            c.prevBtn.click(function(e) {\n                e.preventDefault();\n                that.stepBack();\n            });\n\n            c.nextBtn.click(function(e) {\n                e.preventDefault();\n                that.stepForward();\n            });\n\n            c.progressLine.click(function(e) {\n                e.preventDefault();\n\n                var $target = $(e.target);\n\n                if ($target.hasClass('progress-marker')) {\n                    return false;\n                }\n\n                var progressVal = e.offsetX;\n                var barWidth = c.progressLine.width();\n                var positionRatio = progressVal / barWidth;\n                var progressCurrent = positionRatio * 100;\n\n                c.greenProgress.width(progressCurrent + '%');\n                c.progressMarker.css(\n                    {\n                        left: progressCurrent + '%',\n                        opacity: 1\n                    }\n                );\n\n                c.mediaPlayer[0].currentTime = c.mediaDuration * positionRatio;\n\n                var durationCurrent = new Date(0, 0, 0, 0, 0, 0, c.mediaDuration * positionRatio * 1000);\n                c.timeCurrent.text(that.toTimeString(durationCurrent));\n\n            });\n\n            c.mediaPlayer.on('loadeddata', function(e) {\n                c.mediaDuration = c.mediaPlayer[0].duration;\n                if(!isNaN(c.mediaDuration) && isFinite(c.mediaDuration)){\n                    var duration = new Date(0, 0, 0, 0, 0, 0, c.mediaDuration * 1000);\n                    c.timeTotal.text(that.toTimeString(duration));\n                }\n\n                c.timeCurrent.text('0:00');\n\n                //init progress marker\n                c.progressMarker.css(\n                    {\n                        left: '0%',\n                        opacity: 1\n                    }\n                );\n\n                //add the timeupdate event. If you add this before now, it fails cos no media was loaded\n                c.mediaPlayer.on('timeupdate', function (ex) {\n                    // Update progress bar\n                    var video = c.mediaPlayer[0];\n                    var durationRatio = video.currentTime / video.duration;\n                    var leftPosition = durationRatio * 100 + '%';\n\n                    c.greenProgress.width(leftPosition);\n                    c.progressMarker.css(\n                        {\n                            left: leftPosition,\n                            opacity: 1\n\n                        }\n                    );\n\n                    // Update playback duration\n                    var currentTime = new Date(0, 0, 0, 0, 0, 0, video.currentTime * 1000);\n                    currentTime = that.toTimeString(currentTime);\n                    c.timeCurrent.text(currentTime);\n\n                });\n            });\n\n            c.mediaPlayer.on('durationchange', function(e) {\n                c.mediaDuration = c.mediaPlayer[0].duration;\n                if(!isNaN(c.mediaDuration) && isFinite(c.mediaDuration)){\n                    var duration = new Date(0, 0, 0, 0, 0, 0, c.mediaDuration * 1000);\n                    c.timeTotal.text(that.toTimeString(duration));\n                }\n            });\n\n\n\n            var sliderElem = c.progressLine[0];\n            var thumbElem = c.progressMarker[0];\n\n            thumbElem.onmousedown = function(e) {\n\n                var sliderCoords = that.getCoords(sliderElem);\n\n                document.onmousemove = function(e) {\n                    var newLeft = e.pageX - sliderCoords.left;\n\n                    if (newLeft < 0) {\n                        newLeft = 0;\n                    }\n                    var rightEdge = sliderElem.offsetWidth;\n\n                    if (newLeft > rightEdge) {\n                        newLeft = rightEdge;\n                    }\n\n                    thumbElem.style.left = newLeft + 'px';\n                    c.greenProgress.width(newLeft + 'px');\n\n                    c.mediaPlayer[0].currentTime = c.mediaDuration * (newLeft / rightEdge);\n\n                    var durationCurrent = new Date(0, 0, 0, 0, 0, 0, c.mediaDuration * (newLeft / rightEdge) * 1000);\n                    c.timeCurrent.text(that.toTimeString(durationCurrent));\n\n                }\n\n                document.onmouseup = function(e) {\n                    document.onmousemove = document.onmouseup = null;\n                };\n\n            };\n\n            thumbElem.ondragstart = function() {\n                return false;\n            };\n\n        }//end of register events\n}//end of returned object\n\n});\n"],"names":["define","$","constants","controls","init","mediatype","initControls","registerEvents","mediatype_video","mediaPlayer","videoplayer","audioplayer","playBtn","playbutton","prevBtn","prevbutton","nextBtn","nextbutton","progressBar","progressbar","progressLine","progressline","greenProgress","greenprogress","progressMarker","progressmarker","mediaDuration","timeTotal","timetotal","timeCurrent","timecurrent","toTimeString","date","split","slice","moveSlider","event","stepBack","current","this","currentTime","stepForward","duration","getCoords","elem","box","getBoundingClientRect","top","pageYOffset","left","pageXOffset","c","that","click","e","preventDefault","readyState","hasClass","pause","play","toggleClass","alert","target","positionRatio","offsetX","width","progressCurrent","css","opacity","durationCurrent","Date","text","on","isNaN","isFinite","ex","video","leftPosition","sliderElem","thumbElem","onmousedown","sliderCoords","document","onmousemove","newLeft","pageX","rightEdge","offsetWidth","style","onmouseup","ondragstart"],"mappings":"AAAAA,+BAAO,CAAC,SAAU,mCAAmC,SAASC,EAAGC,iBAEtD,CACHC,SAAU,GAEVC,KAAM,SAASC,gBACPC,aAAaD,gBACbE,kBAGRD,aAAc,SAASD,WAChBA,YAAcH,UAAUM,qBAClBL,SAASM,YAAcR,EAAEC,UAAUQ,kBAEnCP,SAASM,YAAcR,EAAEC,UAAUS,kBAEvCR,SAASS,QAAUX,EAAEC,UAAUW,iBAC/BV,SAASW,QAAUb,EAAEC,UAAUa,iBAC/BZ,SAASa,QAAUf,EAAEC,UAAUe,iBAC/Bd,SAASe,YAAcjB,EAAEC,UAAUiB,kBACnChB,SAASiB,aAAenB,EAAEC,UAAUmB,mBACpClB,SAASmB,cAAgBrB,EAAEC,UAAUqB,oBACrCpB,SAASqB,eAAiBvB,EAAEC,UAAUuB,qBACtCtB,SAASuB,cAAgB,OACzBvB,SAASwB,UAAY1B,EAAEC,UAAU0B,gBACjCzB,SAAS0B,YAAc5B,EAAEC,UAAU4B,cAG5CC,aAAc,SAAUC,aAEpBA,MADIA,KAAOA,KAAKD,eAAeE,MAAM,KAAK,IAC9BC,MAAM,EAAG,IAIzBC,WAAY,SAASC,SAIrBC,SAAU,eACFC,QAAUC,KAAKpC,SAASM,YAAY,GAAG+B,YACvCF,QAAU,EACVA,SAAW,EAEXA,QAAU,OAETnC,SAASM,YAAY,GAAG+B,YAAcF,SAE/CG,YAAa,eACLH,QAAUC,KAAKpC,SAASM,YAAY,GAAG+B,YACvCE,SAAWH,KAAKpC,SAASM,YAAY,GAAGiC,SACxCJ,SAAYI,SAAW,EACvBJ,SAAW,EAEXA,QAAUI,cAETvC,SAASM,YAAY,GAAG+B,YAAcF,SAG/CK,UAAW,SAASC,UACZC,IAAMD,KAAKE,8BAER,CACHC,IAAKF,IAAIE,IAAMC,YACfC,KAAMJ,IAAII,KAAOC,cAKzB3C,eAAgB,eAER4C,EAAIZ,KAAKpC,SACTiD,KAAOb,KAEXY,EAAEvC,QAAQyC,OAAM,SAASC,GACrBA,EAAEC,iBAGgB,KAFDJ,EAAE1C,YAAY,GAAG+C,YAG1BL,EAAEvC,QAAQ6C,SAAS,WACnBN,EAAE1C,YAAY,GAAGiD,QAEjBP,EAAE1C,YAAY,GAAGkD,OAGrBR,EAAEvC,QAAQgD,YAAY,YAEtBC,MAAM,iBAOdV,EAAErC,QAAQuC,OAAM,SAASC,GACrBA,EAAEC,iBACFH,KAAKf,cAGTc,EAAEnC,QAAQqC,OAAM,SAASC,GACrBA,EAAEC,iBACFH,KAAKX,iBAGTU,EAAE/B,aAAaiC,OAAM,SAASC,MAC1BA,EAAEC,iBAEYtD,EAAEqD,EAAEQ,QAENL,SAAS,0BACV,MAKPM,cAFcT,EAAEU,QACLb,EAAE/B,aAAa6C,QAE1BC,gBAAkC,IAAhBH,cAEtBZ,EAAE7B,cAAc2C,MAAMC,gBAAkB,KACxCf,EAAE3B,eAAe2C,IACb,CACIlB,KAAMiB,gBAAkB,IACxBE,QAAS,IAIjBjB,EAAE1C,YAAY,GAAG+B,YAAcW,EAAEzB,cAAgBqC,kBAE7CM,gBAAkB,IAAIC,KAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGnB,EAAEzB,cAAgBqC,cAAgB,KACnFZ,EAAEtB,YAAY0C,KAAKnB,KAAKrB,aAAasC,qBAIzClB,EAAE1C,YAAY+D,GAAG,cAAc,SAASlB,MACpCH,EAAEzB,cAAgByB,EAAE1C,YAAY,GAAGiC,UAC/B+B,MAAMtB,EAAEzB,gBAAkBgD,SAASvB,EAAEzB,eAAe,KAChDgB,SAAW,IAAI4B,KAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAqB,IAAlBnB,EAAEzB,eAC5CyB,EAAExB,UAAU4C,KAAKnB,KAAKrB,aAAaW,WAGvCS,EAAEtB,YAAY0C,KAAK,QAGnBpB,EAAE3B,eAAe2C,IACb,CACIlB,KAAM,KACNmB,QAAS,IAKjBjB,EAAE1C,YAAY+D,GAAG,cAAc,SAAUG,QAEjCC,MAAQzB,EAAE1C,YAAY,GAEtBoE,aAA+B,KADfD,MAAMpC,YAAcoC,MAAMlC,UACL,IAEzCS,EAAE7B,cAAc2C,MAAMY,cACtB1B,EAAE3B,eAAe2C,IACb,CACIlB,KAAM4B,aACNT,QAAS,QAMb5B,YAAc,IAAI8B,KAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAuB,IAApBM,MAAMpC,aACnDA,YAAcY,KAAKrB,aAAaS,aAChCW,EAAEtB,YAAY0C,KAAK/B,mBAK3BW,EAAE1C,YAAY+D,GAAG,kBAAkB,SAASlB,MACxCH,EAAEzB,cAAgByB,EAAE1C,YAAY,GAAGiC,UAC/B+B,MAAMtB,EAAEzB,gBAAkBgD,SAASvB,EAAEzB,eAAe,KAChDgB,SAAW,IAAI4B,KAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAqB,IAAlBnB,EAAEzB,eAC5CyB,EAAExB,UAAU4C,KAAKnB,KAAKrB,aAAaW,mBAMvCoC,WAAa3B,EAAE/B,aAAa,GAC5B2D,UAAY5B,EAAE3B,eAAe,GAEjCuD,UAAUC,YAAc,SAAS1B,OAEzB2B,aAAe7B,KAAKT,UAAUmC,YAElCI,SAASC,YAAc,SAAS7B,OACxB8B,QAAU9B,EAAE+B,MAAQJ,aAAahC,KAEjCmC,QAAU,IACVA,QAAU,OAEVE,UAAYR,WAAWS,YAEvBH,QAAUE,YACVF,QAAUE,WAGdP,UAAUS,MAAMvC,KAAOmC,QAAU,KACjCjC,EAAE7B,cAAc2C,MAAMmB,QAAU,MAEhCjC,EAAE1C,YAAY,GAAG+B,YAAcW,EAAEzB,eAAiB0D,QAAUE,eAExDjB,gBAAkB,IAAIC,KAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAGnB,EAAEzB,eAAiB0D,QAAUE,WAAa,KAC3FnC,EAAEtB,YAAY0C,KAAKnB,KAAKrB,aAAasC,mBAIzCa,SAASO,UAAY,SAASnC,GAC1B4B,SAASC,YAAcD,SAASO,UAAY,OAKpDV,UAAUW,YAAc,kBACb"}