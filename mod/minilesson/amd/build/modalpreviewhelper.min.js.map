{"version":3,"sources":["../src/modalpreviewhelper.js"],"names":["define","$","log","Str","ModalFactory","ModalEvents","Fragment","TheForm","selector","contextid","callback","preinit","prototype","modal","itemid","triggers","dd","on","e","preventDefault","data","create","type","types","CANCEL","body","getBody","then","setLarge","getRoot","hidden","bind","shown","append","show","params","loadFragment","init"],"mappings":"AASAA,OAAM,qCAAC,CAAC,QAAD,CAAW,UAAX,CAAsB,UAAtB,CAAkC,oBAAlC,CAAwD,mBAAxD,CAA6E,eAA7E,CAA8F,WAA9F,CAA2G,UAA3G,CAAD,CACF,SAASC,CAAT,CAAYC,CAAZ,CAAgBC,CAAhB,CAAqBC,CAArB,CAAmCC,CAAnC,CAAgDC,CAAhD,CAAmE,CAY/D,GAAIC,CAAAA,CAAO,CAAG,SAASC,CAAT,CAAmBC,CAAnB,CAA8BC,CAA9B,CAAwC,CAClD,KAAKD,SAAL,CAAiBA,CAAjB,CACA,KAAKC,QAAL,CAAgBA,CAAhB,CAMA,KAAKC,OAAL,CAAaH,CAAb,CACH,CATD,CAeAD,CAAO,CAACK,SAAR,CAAkBC,KAAlB,CAA0B,IAA1B,CAMAN,CAAO,CAACK,SAAR,CAAkBH,SAAlB,CAA8B,CAAC,CAA/B,CAMAF,CAAO,CAACK,SAAR,CAAkBE,MAAlB,CAA2B,CAAC,CAA5B,CAWAP,CAAO,CAACK,SAAR,CAAkBD,OAAlB,CAA4B,SAASH,CAAT,CAAmB,IACvCO,CAAAA,CAAQ,CAAGd,CAAC,CAACO,CAAD,CAD2B,CAEvCQ,CAAE,CAAC,IAFoC,CAI3Cf,CAAC,CAAC,MAAD,CAAD,CAAUgB,EAAV,CAAa,OAAb,CAAqBT,CAArB,CAA8B,SAASU,CAAT,CAAY,CAEtCA,CAAC,CAACC,cAAF,GAEAH,CAAE,CAACF,MAAH,CAAUb,CAAC,CAAC,IAAD,CAAD,CAAQmB,IAAR,CAAa,IAAb,CAAV,CAEAhB,CAAY,CAACiB,MAAb,CAAoB,CAChBC,IAAI,CAAElB,CAAY,CAACmB,KAAb,CAAmBC,MADT,CAGhBC,IAAI,CAAET,CAAE,CAACU,OAAH,CAAW,EAAX,CAHU,CAApB,EAIGC,IAJH,CAIQ,SAAUd,CAAV,CAAiB,CAErBG,CAAE,CAACH,KAAH,CAAWA,CAAX,CAKAG,CAAE,CAACH,KAAH,CAASe,QAAT,GAIAZ,CAAE,CAACH,KAAH,CAASgB,OAAT,GAAmBZ,EAAnB,CAAsBZ,CAAW,CAACyB,MAAlC,CAA0C,UAAW,CACjDd,CAAE,CAACN,QAAH,EACH,CAFyC,CAExCqB,IAFwC,CAEnCf,CAFmC,CAA1C,EAKAA,CAAE,CAACH,KAAH,CAASgB,OAAT,GAAmBZ,EAAnB,CAAsBZ,CAAW,CAAC2B,KAAlC,CAAyC,UAAY,CAEjDhB,CAAE,CAACH,KAAH,CAASgB,OAAT,GAAmBI,MAAnB,CAA0B,sEAA1B,EACAjB,CAAE,CAACH,KAAH,CAASgB,OAAT,GAAmBI,MAAnB,CAA0B,yEAA1B,CACH,CAJD,EAOAjB,CAAE,CAACH,KAAH,CAASqB,IAAT,GACA,MAAOlB,CAAAA,CAAE,CAACH,KACb,CA7BD,CA+BH,CArCD,CAuCH,CA3CD,CAmDAN,CAAO,CAACK,SAAR,CAAkBc,OAAlB,CAA4B,UAAW,CAGnC,GAAIS,CAAAA,CAAM,CAAG,CAACrB,MAAM,CAAE,KAAKA,MAAd,CAAb,CACA,MAAOR,CAAAA,CAAQ,CAAC8B,YAAT,CAAsB,gBAAtB,CAAwC,SAAxC,CAAmD,KAAK3B,SAAxD,CAAmE0B,CAAnE,CAEV,CAND,CAYA,MAA8D,CAW1DE,IAAI,CAAE,cAAS7B,CAAT,CAAmBC,CAAnB,CAA8BC,CAA9B,CAAwC,CAC1C,MAAO,IAAIH,CAAAA,CAAJ,CAAYC,CAAZ,CAAsBC,CAAtB,CAAiCC,CAAjC,CACV,CAbyD,CAejE,CAjIC,CAAN","sourcesContent":["/**\n * Add a modal to manage question adding and editing to the page.\n *\n * @module     mod_minilesson/modalpreviewhelper\n * @class      modalpreviewhelper\n * @package    mod_minilesson\n * @copyright  2020 Justin Hunt <poodllsupport@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/log','core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/yui'],\n    function($, log,Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\n\n        /**\n         * Constructor\n         *\n         * @param {String} selector used to find triggers for the new group modal.\n         * @param {int} contextid\n         * @param {String} formname The key/name of the form for this instance\n         * @param {Object} callback The function to call after successful deletion (for UI updates)\n         *\n         * Each call to init gets it's own instance of this class.\n         */\n        var TheForm = function(selector, contextid, callback) {\n            this.contextid = contextid;\n            this.callback = callback;\n\n            //this will init on page load (good if just one or two items)\n            //this.init(selector);\n\n            //this will init on item click (better for lots of items)\n            this.preinit(selector);\n        };\n\n        /**\n         * @var {Modal} modal\n         * @private\n         */\n        TheForm.prototype.modal = null;\n\n        /**\n         * @var {int} contextid\n         * @private\n         */\n        TheForm.prototype.contextid = -1;\n\n        /**\n         * @var {int} itemid\n         * @private\n         */\n        TheForm.prototype.itemid = -1;\n\n\n\n        /**\n         * Initialise the class.\n         *\n         * @param {String} selector used to find triggers for the new group modal.\n         * @private\n         * @return {Promise}\n         */\n        TheForm.prototype.preinit = function(selector) {\n            var triggers = $(selector);\n            var dd=this;\n\n            $('body').on('click',selector,function(e) {\n                //prevent it doing a real click (which will do the non ajax version of a click)\n                e.preventDefault();\n\n                dd.itemid=$(this).data('id');\n\n                ModalFactory.create({\n                    type: ModalFactory.types.CANCEL,\n                 //   title: dd.questiontitle,\n                    body: dd.getBody({})\n                }).then(function (modal) {\n                    // Keep a reference to the modal.\n                    dd.modal = modal;\n                    //Str.get_string(dd.formname , 'mod_minilesson').then(function(title){dd.formtitle=title;dd.modal.setTitle(dd.formtitle);});\n\n\n                    //questions are big, we want a big modal.\n                    dd.modal.setLarge();\n\n\n                    // We want to call our callback to do any housekeeping after the form is closed\n                    dd.modal.getRoot().on(ModalEvents.hidden, function() {\n                        dd.callback();\n                    }.bind(dd));\n\n                    // We want to hide the next button every time it is opened.\n                    dd.modal.getRoot().on(ModalEvents.shown, function () {\n                        //hide next button and progress bar\n                        dd.modal.getRoot().append('<style>.minilesson_nextbutton { display: none ! important; }</style>');\n                        dd.modal.getRoot().append('<style>.minilesson_quiz_progress { display: none ! important; }</style>');\n                    });\n\n\n                    dd.modal.show();\n                    return dd.modal;\n                });\n\n            });//end of on click\n\n        };\n\n\n        /**\n         * @method getBody\n         * @private\n         * @return {Promise}\n         */\n        TheForm.prototype.getBody = function() {\n\n            // Get the content of the modal.\n            var params = {itemid: this.itemid};\n            return Fragment.loadFragment('mod_minilesson', 'preview', this.contextid, params);\n\n        };\n\n\n\n\n\n        return /** @alias module:mod_minilesson/modalpreviewhelper */ {\n            // Public variables and functions.\n            /**\n             * Attach event listeners to initialise this module.\n             *\n             * @method init\n             * @param {string} selector The CSS selector used to find nodes that will trigger this module.\n             * @param {int} contextid The contextid for the course.\n             * @param {function} callback The callback.\n             * @return {Promise}\n             */\n            init: function(selector, contextid, callback) {\n                return new TheForm(selector, contextid, callback);\n            }\n        };\n    });"],"file":"modalpreviewhelper.min.js"}