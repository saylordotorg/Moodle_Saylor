{"version":3,"sources":["../src/modaldeletehelper.js"],"names":["define","$","log","Str","ModalFactory","ModalEvents","Ajax","Notification","TheForm","selector","contextid","formname","callback","preinit","prototype","modal","itemname","itemid","formmessage","triggers","dd","get_string","then","title","formtitle","message","deletebuttonlabel","on","e","preventDefault","clickedLink","currentTarget","data","create","type","types","SAVE_CANCEL","body","setSaveButtonText","root","getRoot","save","submitForm","bind","show","debug","call","methodname","args","done","ajaxresult","payloadobject","JSON","parse","error","hide","fail","exception","init"],"mappings":"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","sourcesContent":["/**\n * Add a create new group modal to the page.\n *\n * @module     mod_minilesson/modalformhelper\n * @class      modalformhelper\n * @package    mod_minilesson\n * @copyright  2020 Justin Hunt <poodllsupport@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/log', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/ajax','core/notification'],\n    function($, log, Str, ModalFactory, ModalEvents, Ajax, Notification) {\n\n        /**\n         * Constructor\n         *\n         * @param {String} selector used to find triggers for the new group modal.\n         * @param {int} contextid\n         * @param {String} formname The key/name of the form for this instance\n         * @param {Object} callback The function to call after successful deletion (for UI updates)\n         *\n         * Each call to init gets it's own instance of this class.\n         */\n        var TheForm = function(selector, contextid, formname,callback) {\n            this.contextid = contextid;\n            this.formname = formname;\n            this.callback = callback;\n\n            //this will init on item click\n            this.preinit(selector);\n        };\n\n        /**\n         * @var {Modal} modal\n         * @private\n         */\n        TheForm.prototype.modal = null;\n\n        /**\n         * @var {int} contextid\n         * @private\n         */\n        TheForm.prototype.contextid = -1;\n\n        /**\n         * @var {string} itemname\n         * @private\n         */\n        TheForm.prototype.itemname = '';\n\n        /**\n         * @var {int} itemid\n         * @private\n         */\n        TheForm.prototype.itemid = -1;\n\n        /**\n         * @var {string} formname\n         * @private\n         */\n        TheForm.prototype.formname = '';\n\n        /**\n         * @var {string} formname\n         * @private\n         */\n        TheForm.prototype.formmessage = 'Really delete:';\n\n        /**\n         * Initialise the class.\n         *\n         * @param {String} selector used to find triggers for the new group modal.\n         * @private\n         * @return {Promise}\n         */\n        TheForm.prototype.preinit = function(selector) {\n            var triggers = $(selector);\n            var dd=this;\n            Str.get_string(this.formname , 'mod_minilesson').then(function(title){dd.formtitle=title;});\n            Str.get_string(this.formname + '_message' , 'mod_minilesson').then(function(message){dd.formmessage=message;});\n            Str.get_string('deletebuttonlabel' , 'mod_minilesson').then(function(deletebuttonlabel){dd.deletebuttonlabel=deletebuttonlabel;});\n            $('body').on('click',selector,function(e) {\n                //prevent it doing a real click (which will do the non ajax version of a click)\n                e.preventDefault();\n\n                var clickedLink = $(e.currentTarget);\n                var itemid = clickedLink.data('id');\n                dd.itemid = itemid;\n                var itemname = clickedLink.data('name');\n                ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: dd.formtitle,\n                    body: dd.formmessage + '<i>' + itemname + '</i>',\n                })\n                    .then(function(modal) {\n                        dd.modal = modal;\n                        dd.modal.setSaveButtonText(dd.deletebuttonlabel);\n                        var root = dd.modal.getRoot();\n                        root.on(ModalEvents.save, dd.submitForm.bind(dd));\n                        dd.modal.show();\n                        return dd.modal;\n                    });\n\n            });//end of on click\n\n        };\n\n        /**\n         * This triggers a delete form ajax call\n         *\n         * @method submitForm\n         * @param {Event} e Form submission event.\n         * @private\n         */\n        TheForm.prototype.submitForm = function(e) {\n            e.preventDefault();\n            var dd = this;\n            log.debug('deleting:' + dd.formname );\n            Ajax.call([{\n                methodname: 'mod_minilesson_delete_item',\n                args: {\n                    itemid: dd.itemid,\n                    contextid: dd.contextid,\n                    formname: dd.formname\n                },\n                done: function (ajaxresult) {\n                    var payloadobject = JSON.parse(ajaxresult);\n\n                    if (payloadobject) {\n                        log.debug(payloadobject);\n                        switch(payloadobject.error) {\n                            case false:\n                               dd.callback(dd.itemid);\n                                break;\n\n                            case true:\n                            default:\n                                log.debug('that was an error: ');\n                        }\n                    }\n                    dd.modal.hide();\n                },\n                fail: Notification.exception\n            }]);\n        };\n\n\n\n\n\n\n        return /** @alias module:mod_minilesson/modaldeletehelper */ {\n            // Public variables and functions.\n            /**\n             * Attach event listeners to initialise this module.\n             *\n             * @method init\n             * @param {string} selector The CSS selector used to find nodes that will trigger this module.\n             * @param {int} contextid The contextid for the course.\n             * @param {string} formname The formname for the course.\n             * @param {object} callback The callback on successful deletion (for ui updates)\n             * @return {Promise}\n             */\n            init: function(selector, contextid, formname, callback) {\n                return new TheForm(selector, contextid, formname, callback);\n            }\n        };\n    });"],"file":"modaldeletehelper.min.js"}