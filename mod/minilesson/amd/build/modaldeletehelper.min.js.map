{"version":3,"file":"modaldeletehelper.min.js","sources":["../src/modaldeletehelper.js"],"sourcesContent":["/**\n * Add a create new group modal to the page.\n *\n * @module     mod_minilesson/modaldeletehelper\n * @class      modaldeletehelper\n * @package    mod_minilesson\n * @copyright  2020 Justin Hunt <poodllsupport@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/log', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/ajax','core/notification'],\n    function($, log, Str, ModalFactory, ModalEvents, Ajax, Notification) {\n\n        /**\n         * Constructor\n         *\n         * @param {String} selector used to find triggers for the new group modal.\n         * @param {int} contextid\n         * @param {String} formname The key/name of the form for this instance\n         * @param {Object} callback The function to call after successful deletion (for UI updates)\n         *\n         * Each call to init gets it's own instance of this class.\n         */\n        var TheForm = function(selector, contextid, formname,callback) {\n            this.contextid = contextid;\n            this.formname = formname;\n            this.callback = callback;\n\n            //this will init on item click\n            this.preinit(selector);\n        };\n\n        /**\n         * @var {Modal} modal\n         * @private\n         */\n        TheForm.prototype.modal = null;\n\n        /**\n         * @var {int} contextid\n         * @private\n         */\n        TheForm.prototype.contextid = -1;\n\n        /**\n         * @var {string} itemname\n         * @private\n         */\n        TheForm.prototype.itemname = '';\n\n        /**\n         * @var {int} itemid\n         * @private\n         */\n        TheForm.prototype.itemid = -1;\n\n        /**\n         * @var {string} formname\n         * @private\n         */\n        TheForm.prototype.formname = '';\n\n        /**\n         * @var {string} formname\n         * @private\n         */\n        TheForm.prototype.formmessage = 'Really delete:';\n\n        /**\n         * Initialise the class.\n         *\n         * @param {String} selector used to find triggers for the new group modal.\n         * @private\n         * @return {Promise}\n         */\n        TheForm.prototype.preinit = function(selector) {\n            var triggers = $(selector);\n            var dd=this;\n            Str.get_string(this.formname , 'mod_minilesson').then(function(title){dd.formtitle=title;});\n            Str.get_string(this.formname + '_message' , 'mod_minilesson').then(function(message){dd.formmessage=message;});\n            Str.get_string('deletebuttonlabel' , 'mod_minilesson').then(function(deletebuttonlabel){dd.deletebuttonlabel=deletebuttonlabel;});\n            $('body').on('click',selector,function(e) {\n                //prevent it doing a real click (which will do the non ajax version of a click)\n                e.preventDefault();\n\n                var clickedLink = $(e.currentTarget);\n                var itemid = clickedLink.data('id');\n                dd.itemid = itemid;\n                var itemname = clickedLink.data('name');\n                ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: dd.formtitle,\n                    body: dd.formmessage + '<i>' + itemname + '</i>',\n                })\n                    .then(function(modal) {\n                        dd.modal = modal;\n                        dd.modal.setSaveButtonText(dd.deletebuttonlabel);\n                        var root = dd.modal.getRoot();\n                        root.on(ModalEvents.save, dd.submitForm.bind(dd));\n                        dd.modal.show();\n                        return dd.modal;\n                    });\n\n            });//end of on click\n\n        };\n\n        /**\n         * This triggers a delete form ajax call\n         *\n         * @method submitForm\n         * @param {Event} e Form submission event.\n         * @private\n         */\n        TheForm.prototype.submitForm = function(e) {\n            e.preventDefault();\n            var dd = this;\n            log.debug('deleting:' + dd.formname );\n            Ajax.call([{\n                methodname: 'mod_minilesson_delete_item',\n                args: {\n                    itemid: dd.itemid,\n                    contextid: dd.contextid,\n                    formname: dd.formname\n                },\n                done: function (ajaxresult) {\n                    var payloadobject = JSON.parse(ajaxresult);\n\n                    if (payloadobject) {\n                        log.debug(payloadobject);\n                        switch(payloadobject.error) {\n                            case false:\n                               dd.callback(dd.itemid);\n                                break;\n\n                            case true:\n                            default:\n                                log.debug('that was an error: ');\n                        }\n                    }\n                    dd.modal.hide();\n                },\n                fail: Notification.exception\n            }]);\n        };\n\n\n\n\n\n\n        return /** @alias module:mod_minilesson/modaldeletehelper */ {\n            // Public variables and functions.\n            /**\n             * Attach event listeners to initialise this module.\n             *\n             * @method init\n             * @param {string} selector The CSS selector used to find nodes that will trigger this module.\n             * @param {int} contextid The contextid for the course.\n             * @param {string} formname The formname for the course.\n             * @param {object} callback The callback on successful deletion (for ui updates)\n             * @return {Promise}\n             */\n            init: function(selector, contextid, formname, callback) {\n                return new TheForm(selector, contextid, formname, callback);\n            }\n        };\n    });"],"names":["define","$","log","Str","ModalFactory","ModalEvents","Ajax","Notification","TheForm","selector","contextid","formname","callback","preinit","prototype","modal","itemname","itemid","formmessage","dd","this","get_string","then","title","formtitle","message","deletebuttonlabel","on","e","preventDefault","clickedLink","currentTarget","data","create","type","types","SAVE_CANCEL","body","setSaveButtonText","getRoot","save","submitForm","bind","show","debug","call","methodname","args","done","ajaxresult","payloadobject","JSON","parse","error","hide","fail","exception","init"],"mappings":";;;;;;;;;AASAA,0CAAO,CAAC,SAAU,WAAY,WAAY,qBAAsB,oBAAqB,YAAY,sBAC7F,SAASC,EAAGC,IAAKC,IAAKC,aAAcC,YAAaC,KAAMC,kBAY/CC,QAAU,SAASC,SAAUC,UAAWC,SAASC,eAC5CF,UAAYA,eACZC,SAAWA,cACXC,SAAWA,cAGXC,QAAQJ,kBAOjBD,QAAQM,UAAUC,MAAQ,KAM1BP,QAAQM,UAAUJ,WAAa,EAM/BF,QAAQM,UAAUE,SAAW,GAM7BR,QAAQM,UAAUG,QAAU,EAM5BT,QAAQM,UAAUH,SAAW,GAM7BH,QAAQM,UAAUI,YAAc,iBAShCV,QAAQM,UAAUD,QAAU,SAASJ,UAClBR,EAAEQ,cACbU,GAAGC,KACPjB,IAAIkB,WAAWD,KAAKT,SAAW,kBAAkBW,MAAK,SAASC,OAAOJ,GAAGK,UAAUD,SACnFpB,IAAIkB,WAAWD,KAAKT,SAAW,WAAa,kBAAkBW,MAAK,SAASG,SAASN,GAAGD,YAAYO,WACpGtB,IAAIkB,WAAW,oBAAsB,kBAAkBC,MAAK,SAASI,mBAAmBP,GAAGO,kBAAkBA,qBAC7GzB,EAAE,QAAQ0B,GAAG,QAAQlB,UAAS,SAASmB,GAEnCA,EAAEC,qBAEEC,YAAc7B,EAAE2B,EAAEG,eAClBd,OAASa,YAAYE,KAAK,MAC9Bb,GAAGF,OAASA,WACRD,SAAWc,YAAYE,KAAK,QAChC5B,aAAa6B,OAAO,CAChBC,KAAM9B,aAAa+B,MAAMC,YACzBb,MAAOJ,GAAGK,UACVa,KAAMlB,GAAGD,YAAc,MAAQF,SAAW,SAEzCM,MAAK,SAASP,cACXI,GAAGJ,MAAQA,MACXI,GAAGJ,MAAMuB,kBAAkBnB,GAAGO,mBACnBP,GAAGJ,MAAMwB,UACfZ,GAAGtB,YAAYmC,KAAMrB,GAAGsB,WAAWC,KAAKvB,KAC7CA,GAAGJ,MAAM4B,OACFxB,GAAGJ,aAc1BP,QAAQM,UAAU2B,WAAa,SAASb,GACpCA,EAAEC,qBACEV,GAAKC,KACTlB,IAAI0C,MAAM,YAAczB,GAAGR,UAC3BL,KAAKuC,KAAK,CAAC,CACPC,WAAY,6BACZC,KAAM,CACF9B,OAAQE,GAAGF,OACXP,UAAWS,GAAGT,UACdC,SAAUQ,GAAGR,UAEjBqC,KAAM,SAAUC,gBACRC,cAAgBC,KAAKC,MAAMH,eAE3BC,iBACAhD,IAAI0C,MAAMM,gBAED,IADFA,cAAcG,MAEdlC,GAAGP,SAASO,GAAGF,aAKdf,IAAI0C,MAAM,uBAGtBzB,GAAGJ,MAAMuC,QAEbC,KAAMhD,aAAaiD,cASkC,CAYzDC,KAAM,SAAShD,SAAUC,UAAWC,SAAUC,iBACnC,IAAIJ,QAAQC,SAAUC,UAAWC,SAAUC"}