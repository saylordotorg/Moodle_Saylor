{"version":3,"file":"modalformhelper.min.js","sources":["../src/modalformhelper.js"],"sourcesContent":["/**\n * Add a modal to manage question adding and editing to the page.\n *\n * @module     mod_minilesson/modalformhelper\n * @class      modalformhelper\n * @package    mod_minilesson\n * @copyright  2020 Justin Hunt <poodllsupport@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/log','core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/yui'],\n    function($, log,Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\n\n        /**\n         * Constructor\n         *\n         * @param {String} selector used to find triggers for the new group modal.\n         * @param {int} contextid\n         * @param {String} formname The key/name of the form for this instance\n         * @param {Object} callback The function to call after successful deletion (for UI updates)\n         *\n         * Each call to init gets it's own instance of this class.\n         */\n        var TheForm = function(selector, contextid, callback) {\n            this.contextid = contextid;\n            this.callback = callback;\n\n            //this will init on page load (good if just one or two items)\n            //this.init(selector);\n\n            //this will init on item click (better for lots of items)\n            this.preinit(selector);\n        };\n\n        /**\n         * @var {Modal} modal\n         * @private\n         */\n        TheForm.prototype.modal = null;\n\n        /**\n         * @var {int} contextid\n         * @private\n         */\n        TheForm.prototype.contextid = -1;\n\n        /**\n         * @var {int} itemid\n         * @private\n         */\n        TheForm.prototype.itemid = -1;\n\n        /**\n         * @var {string} formname\n         * @private\n         */\n        TheForm.prototype.formname = '';\n\n\n        /**\n         * Initialise the class.\n         *\n         * @param {String} selector used to find triggers for the new group modal.\n         * @private\n         * @return {Promise}\n         */\n        TheForm.prototype.preinit = function(selector) {\n            var triggers = $(selector);\n            var dd=this;\n\n            $('body').on('click',selector,function(e) {\n                //prevent it doing a real click (which will do the non ajax version of a click)\n                e.preventDefault();\n\n                dd.itemid=$(this).data('id');\n                dd.formname=$(this).data('qtype');\n\n                ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: dd.formtitle,\n                    body: dd.getBody({})\n                }).then(function (modal) {\n                    // Keep a reference to the modal.\n                    dd.modal = modal;\n                    Str.get_string(dd.formname , 'mod_minilesson').then(function(title){dd.formtitle=title;dd.modal.setTitle(dd.formtitle);});\n\n\n                    // Forms are big, we want a big modal.\n                    dd.modal.setLarge();\n\n                    // We want to reset the form every time it is opened.\n                    dd.modal.getRoot().on(ModalEvents.hidden, function() {\n                        dd.modal.setBody(dd.getBody({}));\n                    }.bind(dd));\n\n                    // We want to hide the submit buttons every time it is opened.\n                    dd.modal.getRoot().on(ModalEvents.shown, function () {\n                        dd.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                    });\n\n\n                    // We catch the modal save event, and use it to submit the form inside the modal.\n                    // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                    dd.modal.getRoot().on(ModalEvents.save, dd.submitForm.bind(dd));\n                    // We also catch the form submit event and use it to submit the form with ajax.\n                    dd.modal.getRoot().on('submit', 'form', dd.submitFormAjax.bind(dd));\n                    dd.modal.show();\n                    return dd.modal;\n                });\n\n            });//end of on click\n\n        };\n\n\n        /**\n         * @method getBody\n         * @private\n         * @return {Promise}\n         */\n        TheForm.prototype.getBody = function(formdata) {\n            if (typeof formdata === \"undefined\") {\n                formdata = {};\n            }\n            // Get the content of the modal.\n            var params = {jsonformdata: JSON.stringify(formdata), formname: this.formname, itemid: this.itemid};\n            return Fragment.loadFragment('mod_minilesson', 'mform', this.contextid, params);\n\n        };\n\n        /**\n         * @method handleFormSubmissionResponse\n         * @private\n         * @return {Promise}\n         */\n        TheForm.prototype.handleFormSubmissionResponse = function(formData,ajaxresult) {\n            this.modal.hide();\n            // We could trigger an event instead.\n            // Yuk.\n            Y.use('moodle-core-formchangechecker', function() {\n                M.core_formchangechecker.reset_form_dirty_state();\n            });\n\n            log.debug(ajaxresult); //this contains what the server returns (eg new item->id etc)\n            log.debug(formData); //this contains the original form data\n\n            var payloadobject = JSON.parse(ajaxresult);\n\n            if (payloadobject) {\n                log.debug(payloadobject);\n                switch(payloadobject.error) {\n                    case false:\n                        //we could just reload here. But we wont\n                        //document.location.reload();\n                        //process formData\n                        var dataobject ={};\n                        dataobject.name = new URLSearchParams(formData).get('name');\n                        dataobject.typelabel=this.formtitle;\n                        dataobject.type=this.formname;\n                        this.callback(dataobject,payloadobject.itemid);\n                        break;\n\n                    case true:\n                    default:\n                        log.debug('that was an error: ');\n                }\n            }\n\n        };\n\n        /**\n         * @method handleFormSubmissionFailure\n         * @private\n         * @return {Promise}\n         */\n        TheForm.prototype.handleFormSubmissionFailure = function(data) {\n            // Oh noes! Epic fail :(\n            // Ah wait - this is normal. We need to re-display the form with errors!\n            this.modal.setBody(this.getBody(data));\n        };\n\n        /**\n         * Private method\n         *\n         * @method submitFormAjax\n         * @private\n         * @param {Event} e Form submission event.\n         */\n        TheForm.prototype.submitFormAjax = function(e) {\n            // We don't want to do a real form submission.\n            e.preventDefault();\n\n            var changeEvent = document.createEvent('HTMLEvents');\n            changeEvent.initEvent('change', true, true);\n\n            // Prompt all inputs to run their validation functions.\n            // Normally this would happen when the form is submitted, but\n            // since we aren't submitting the form normally we need to run client side\n            // validation.\n            this.modal.getRoot().find(':input').each(function(index, element) {\n                element.dispatchEvent(changeEvent);\n            });\n\n            // Now the change events have run, see if there are any \"invalid\" form fields.\n            var invalid = $.merge(\n                this.modal.getRoot().find('[aria-invalid=\"true\"]'),\n                this.modal.getRoot().find('.error')\n            );\n\n            // If we found invalid fields, focus on the first one and do not submit via ajax.\n            if (invalid.length) {\n                invalid.first().focus();\n                return;\n            }\n\n            // Convert all the form elements values to a serialised string.\n            var formData = this.modal.getRoot().find('form').serialize();\n\n            // Now we can continue...\n            Ajax.call([{\n                methodname: 'mod_minilesson_submit_mform',\n                args: {contextid: this.contextid, jsonformdata: JSON.stringify(formData), formname: this.formname},\n                done: this.handleFormSubmissionResponse.bind(this, formData),\n                fail: this.handleFormSubmissionFailure.bind(this, formData)\n            }]);\n        };\n\n        /**\n         * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n         *\n         * @method submitForm\n         * @param {Event} e Form submission event.\n         * @private\n         */\n        TheForm.prototype.submitForm = function(e) {\n            e.preventDefault();\n            this.modal.getRoot().find('form').submit();\n        };\n\n        return /** @alias module:mod_minilesson/modalformhelper */ {\n            // Public variables and functions.\n            /**\n             * Attach event listeners to initialise this module.\n             *\n             * @method init\n             * @param {string} selector The CSS selector used to find nodes that will trigger this module.\n             * @param {int} contextid The contextid for the course.\n             * @param {function} callback The callback.\n             * @return {Promise}\n             */\n            init: function(selector, contextid, callback) {\n                return new TheForm(selector, contextid, callback);\n            }\n        };\n    });"],"names":["define","$","log","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","TheForm","selector","contextid","callback","preinit","prototype","modal","itemid","formname","dd","this","on","e","preventDefault","data","create","type","types","SAVE_CANCEL","title","formtitle","body","getBody","then","get_string","setTitle","setLarge","getRoot","hidden","setBody","bind","shown","append","save","submitForm","submitFormAjax","show","formdata","params","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","formData","ajaxresult","hide","use","M","core_formchangechecker","reset_form_dirty_state","debug","payloadobject","parse","error","dataobject","name","URLSearchParams","get","typelabel","handleFormSubmissionFailure","changeEvent","document","createEvent","initEvent","find","each","index","element","dispatchEvent","invalid","merge","length","first","focus","serialize","call","methodname","args","done","fail","submit","init"],"mappings":";;;;;;;;;AASAA,wCAAO,CAAC,SAAU,WAAW,WAAY,qBAAsB,oBAAqB,gBAAiB,YAAa,aAC9G,SAASC,EAAGC,IAAIC,IAAKC,aAAcC,YAAaC,SAAUC,KAAMC,OAYxDC,QAAU,SAASC,SAAUC,UAAWC,eACnCD,UAAYA,eACZC,SAAWA,cAMXC,QAAQH,kBAOjBD,QAAQK,UAAUC,MAAQ,KAM1BN,QAAQK,UAAUH,WAAa,EAM/BF,QAAQK,UAAUE,QAAU,EAM5BP,QAAQK,UAAUG,SAAW,GAU7BR,QAAQK,UAAUD,QAAU,SAASH,UAClBT,EAAES,cACbQ,GAAGC,KAEPlB,EAAE,QAAQmB,GAAG,QAAQV,UAAS,SAASW,GAEnCA,EAAEC,iBAEFJ,GAAGF,OAAOf,EAAEkB,MAAMI,KAAK,MACvBL,GAAGD,SAAShB,EAAEkB,MAAMI,KAAK,SAEzBnB,aAAaoB,OAAO,CAChBC,KAAMrB,aAAasB,MAAMC,YACzBC,MAAOV,GAAGW,UACVC,KAAMZ,GAAGa,QAAQ,MAClBC,MAAK,SAAUjB,cAEdG,GAAGH,MAAQA,MACXZ,IAAI8B,WAAWf,GAAGD,SAAW,kBAAkBe,MAAK,SAASJ,OAAOV,GAAGW,UAAUD,MAAMV,GAAGH,MAAMmB,SAAShB,GAAGW,cAI5GX,GAAGH,MAAMoB,WAGTjB,GAAGH,MAAMqB,UAAUhB,GAAGf,YAAYgC,OAAQ,WACtCnB,GAAGH,MAAMuB,QAAQpB,GAAGa,QAAQ,MAC9BQ,KAAKrB,KAGPA,GAAGH,MAAMqB,UAAUhB,GAAGf,YAAYmC,OAAO,WACrCtB,GAAGH,MAAMqB,UAAUK,OAAO,4EAM9BvB,GAAGH,MAAMqB,UAAUhB,GAAGf,YAAYqC,KAAMxB,GAAGyB,WAAWJ,KAAKrB,KAE3DA,GAAGH,MAAMqB,UAAUhB,GAAG,SAAU,OAAQF,GAAG0B,eAAeL,KAAKrB,KAC/DA,GAAGH,MAAM8B,OACF3B,GAAGH,aAatBN,QAAQK,UAAUiB,QAAU,SAASe,eACT,IAAbA,WACPA,SAAW,QAGXC,OAAS,CAACC,aAAcC,KAAKC,UAAUJ,UAAW7B,SAAUE,KAAKF,SAAUD,OAAQG,KAAKH,eACrFV,SAAS6C,aAAa,iBAAkB,QAAShC,KAAKR,UAAWoC,SAS5EtC,QAAQK,UAAUsC,6BAA+B,SAASC,SAASC,iBAC1DvC,MAAMwC,OAGX/C,EAAEgD,IAAI,iCAAiC,WACnCC,EAAEC,uBAAuBC,4BAG7BzD,IAAI0D,MAAMN,YACVpD,IAAI0D,MAAMP,cAENQ,cAAgBZ,KAAKa,MAAMR,eAE3BO,iBACA3D,IAAI0D,MAAMC,gBAED,IADFA,cAAcE,WAKTC,WAAY,GAChBA,WAAWC,KAAO,IAAIC,gBAAgBb,UAAUc,IAAI,QACpDH,WAAWI,UAAUjD,KAAKU,UAC1BmC,WAAWvC,KAAKN,KAAKF,cAChBL,SAASoD,WAAWH,cAAc7C,aAKvCd,IAAI0D,MAAM,wBAW1BnD,QAAQK,UAAUuD,4BAA8B,SAAS9C,WAGhDR,MAAMuB,QAAQnB,KAAKY,QAAQR,QAUpCd,QAAQK,UAAU8B,eAAiB,SAASvB,GAExCA,EAAEC,qBAEEgD,YAAcC,SAASC,YAAY,cACvCF,YAAYG,UAAU,UAAU,GAAM,QAMjC1D,MAAMqB,UAAUsC,KAAK,UAAUC,MAAK,SAASC,MAAOC,SACrDA,QAAQC,cAAcR,oBAItBS,QAAU9E,EAAE+E,MACZ7D,KAAKJ,MAAMqB,UAAUsC,KAAK,yBAC1BvD,KAAKJ,MAAMqB,UAAUsC,KAAK,cAI1BK,QAAQE,OACRF,QAAQG,QAAQC,iBAKhB9B,SAAWlC,KAAKJ,MAAMqB,UAAUsC,KAAK,QAAQU,YAGjD7E,KAAK8E,KAAK,CAAC,CACPC,WAAY,8BACZC,KAAM,CAAC5E,UAAWQ,KAAKR,UAAWqC,aAAcC,KAAKC,UAAUG,UAAWpC,SAAUE,KAAKF,UACzFuE,KAAMrE,KAAKiC,6BAA6Bb,KAAKpB,KAAMkC,UACnDoC,KAAMtE,KAAKkD,4BAA4B9B,KAAKpB,KAAMkC,eAW1D5C,QAAQK,UAAU6B,WAAa,SAAStB,GACpCA,EAAEC,sBACGP,MAAMqB,UAAUsC,KAAK,QAAQgB,UAGqB,CAWvDC,KAAM,SAASjF,SAAUC,UAAWC,iBACzB,IAAIH,QAAQC,SAAUC,UAAWC"}