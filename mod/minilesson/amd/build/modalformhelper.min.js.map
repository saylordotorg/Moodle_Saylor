{"version":3,"sources":["../src/modalformhelper.js"],"names":["define","$","log","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","TheForm","selector","contextid","callback","preinit","prototype","modal","itemid","formname","triggers","dd","on","e","preventDefault","data","create","type","types","SAVE_CANCEL","title","formtitle","body","getBody","then","get_string","setTitle","setLarge","getRoot","hidden","setBody","bind","shown","append","save","submitForm","submitFormAjax","show","formdata","params","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","formData","ajaxresult","hide","use","M","core_formchangechecker","reset_form_dirty_state","debug","payloadobject","parse","error","dataobject","name","URLSearchParams","get","typelabel","handleFormSubmissionFailure","changeEvent","document","createEvent","initEvent","find","each","index","element","dispatchEvent","invalid","merge","length","first","focus","serialize","call","methodname","args","done","fail","submit","init"],"mappings":"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","sourcesContent":["/**\n * Add a modal to manage question adding and editing to the page.\n *\n * @module     mod_minilesson/modalformhelper\n * @class      modalformhelper\n * @package    mod_minilesson\n * @copyright  2020 Justin Hunt <poodllsupport@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/log','core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/yui'],\n    function($, log,Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\n\n        /**\n         * Constructor\n         *\n         * @param {String} selector used to find triggers for the new group modal.\n         * @param {int} contextid\n         * @param {String} formname The key/name of the form for this instance\n         * @param {Object} callback The function to call after successful deletion (for UI updates)\n         *\n         * Each call to init gets it's own instance of this class.\n         */\n        var TheForm = function(selector, contextid, callback) {\n            this.contextid = contextid;\n            this.callback = callback;\n\n            //this will init on page load (good if just one or two items)\n            //this.init(selector);\n\n            //this will init on item click (better for lots of items)\n            this.preinit(selector);\n        };\n\n        /**\n         * @var {Modal} modal\n         * @private\n         */\n        TheForm.prototype.modal = null;\n\n        /**\n         * @var {int} contextid\n         * @private\n         */\n        TheForm.prototype.contextid = -1;\n\n        /**\n         * @var {int} itemid\n         * @private\n         */\n        TheForm.prototype.itemid = -1;\n\n        /**\n         * @var {string} formname\n         * @private\n         */\n        TheForm.prototype.formname = '';\n\n\n        /**\n         * Initialise the class.\n         *\n         * @param {String} selector used to find triggers for the new group modal.\n         * @private\n         * @return {Promise}\n         */\n        TheForm.prototype.preinit = function(selector) {\n            var triggers = $(selector);\n            var dd=this;\n\n            $('body').on('click',selector,function(e) {\n                //prevent it doing a real click (which will do the non ajax version of a click)\n                e.preventDefault();\n\n                dd.itemid=$(this).data('id');\n                dd.formname=$(this).data('qtype');\n\n                ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: dd.formtitle,\n                    body: dd.getBody({})\n                }).then(function (modal) {\n                    // Keep a reference to the modal.\n                    dd.modal = modal;\n                    Str.get_string(dd.formname , 'mod_minilesson').then(function(title){dd.formtitle=title;dd.modal.setTitle(dd.formtitle);});\n\n\n                    // Forms are big, we want a big modal.\n                    dd.modal.setLarge();\n\n                    // We want to reset the form every time it is opened.\n                    dd.modal.getRoot().on(ModalEvents.hidden, function() {\n                        dd.modal.setBody(dd.getBody({}));\n                    }.bind(dd));\n\n                    // We want to hide the submit buttons every time it is opened.\n                    dd.modal.getRoot().on(ModalEvents.shown, function () {\n                        dd.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\n                    });\n\n\n                    // We catch the modal save event, and use it to submit the form inside the modal.\n                    // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                    dd.modal.getRoot().on(ModalEvents.save, dd.submitForm.bind(dd));\n                    // We also catch the form submit event and use it to submit the form with ajax.\n                    dd.modal.getRoot().on('submit', 'form', dd.submitFormAjax.bind(dd));\n                    dd.modal.show();\n                    return dd.modal;\n                });\n\n            });//end of on click\n\n        };\n\n\n        /**\n         * @method getBody\n         * @private\n         * @return {Promise}\n         */\n        TheForm.prototype.getBody = function(formdata) {\n            if (typeof formdata === \"undefined\") {\n                formdata = {};\n            }\n            // Get the content of the modal.\n            var params = {jsonformdata: JSON.stringify(formdata), formname: this.formname, itemid: this.itemid};\n            return Fragment.loadFragment('mod_minilesson', 'mform', this.contextid, params);\n\n        };\n\n        /**\n         * @method handleFormSubmissionResponse\n         * @private\n         * @return {Promise}\n         */\n        TheForm.prototype.handleFormSubmissionResponse = function(formData,ajaxresult) {\n            this.modal.hide();\n            // We could trigger an event instead.\n            // Yuk.\n            Y.use('moodle-core-formchangechecker', function() {\n                M.core_formchangechecker.reset_form_dirty_state();\n            });\n\n            log.debug(ajaxresult); //this contains what the server returns (eg new item->id etc)\n            log.debug(formData); //this contains the original form data\n\n            var payloadobject = JSON.parse(ajaxresult);\n\n            if (payloadobject) {\n                log.debug(payloadobject);\n                switch(payloadobject.error) {\n                    case false:\n                        //we could just reload here. But we wont\n                        //document.location.reload();\n                        //process formData\n                        var dataobject ={};\n                        dataobject.name = new URLSearchParams(formData).get('name');\n                        dataobject.typelabel=this.formtitle;\n                        dataobject.type=this.formname;\n                        this.callback(dataobject,payloadobject.itemid);\n                        break;\n\n                    case true:\n                    default:\n                        log.debug('that was an error: ');\n                }\n            }\n\n        };\n\n        /**\n         * @method handleFormSubmissionFailure\n         * @private\n         * @return {Promise}\n         */\n        TheForm.prototype.handleFormSubmissionFailure = function(data) {\n            // Oh noes! Epic fail :(\n            // Ah wait - this is normal. We need to re-display the form with errors!\n            this.modal.setBody(this.getBody(data));\n        };\n\n        /**\n         * Private method\n         *\n         * @method submitFormAjax\n         * @private\n         * @param {Event} e Form submission event.\n         */\n        TheForm.prototype.submitFormAjax = function(e) {\n            // We don't want to do a real form submission.\n            e.preventDefault();\n\n            var changeEvent = document.createEvent('HTMLEvents');\n            changeEvent.initEvent('change', true, true);\n\n            // Prompt all inputs to run their validation functions.\n            // Normally this would happen when the form is submitted, but\n            // since we aren't submitting the form normally we need to run client side\n            // validation.\n            this.modal.getRoot().find(':input').each(function(index, element) {\n                element.dispatchEvent(changeEvent);\n            });\n\n            // Now the change events have run, see if there are any \"invalid\" form fields.\n            var invalid = $.merge(\n                this.modal.getRoot().find('[aria-invalid=\"true\"]'),\n                this.modal.getRoot().find('.error')\n            );\n\n            // If we found invalid fields, focus on the first one and do not submit via ajax.\n            if (invalid.length) {\n                invalid.first().focus();\n                return;\n            }\n\n            // Convert all the form elements values to a serialised string.\n            var formData = this.modal.getRoot().find('form').serialize();\n\n            // Now we can continue...\n            Ajax.call([{\n                methodname: 'mod_minilesson_submit_mform',\n                args: {contextid: this.contextid, jsonformdata: JSON.stringify(formData), formname: this.formname},\n                done: this.handleFormSubmissionResponse.bind(this, formData),\n                fail: this.handleFormSubmissionFailure.bind(this, formData)\n            }]);\n        };\n\n        /**\n         * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n         *\n         * @method submitForm\n         * @param {Event} e Form submission event.\n         * @private\n         */\n        TheForm.prototype.submitForm = function(e) {\n            e.preventDefault();\n            this.modal.getRoot().find('form').submit();\n        };\n\n        return /** @alias module:mod_minilesson/modalformhelper */ {\n            // Public variables and functions.\n            /**\n             * Attach event listeners to initialise this module.\n             *\n             * @method init\n             * @param {string} selector The CSS selector used to find nodes that will trigger this module.\n             * @param {int} contextid The contextid for the course.\n             * @param {function} callback The callback.\n             * @return {Promise}\n             */\n            init: function(selector, contextid, callback) {\n                return new TheForm(selector, contextid, callback);\n            }\n        };\n    });"],"file":"modalformhelper.min.js"}