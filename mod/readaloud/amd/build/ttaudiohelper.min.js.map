{"version":3,"sources":["../src/ttaudiohelper.js"],"names":["define","$","log","wavencoder","debug","encoder","microphone","isRecording","audioContext","processor","uniqueid","config","bufferLen","numChannels","mimeType","clone","extend","init","waveHeight","therecorder","prepare_html","window","AudioContext","webkitAudioContext","onStop","onStream","onError","canvas","canvasCtx","getContext","start","that","createJavaScriptNode","createScriptProcessor","connect","destination","navigator","mediaDevices","getUserMedia","audio","video","then","gotStreamMethod","stream","update_audio","tracks","getTracks","createMediaStreamSource","sampleRate","onaudioprocess","event","encode","getBuffers","listener","createAnalyser","fftSize","bufferLength","frequencyBinCount","analyserData","Uint8Array","clearRect","width","interval","setInterval","drawWave","catch","stop","clearInterval","close","disconnect","forEach","track","finish","buffers","ch","inputBuffer","getChannelData","getByteTimeDomainData","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","slicewaveWidth","x","i","v","y","lineTo","stroke"],"mappings":"AAAAA,OAAM,+BAAC,CAAC,QAAD,CAAW,UAAX,CAAuB,4BAAvB,CAAD,CAAuD,SAAUC,CAAV,CAAaC,CAAb,CAAkBC,CAAlB,CAA8B,CACvF,aAKAD,CAAG,CAACE,KAAJ,CAAU,8BAAV,EAEA,MAAO,CACHC,OAAO,CAAE,IADN,CAEHC,UAAU,CAAE,IAFT,CAGHC,WAAW,GAHR,CAIHC,YAAY,CAAE,IAJX,CAKHC,SAAS,CAAE,IALR,CAMHC,QAAQ,CAAE,IANP,CAQHC,MAAM,CAAE,CACJC,SAAS,CAAE,IADP,CAEJC,WAAW,CAAE,CAFT,CAGJC,QAAQ,CAAE,WAHN,CARL,CAeHC,KAAK,CAAE,gBAAY,CACf,MAAOd,CAAAA,CAAC,CAACe,MAAF,IAAe,EAAf,CAAmB,IAAnB,CACV,CAjBE,CAoBHC,IAAI,CAAE,cAASC,CAAT,CAAqBR,CAArB,CAA+BS,CAA/B,CAA4C,CAE9C,KAAKD,UAAL,CAAkBA,CAAlB,CACA,KAAKR,QAAL,CAAcA,CAAd,CACA,KAAKS,WAAL,CAAkBA,CAAlB,CACA,KAAKC,YAAL,GAGAC,MAAM,CAACC,YAAP,CAAsBD,MAAM,CAACC,YAAP,EAAuBD,MAAM,CAACE,kBAEvD,CA9BE,CAgCHC,MAAM,CAAE,iBAAW,CAAE,CAhClB,CAiCHC,QAAQ,CAAE,mBAAW,CAAE,CAjCpB,CAkCHC,OAAO,CAAE,kBAAW,CAAE,CAlCnB,CAqCHN,YAAY,CAAE,uBAAU,CACpB,KAAKO,MAAL,CAAa1B,CAAC,CAAC,IAAM,KAAKS,QAAX,CAAsB,WAAvB,CAAd,CACA,KAAKkB,SAAL,CAAiB,KAAKD,MAAL,CAAY,CAAZ,EAAeE,UAAf,CAA0B,IAA1B,CACpB,CAxCE,CA0CHC,KAAK,CAAE,gBAAW,CAEd,GAAIC,CAAAA,CAAI,CAAE,IAAV,CAGA,KAAKvB,YAAL,CAAoB,GAAIc,CAAAA,YAAxB,CACA,GAAI,KAAKd,YAAL,CAAkBwB,oBAAtB,CAA4C,CACxC,KAAKvB,SAAL,CAAiB,KAAKD,YAAL,CAAkBwB,oBAAlB,CAAuC,KAAKrB,MAAL,CAAYC,SAAnD,CAA8D,KAAKD,MAAL,CAAYE,WAA1E,CAAuF,KAAKF,MAAL,CAAYE,WAAnG,CACpB,CAFD,IAEO,IAAI,KAAKL,YAAL,CAAkByB,qBAAtB,CAA6C,CAChD,KAAKxB,SAAL,CAAiB,KAAKD,YAAL,CAAkByB,qBAAlB,CAAwC,KAAKtB,MAAL,CAAYC,SAApD,CAA+D,KAAKD,MAAL,CAAYE,WAA3E,CAAwF,KAAKF,MAAL,CAAYE,WAApG,CACpB,CAFM,IAEA,CACHX,CAAG,CAACE,KAAJ,CAAU,8CAAV,CACH,CACD,KAAKK,SAAL,CAAeyB,OAAf,CAAuB,KAAK1B,YAAL,CAAkB2B,WAAzC,EA0CAC,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC,CAChCC,KAAK,GAD2B,CAEhCC,KAAK,GAF2B,CAApC,EAGGC,IAHH,CAvCqB,QAAjBC,CAAAA,eAAiB,CAASC,CAAT,CAAiB,CAClCZ,CAAI,CAACN,QAAL,CAAckB,CAAd,EACAZ,CAAI,CAACxB,WAAL,IACAwB,CAAI,CAACZ,WAAL,CAAiByB,YAAjB,CAA8B,aAA9B,KACAb,CAAI,CAACc,MAAL,CAAcF,CAAM,CAACG,SAAP,EAAd,CAIAf,CAAI,CAACzB,UAAL,CAAkByB,CAAI,CAACvB,YAAL,CAAkBuC,uBAAlB,CAA0CJ,CAA1C,CAAlB,CAIAZ,CAAI,CAACzB,UAAL,CAAgB4B,OAAhB,CAAwBH,CAAI,CAACtB,SAA7B,EACAsB,CAAI,CAAC1B,OAAL,CAAeF,CAAU,CAACY,KAAX,EAAf,CACAgB,CAAI,CAAC1B,OAAL,CAAaY,IAAb,CAAkBc,CAAI,CAACvB,YAAL,CAAkBwC,UAApC,CAAgD,CAAhD,EAGAjB,CAAI,CAACtB,SAAL,CAAewC,cAAf,CAAgC,SAASC,CAAT,CAAgB,CAC5CnB,CAAI,CAAC1B,OAAL,CAAa8C,MAAb,CAAoBpB,CAAI,CAACqB,UAAL,CAAgBF,CAAhB,CAApB,CACH,CAFD,CAIAnB,CAAI,CAACsB,QAAL,CAAgBtB,CAAI,CAACvB,YAAL,CAAkB8C,cAAlB,EAAhB,CACAvB,CAAI,CAACzB,UAAL,CAAgB4B,OAAhB,CAAwBH,CAAI,CAACsB,QAA7B,EACAtB,CAAI,CAACsB,QAAL,CAAcE,OAAd,CAAwB,IAAxB,CAEAxB,CAAI,CAACyB,YAAL,CAAoBzB,CAAI,CAACsB,QAAL,CAAcI,iBAAlC,CACA1B,CAAI,CAAC2B,YAAL,CAAoB,GAAIC,CAAAA,UAAJ,CAAe5B,CAAI,CAACyB,YAApB,CAApB,CAEAzB,CAAI,CAACH,SAAL,CAAegC,SAAf,CAAyB,CAAzB,CAA4B,CAA5B,CAAmD,CAApB,CAAA7B,CAAI,CAACJ,MAAL,CAAYkC,KAAZ,EAA/B,CAAsE,CAAhB,CAAA9B,CAAI,CAACb,UAA3D,EAEAa,CAAI,CAAC+B,QAAL,CAAgBC,WAAW,CAAC,UAAW,CACnChC,CAAI,CAACiC,QAAL,EACH,CAF0B,CAExB,GAFwB,CAI9B,CAKD,EAGyBC,KAHzB,CAG+B,KAAKvC,OAHpC,CAIH,CArGE,CAuGHwC,IAAI,CAAE,eAAW,CACbC,aAAa,CAAC,KAAKL,QAAN,CAAb,CACA,KAAKlC,SAAL,CAAegC,SAAf,CAAyB,CAAzB,CAA4B,CAA5B,CAAmD,CAApB,MAAKjC,MAAL,CAAYkC,KAAZ,EAA/B,CAAwE,CAAlB,MAAK3C,UAA3D,EACA,KAAKX,WAAL,IACA,KAAKY,WAAL,CAAiByB,YAAjB,CAA8B,aAA9B,KACA,KAAKpC,YAAL,CAAkB4D,KAAlB,GACA,KAAK3D,SAAL,CAAe4D,UAAf,GACA,KAAKxB,MAAL,CAAYyB,OAAZ,CAAoB,SAASC,CAAT,CAAe,CAACA,CAAK,CAACL,IAAN,EAAc,CAAlD,EACA,KAAK1C,MAAL,CAAY,KAAKnB,OAAL,CAAamE,MAAb,EAAZ,CACH,CAhHE,CAkHHpB,UAAU,CAAE,oBAASF,CAAT,CAAgB,CAExB,OADIuB,CAAAA,CAAO,CAAG,EACd,CAASC,CAAE,CAAG,CAAd,CAAsB,CAAL,CAAAA,CAAjB,CAAyB,EAAEA,CAA3B,CAA+B,CAC3BD,CAAO,CAACC,CAAD,CAAP,CAAcxB,CAAK,CAACyB,WAAN,CAAkBC,cAAlB,CAAiCF,CAAjC,CACjB,CACD,MAAOD,CAAAA,CACV,CAxHE,CA4HHT,QAAQ,CAAE,mBAAW,CAEjB,GAAIH,CAAAA,CAAK,CAAyB,CAAtB,MAAKlC,MAAL,CAAYkC,KAAZ,EAAZ,CACA,KAAKR,QAAL,CAAcwB,qBAAd,CAAoC,KAAKnB,YAAzC,EAEA,KAAK9B,SAAL,CAAekD,SAAf,CAA2B,OAA3B,CACA,KAAKlD,SAAL,CAAemD,QAAf,CAAwB,CAAxB,CAA2B,CAA3B,CAA8BlB,CAA9B,CAAqD,CAAhB,MAAK3C,UAA1C,EAEA,KAAKU,SAAL,CAAeoD,SAAf,CAA2B,CAA3B,CACA,KAAKpD,SAAL,CAAeqD,WAAf,CAA6B,MAA7B,CACA,KAAKrD,SAAL,CAAesD,SAAf,GAKA,OAHIC,CAAAA,CAAc,CAAGtB,CAAK,CAAG,KAAKL,YAGlC,CAFI4B,CAAC,CAAG,CAER,CAASC,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAG,KAAK7B,YAAzB,CAAuC6B,CAAC,EAAxC,CAA4C,IAEpCC,CAAAA,CAAC,CAAG,KAAK5B,YAAL,CAAkB2B,CAAlB,EAAuB,GAFS,CAGpCE,CAAC,CAAGD,CAAC,CAAG,KAAKpE,UAHuB,CAKxC,KAAU,CAAN,EAAAmE,CAAJ,EAEO,CACH,KAAKzD,SAAL,CAAe4D,MAAf,CAAsBJ,CAAtB,CAAyBG,CAAzB,CACH,CAEDH,CAAC,EAAID,CACR,CAED,KAAKvD,SAAL,CAAe4D,MAAf,CAAsB3B,CAAtB,CAA6B,KAAK3C,UAAlC,EACA,KAAKU,SAAL,CAAe6D,MAAf,EAEH,CA5JE,CAgKV,CAxKK,CAAN","sourcesContent":["define(['jquery', 'core/log', 'mod_readaloud/ttwavencoder'], function ($, log, wavencoder) {\n    \"use strict\"; // jshint ;_;\n    /*\n    This file is the engine that drives audio rec and canvas drawing. TT Recorder is the just the glory kid\n     */\n\n    log.debug('TT Audio Helper initialising');\n\n    return {\n        encoder: null,\n        microphone: null,\n        isRecording: false,\n        audioContext: null,\n        processor: null,\n        uniqueid: null,\n\n        config: {\n            bufferLen: 4096,\n            numChannels: 2,\n            mimeType: 'audio/wav'\n        },\n\n        //for making multiple instances\n        clone: function () {\n            return $.extend(true, {}, this);\n        },\n\n\n        init: function(waveHeight, uniqueid, therecorder) {\n\n            this.waveHeight = waveHeight;\n            this.uniqueid=uniqueid;\n            this.therecorder= therecorder;\n            this.prepare_html();\n\n\n            window.AudioContext = window.AudioContext || window.webkitAudioContext;\n\n        },\n\n        onStop: function() {},\n        onStream: function() {},\n        onError: function() {},\n\n\n        prepare_html: function(){\n            this.canvas =$('#' + this.uniqueid + \"_waveform\");\n            this.canvasCtx = this.canvas[0].getContext(\"2d\");\n        },\n\n        start: function() {\n\n            var that =this;\n\n            // Audio context\n            this.audioContext = new AudioContext();\n            if (this.audioContext.createJavaScriptNode) {\n                this.processor = this.audioContext.createJavaScriptNode(this.config.bufferLen, this.config.numChannels, this.config.numChannels);\n            } else if (this.audioContext.createScriptProcessor) {\n                this.processor = this.audioContext.createScriptProcessor(this.config.bufferLen, this.config.numChannels, this.config.numChannels);\n            } else {\n                log.debug('WebAudio API has no support on this browser.');\n            }\n            this.processor.connect(this.audioContext.destination);\n\n\n            var gotStreamMethod= function(stream) {\n                that.onStream(stream);\n                that.isRecording = true;\n                that.therecorder.update_audio('isRecording',true);\n                that.tracks = stream.getTracks();\n\n                // Create a MediaStreamAudioSourceNode for the microphone\n\n                that.microphone = that.audioContext.createMediaStreamSource(stream);\n\n                // Connect the AudioBufferSourceNode to the gainNode\n\n                that.microphone.connect(that.processor);\n                that.encoder = wavencoder.clone();\n                that.encoder.init(that.audioContext.sampleRate, 2);\n\n                // Give the node a function to process audio events\n                that.processor.onaudioprocess = function(event) {\n                    that.encoder.encode(that.getBuffers(event));\n                };\n\n                that.listener = that.audioContext.createAnalyser();\n                that.microphone.connect(that.listener);\n                that.listener.fftSize = 2048; // 256\n\n                that.bufferLength = that.listener.frequencyBinCount;\n                that.analyserData = new Uint8Array(that.bufferLength);\n\n                that.canvasCtx.clearRect(0, 0, that.canvas.width()*2, that.waveHeight*2);\n\n                that.interval = setInterval(function() {\n                    that.drawWave();\n                }, 100);\n\n            };\n\n\n\n            // Mic permission\n            navigator.mediaDevices.getUserMedia({\n                audio: true,\n                video: false\n            }).then(gotStreamMethod).catch(this.onError);\n        },\n\n        stop: function() {\n            clearInterval(this.interval);\n            this.canvasCtx.clearRect(0, 0, this.canvas.width()*2, this.waveHeight * 2);\n            this.isRecording = false;\n            this.therecorder.update_audio('isRecording',false);\n            this.audioContext.close();\n            this.processor.disconnect();\n            this.tracks.forEach(function(track){track.stop();});\n            this.onStop(this.encoder.finish());\n        },\n\n        getBuffers: function(event) {\n            var buffers = [];\n            for (var ch = 0; ch < 2; ++ch) {\n                buffers[ch] = event.inputBuffer.getChannelData(ch);\n            }\n            return buffers;\n        },\n\n\n\n        drawWave: function() {\n\n            var width = this.canvas.width() * 2;\n            this.listener.getByteTimeDomainData(this.analyserData);\n\n            this.canvasCtx.fillStyle = 'white';\n            this.canvasCtx.fillRect(0, 0, width, this.waveHeight*2);\n\n            this.canvasCtx.lineWidth = 5;\n            this.canvasCtx.strokeStyle = 'gray';\n            this.canvasCtx.beginPath();\n\n            var slicewaveWidth = width / this.bufferLength;\n            var x = 0;\n\n            for (var i = 0; i < this.bufferLength; i++) {\n\n                var v = this.analyserData[i] / 128.0;\n                var y = v * this.waveHeight;\n\n                if (i === 0) {\n                    // this.canvasCtx.moveTo(x, y);\n                } else {\n                    this.canvasCtx.lineTo(x, y);\n                }\n\n                x += slicewaveWidth;\n            }\n\n            this.canvasCtx.lineTo(width, this.waveHeight);\n            this.canvasCtx.stroke();\n\n        }\n    }; //end of this declaration\n\n\n});"],"file":"ttaudiohelper.min.js"}