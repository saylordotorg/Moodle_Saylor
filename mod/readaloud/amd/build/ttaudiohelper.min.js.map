{"version":3,"file":"ttaudiohelper.min.js","sources":["../src/ttaudiohelper.js"],"sourcesContent":["define(['jquery', 'core/log', 'mod_readaloud/ttwavencoder'], function ($, log, wavencoder) {\n    \"use strict\"; // jshint ;_;\n    /*\n    This file is the engine that drives audio rec and canvas drawing. TT Recorder is the just the glory kid\n     */\n\n    log.debug('TT Audio Helper initialising');\n\n    return {\n        encoder: null,\n        microphone: null,\n        isRecording: false,\n        audioContext: null,\n        processor: null,\n        uniqueid: null,\n\n        config: {\n            bufferLen: 4096,\n            numChannels: 2,\n            mimeType: 'audio/wav'\n        },\n\n        //for making multiple instances\n        clone: function () {\n            return $.extend(true, {}, this);\n        },\n\n\n        init: function(waveHeight, uniqueid, therecorder) {\n\n            this.waveHeight = waveHeight;\n            this.uniqueid=uniqueid;\n            this.therecorder= therecorder;\n            this.prepare_html();\n\n\n            window.AudioContext = window.AudioContext || window.webkitAudioContext;\n\n        },\n\n        onStop: function() {},\n        onStream: function() {},\n        onError: function() {},\n\n\n        prepare_html: function(){\n            this.canvas =$('#' + this.uniqueid + \"_waveform\");\n            this.canvasCtx = this.canvas[0].getContext(\"2d\");\n        },\n\n        start: function() {\n\n            var that =this;\n\n            // Audio context\n            this.audioContext = new AudioContext();\n            if (this.audioContext.createJavaScriptNode) {\n                this.processor = this.audioContext.createJavaScriptNode(this.config.bufferLen, this.config.numChannels, this.config.numChannels);\n            } else if (this.audioContext.createScriptProcessor) {\n                this.processor = this.audioContext.createScriptProcessor(this.config.bufferLen, this.config.numChannels, this.config.numChannels);\n            } else {\n                log.debug('WebAudio API has no support on this browser.');\n            }\n            this.processor.connect(this.audioContext.destination);\n\n\n            var gotStreamMethod= function(stream) {\n                that.onStream(stream);\n                that.isRecording = true;\n                that.therecorder.update_audio('isRecording',true);\n                that.tracks = stream.getTracks();\n\n                // Create a MediaStreamAudioSourceNode for the microphone\n\n                that.microphone = that.audioContext.createMediaStreamSource(stream);\n\n                // Connect the AudioBufferSourceNode to the gainNode\n\n                that.microphone.connect(that.processor);\n                that.encoder = wavencoder.clone();\n                that.encoder.init(that.audioContext.sampleRate, 2);\n\n                // Give the node a function to process audio events\n                that.processor.onaudioprocess = function(event) {\n                    that.encoder.encode(that.getBuffers(event));\n                };\n\n                that.listener = that.audioContext.createAnalyser();\n                that.microphone.connect(that.listener);\n                that.listener.fftSize = 2048; // 256\n\n                that.bufferLength = that.listener.frequencyBinCount;\n                that.analyserData = new Uint8Array(that.bufferLength);\n\n                that.canvasCtx.clearRect(0, 0, that.canvas.width()*2, that.waveHeight*2);\n\n                that.interval = setInterval(function() {\n                    that.drawWave();\n                }, 100);\n\n            };\n\n\n\n            // Mic permission\n            navigator.mediaDevices.getUserMedia({\n                audio: true,\n                video: false\n            }).then(gotStreamMethod).catch(this.onError);\n        },\n\n        stop: function() {\n            clearInterval(this.interval);\n            this.canvasCtx.clearRect(0, 0, this.canvas.width()*2, this.waveHeight * 2);\n            this.isRecording = false;\n            this.therecorder.update_audio('isRecording',false);\n            this.audioContext.close();\n            this.processor.disconnect();\n            this.tracks.forEach(track => track.stop());\n            this.onStop(this.encoder.finish());\n        },\n\n        getBuffers: function(event) {\n            var buffers = [];\n            for (var ch = 0; ch < 2; ++ch)\n                buffers[ch] = event.inputBuffer.getChannelData(ch);\n            return buffers;\n        },\n\n\n\n        drawWave: function() {\n\n            var width = this.canvas.width() * 2;\n            this.listener.getByteTimeDomainData(this.analyserData);\n\n            this.canvasCtx.fillStyle = 'white';\n            this.canvasCtx.fillRect(0, 0, width, this.waveHeight*2);\n\n            this.canvasCtx.lineWidth = 5;\n            this.canvasCtx.strokeStyle = 'gray';\n            this.canvasCtx.beginPath();\n\n            var slicewaveWidth = width / this.bufferLength;\n            var x = 0;\n\n            for (var i = 0; i < this.bufferLength; i++) {\n\n                var v = this.analyserData[i] / 128.0;\n                var y = v * this.waveHeight;\n\n                if (i === 0) {\n                    // this.canvasCtx.moveTo(x, y);\n                } else {\n                    this.canvasCtx.lineTo(x, y);\n                }\n\n                x += slicewaveWidth;\n            }\n\n            this.canvasCtx.lineTo(width, this.waveHeight);\n            this.canvasCtx.stroke();\n\n        }\n    }; //end of this declaration\n\n\n});"],"names":["define","$","log","wavencoder","debug","encoder","microphone","isRecording","audioContext","processor","uniqueid","config","bufferLen","numChannels","mimeType","clone","extend","this","init","waveHeight","therecorder","prepare_html","window","AudioContext","webkitAudioContext","onStop","onStream","onError","canvas","canvasCtx","getContext","start","that","createJavaScriptNode","createScriptProcessor","connect","destination","navigator","mediaDevices","getUserMedia","audio","video","then","stream","update_audio","tracks","getTracks","createMediaStreamSource","sampleRate","onaudioprocess","event","encode","getBuffers","listener","createAnalyser","fftSize","bufferLength","frequencyBinCount","analyserData","Uint8Array","clearRect","width","interval","setInterval","drawWave","catch","stop","clearInterval","close","disconnect","forEach","track","finish","buffers","ch","inputBuffer","getChannelData","getByteTimeDomainData","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","slicewaveWidth","x","i","y","lineTo","stroke"],"mappings":"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"}