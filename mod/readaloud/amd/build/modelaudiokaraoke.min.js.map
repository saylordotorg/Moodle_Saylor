{"version":3,"sources":["../src/modelaudiokaraoke.js"],"names":["define","$","log","def","debug","controls","breaks","endwordnumber","currentstartbreak","modeling","cd","audioplayerclass","wordplayerclass","wordclass","spaceclass","endspaceclass","passagecontainer","activesentence","stopbutton","playbutton","init","opts","JSON","parse","set_breaks","register_controls","eachword","length","register_events","sort_breaks","number_breaks","sort","a","b","audiotime","that","i","breaknumber","pause_audio","audioplayer","pause","play_audio","play","get_audio_time","currentTime","set_audio_time","newtime","fetch_audio_url","attr","eachspace","eachwordorspace","aplayer","on","wordnumber","parseInt","nearest_start_break","ended","removeClass","onended","onpause","ontimeupdate","timeupdate","startbreak","nextbreak","islastbreak","finishedsentence","text","previousstartbreak","thewordnumber","addClass","on_reach_audio_break","sentence","oldbreak","newbreak"],"mappings":"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","sourcesContent":["define(['jquery', 'core/log', 'mod_readaloud/definitions'], function($, log, def) {\n  \"use strict\"; // jshint ;_;\n  /*\n  This file runs preview and shadow and L-and-R modes, highlighting text as the player reaches it.\n   */\n\n  log.debug('Model Audio Karaoke: initialising');\n\n  return {\n    controls: {},\n    breaks: [],\n    endwordnumber: 0,\n    currentstartbreak: false,\n    modeling: false,\n\n    //class definitions\n    cd: {\n      audioplayerclass: def.audioplayerclass,\n      wordplayerclass: def.wordplayerclass,\n      wordclass: def.wordclass,\n      spaceclass: def.spaceclass,\n      endspaceclass: def.endspaceclass,\n      passagecontainer: def.passagecontainer,\n      activesentence: def.activesentence,\n      stopbutton: 'mod_readaloud_button_stop',\n      playbutton: 'mod_readaloud_button_play'\n    },\n\n    //init the module\n    init: function(opts) {\n      if (opts.breaks) {\n        var breaks = JSON.parse(opts.breaks);\n        this.set_breaks(breaks);\n      }\n      if (opts.modeling) {\n        this.modeling = true;\n      }\n      if (opts.audioplayerclass) {\n        this.cd.audioplayerclass = opts.audioplayerclass;\n      }\n\n      //register the controls\n      this.register_controls();\n\n      //register the end word number\n      this.endwordnumber = this.controls.eachword.length;\n\n      //register the events\n      this.register_events();\n    },\n\n    set_breaks: function(breaks) {\n      this.breaks = breaks;\n      this.sort_breaks();\n      this.number_breaks();\n    },\n\n    sort_breaks: function() {\n      this.breaks.sort(function(a, b) {\n        return a.audiotime - b.audiotime;\n      });\n    },\n\n    number_breaks: function(){\n      var that=this;\n        for (var i = 0; i < that.breaks.length; i++) {\n           that.breaks[i].breaknumber=i+1;\n        }\n    },\n\n    pause_audio: function() {\n      this.controls.audioplayer[0].pause();\n    },\n\n    play_audio: function() {\n      this.controls.audioplayer[0].play();\n    },\n\n    get_audio_time: function() {\n      return this.controls.audioplayer[0].currentTime;\n    },\n\n    set_audio_time: function(newtime) {\n      this.controls.audioplayer[0].currentTime=newtime;\n    },\n\n    fetch_audio_url: function() {\n      return this.controls.audioplayer.attr('src');\n    },\n\n    //load all the controls so we do not have to do it later\n    register_controls: function() {\n      this.controls.audioplayer = $('#' + this.cd.audioplayerclass);\n      this.controls.eachword = $('.' + this.cd.wordclass);\n      this.controls.eachspace = $('.' + this.cd.spaceclass);\n      this.controls.eachwordorspace = $('.' + this.cd.spaceclass + ',.' + this.cd.wordclass);\n      this.controls.passagecontainer = $(\".\" + this.cd.passagecontainer);\n      this.controls.stopbutton = $('#' + this.cd.stopbutton);\n      this.controls.playbutton = $('#' + this.cd.playbutton);\n    },\n\n    //attach the various event handlers we need\n    register_events: function() {\n      var that = this;\n\n      // Get the audio element\n      var aplayer = this.controls.audioplayer[0];\n\n      this.controls.playbutton.on('click', function() {\n        aplayer.play();\n      });\n\n      this.controls.stopbutton.on('click', function() {\n        aplayer.pause();\n        aplayer.currentTime=0;\n      });\n\n      //if we are not modeling we want to jump to the clicked location\n      //if we are modeling the meaning of a click is to place a marker, so we do not want to jump\n      this.controls.eachwordorspace.on('click', function() {\n        if (!that.modeling) {\n          var wordnumber = parseInt($(this).attr('data-wordnumber'));\n          var nearest_start_break = false;\n          for (var i = 0; i < that.breaks.length; i++) {\n            if (that.breaks[i].wordnumber < wordnumber) {\n              nearest_start_break = that.breaks[i];\n            } else {\n              //exit the loop;\n              break;\n            }\n          }\n          if (!nearest_start_break) {\n            //start from beginning OR do nothing\n          } else {\n            aplayer.pause();\n            aplayer.currentTime = nearest_start_break.audiotime;\n            aplayer.play();\n          }\n        } //end of if not modeling\n      }); //end of eachwordorspace\n\n\n      var timeupdate = function() {\n        var currentTime = aplayer.currentTime;\n        var startbreak = false;\n        var nextbreak = false;\n        for (var i = 0; i < that.breaks.length; i++) {\n\n          //if this is the last marked break (ie flow till end)\n          if (currentTime >= that.breaks[i].audiotime && i + 1 === that.breaks.length) {\n            startbreak = that.breaks[i];\n            nextbreak = {\n              wordnumber: that.endwordnumber + 1,\n              audiotime: 0\n            };\n            //if its just between two breaks (yay)\n          } else if (currentTime >= that.breaks[i].audiotime && currentTime < that.breaks[i + 1].audiotime) {\n            startbreak = that.breaks[i];\n            nextbreak = that.breaks[i + 1];\n            break;\n            //this is the first section\n          } else if (i === 0 && currentTime < that.breaks[i].audiotime && currentTime > 0) {\n            startbreak = {\n              wordnumber: 0,\n              audiotime: 0,\n              breaknumber: 0,\n            };\n            nextbreak = that.breaks[i];\n\n          }\n        }\n        //if the current break changed since last time, we go in here\n        // (on first time through we want to flag  \"changed\" so that is why a false current startbreak goes to \"changed\"\n        //in the special case that we reached the end of the passage we need to raise the eevent\n        var islastbreak = aplayer.ended && nextbreak.audiotime===0;\n        if (that.currentstartbreak === false || startbreak.wordnumber !== that.currentstartbreak.wordnumber || islastbreak) {\n          var finishedsentence = $('.' + that.cd.activesentence).text();\n          that.previousstartbreak = that.currentstartbreak;\n          that.currentstartbreak = startbreak;\n          that.controls.eachword.removeClass(that.cd.activesentence);\n          that.controls.eachspace.removeClass(that.cd.activesentence);\n          if (startbreak !== false && nextbreak !== false) {\n            for (var thewordnumber = startbreak.wordnumber + 1; thewordnumber <= nextbreak.wordnumber; thewordnumber++) {\n              $('#' + that.cd.spaceclass + '_' + thewordnumber).addClass((that.cd.activesentence));\n              $('#' + that.cd.wordclass + '_' + thewordnumber).addClass((that.cd.activesentence));\n            }\n          }\n          that.on_reach_audio_break(finishedsentence, that.previousstartbreak, that.currentstartbreak, that.breaks);\n        }\n      };\n\n      //Player events (onended, onpause, ontimeupdate)\n      var ended = function() {\n        that.controls.eachword.removeClass(that.cd.activesentence);\n        that.controls.eachspace.removeClass(that.cd.activesentence);\n        that.currentstartbreak = false;\n      };\n\n\n      aplayer.onended = ended;\n      aplayer.onpause = ended;\n      aplayer.ontimeupdate = timeupdate;\n    }, //end of register events\n\n\n    on_reach_audio_break: function(sentence, oldbreak, newbreak, breaks) {\n      log.debug(sentence);\n      log.debug(oldbreak);\n      log.debug(newbreak);\n    }\n\n  }; //end of return value\n});"],"file":"modelaudiokaraoke.min.js"}