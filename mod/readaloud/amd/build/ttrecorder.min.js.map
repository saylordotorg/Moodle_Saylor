{"version":3,"sources":["../src/ttrecorder.js"],"names":["define","$","log","audioHelper","notification","browserRec","debug","waveHeight","audio","stream","blob","dataURI","start","end","isRecording","isRecognizing","transcript","submitting","owner","controls","uniqueid","audio_updated","maxTime","passagehash","region","asrurl","lang","browserrec","usebrowserrec","currentTime","stt_guided","clone","extend","init","opts","that","callback","shadow","prepare_html","recordercontainer","show","register_events","on_gotstream","update_audio","interval","setInterval","audiohelper","stop","on_error","error","name","alert","on_stopped","clearInterval","newaudio","URL","createObjectURL","Date","length","Math","round","deepSpeech2","response","data","result","gotRecognition","trim","will_work_ok","onerror","onend","onstart","onfinalspeechcapture","speechtext","onError","onStop","onStream","recorderbutton","newprops","val","theprop","click","toggleRecording","keypress","show_recorder_pointer","css","html","recordBtnContent","type","capturedspeech","cleanWord","word","replace","toLowerCase","message","bodyFormData","FormData","blobname","floor","random","append","M","cfg","wwwroot","oReq","XMLHttpRequest","open","onUploadProgress","onload","status","JSON","parse","send","err"],"mappings":"AAAAA,OAAM,4BAAC,CAAC,QAAD,CAAW,UAAX,CAAuB,6BAAvB,CAAsD,mBAAtD,CAA0E,4BAA1E,CAAD,CACF,SAAUC,CAAV,CAAaC,CAAb,CAAkBC,CAAlB,CAA+BC,CAA/B,CAA6CC,CAA7C,CAAyD,CACrD,aAKAH,CAAG,CAACI,KAAJ,CAAU,2BAAV,EAEA,MAAO,CACHC,UAAU,CAAE,EADT,CAEHC,KAAK,CAAE,CACHC,MAAM,CAAE,IADL,CAEHC,IAAI,CAAE,IAFH,CAGHC,OAAO,CAAE,IAHN,CAIHC,KAAK,CAAE,IAJJ,CAKHC,GAAG,CAAE,IALF,CAMHC,WAAW,GANR,CAOHC,aAAa,GAPV,CAQHC,UAAU,CAAE,IART,CAFJ,CAYHC,UAAU,GAZP,CAaHC,KAAK,CAAE,EAbJ,CAcHC,QAAQ,CAAE,EAdP,CAeHC,QAAQ,CAAE,IAfP,CAgBHC,aAAa,CAAE,IAhBZ,CAiBHC,OAAO,CAAE,IAjBN,CAkBHC,WAAW,CAAE,IAlBV,CAmBHC,MAAM,CAAE,IAnBL,CAoBHC,MAAM,CAAE,IApBL,CAqBHC,IAAI,CAAE,IArBH,CAsBHC,UAAU,CAAE,IAtBT,CAuBHC,aAAa,GAvBV,CAwBHC,WAAW,CAAE,CAxBV,CAyBHC,UAAU,GAzBP,CA4BHC,KAAK,CAAE,gBAAY,CACf,MAAO9B,CAAAA,CAAC,CAAC+B,MAAF,IAAe,EAAf,CAAmB,IAAnB,CACV,CA9BE,CAgCHC,IAAI,CAAE,cAASC,CAAT,CAAc,CAEhB,GAAIC,CAAAA,CAAI,CAAG,IAAX,CAEA,KAAKf,QAAL,CAAcc,CAAI,SAAlB,CACA,KAAKE,QAAL,CAAcF,CAAI,SAAlB,CACA,KAAKJ,UAAL,CAAkBI,CAAI,WAAJ,CAAqBA,CAAI,WAAzB,GAAlB,CACA,KAAKG,MAAL,CAAcH,CAAI,OAAlB,CACA,KAAKI,YAAL,GACA,KAAKnB,QAAL,CAAcoB,iBAAd,CAAgCC,IAAhC,GACA,KAAKC,eAAL,GAVgB,GAaZC,CAAAA,CAAY,CAAG,SAASjC,CAAT,CAAiB,CAGhC0B,CAAI,CAACQ,YAAL,CADa,CAAClC,MAAM,CAAEA,CAAT,CAAiBK,WAAW,GAA5B,CACb,EACAqB,CAAI,CAACN,WAAL,CAAmB,CAAnB,CAEAM,CAAI,CAACS,QAAL,CAAgBC,WAAW,CAAC,UAAW,CACnC,GAAIV,CAAI,CAACN,WAAL,CAAmBM,CAAI,CAACb,OAA5B,CAAqC,CACjCa,CAAI,CAACN,WAAL,EAAoB,EACvB,CAFD,IAEO,CACHM,CAAI,CAACQ,YAAL,CAAkB,eAAlB,KAEAR,CAAI,CAACW,WAAL,CAAiBC,IAAjB,EACH,CACJ,CAR0B,CAQxB,EARwB,CAU9B,CA7Be,CA+BZC,CAAQ,CAAG,SAASC,CAAT,CAAgB,CAC3B,OAAQA,CAAK,CAACC,IAAd,EACI,IAAK,uBAAL,CACA,IAAK,iBAAL,CACI9C,CAAY,CAAC+C,KAAb,CAAmB,OAAnB,CAA2B,yCAA3B,CAAsE,IAAtE,EACA,MACJ,IAAK,sBAAL,CACA,IAAK,eAAL,CACI/C,CAAY,CAAC+C,KAAb,CAAmB,OAAnB,CAA2B,yBAA3B,CAAsD,IAAtD,EACA,MACJ,QAGIjD,CAAG,CAACI,KAAJ,CAAU,OAAV,CAAmB2C,CAAK,CAACC,IAAzB,EAZR,CAcH,CA9Ce,CAgDZE,CAAU,CAAG,SAAS1C,CAAT,CAAe,CAC5B2C,aAAa,CAAClB,CAAI,CAACS,QAAN,CAAb,CAGA,GAAIU,CAAAA,CAAQ,CAAG,CACX5C,IAAI,CAAEA,CADK,CAEXC,OAAO,CAAE4C,GAAG,CAACC,eAAJ,CAAoB9C,CAApB,CAFE,CAGXG,GAAG,CAAE,GAAI4C,CAAAA,IAHE,CAIX3C,WAAW,GAJA,CAKX4C,MAAM,CAAEC,IAAI,CAACC,KAAL,CAAW,CAACzB,CAAI,CAAC3B,KAAL,CAAWK,GAAX,CAAiBsB,CAAI,CAAC3B,KAAL,CAAWI,KAA7B,EAAsC,GAAjD,CALG,CAAf,CAOAuB,CAAI,CAACQ,YAAL,CAAkBW,CAAlB,EAEAnB,CAAI,CAAC0B,WAAL,CAAiB1B,CAAI,CAAC3B,KAAL,CAAWE,IAA5B,CAAkC,SAASoD,CAAT,CAAkB,CAChD5D,CAAG,CAACI,KAAJ,CAAUwD,CAAV,EACA3B,CAAI,CAACQ,YAAL,CAAkB,eAAlB,KACA,GAA0B,SAAvB,GAAAmB,CAAQ,CAACC,IAAT,CAAcC,MAAd,EAAoCF,CAAQ,CAACC,IAAT,CAAc/C,UAArD,CAAgE,CAC5DmB,CAAI,CAAC8B,cAAL,CAAoBH,CAAQ,CAACC,IAAT,CAAc/C,UAAd,CAAyBkD,IAAzB,EAApB,CACH,CAFD,IAEO,CACH9D,CAAY,CAAC+C,KAAb,CAAmB,aAAnB,CAAiC,qCAAjC,CAAwE,IAAxE,CACH,CACJ,CARD,CAUH,CAvEe,CA6EhB,GAAG9C,CAAU,CAAC8D,YAAX,IAA6B,CAAE,KAAKrC,UAAvC,CAAkD,CAE9C5B,CAAG,CAACI,KAAJ,CAAU,mBAAV,EACA,KAAKqB,UAAL,CAAkBtB,CAAU,CAAC0B,KAAX,EAAlB,CACA,KAAKJ,UAAL,CAAgBM,IAAhB,CAAqB,KAAKP,IAA1B,CAA+B,KAAKnB,UAApC,CAA+C,KAAKa,QAApD,EACA,KAAKQ,aAAL,IAGAO,CAAI,CAACR,UAAL,CAAgByC,OAAhB,CAA0BpB,CAA1B,CACAb,CAAI,CAACR,UAAL,CAAgB0C,KAAhB,CAAwB,UAAU,CAEjC,CAFD,CAGAlC,CAAI,CAACR,UAAL,CAAgB2C,OAAhB,CAA0B,UAAU,CAEnC,CAFD,CAGAnC,CAAI,CAACR,UAAL,CAAgB4C,oBAAhB,CAAqC,SAASC,CAAT,CAAoB,CACrDrC,CAAI,CAAC8B,cAAL,CAAoBO,CAApB,EACArC,CAAI,CAACQ,YAAL,CAAkB,aAAlB,KACAR,CAAI,CAACQ,YAAL,CAAkB,eAAlB,IACH,CAGJ,CAtBD,IAsBM,CAEFzC,CAAG,CAACI,KAAJ,CAAU,cAAV,EACA,KAAKwC,WAAL,CAAoB3C,CAAW,CAAC4B,KAAZ,EAApB,CACA,KAAKe,WAAL,CAAiBb,IAAjB,CAAsB,KAAK1B,UAA3B,CAAsC,KAAKa,QAA3C,CAAoD,IAApD,EAEAe,CAAI,CAACW,WAAL,CAAiB2B,OAAjB,CAA2BzB,CAA3B,CACAb,CAAI,CAACW,WAAL,CAAiB4B,MAAjB,CAA0BtB,CAA1B,CACAjB,CAAI,CAACW,WAAL,CAAiB6B,QAAjB,CAA4BjC,CAE/B,CAEJ,CA/IE,CAiJHJ,YAAY,CAAE,uBAAU,CACpB,KAAKnB,QAAL,CAAcoB,iBAAd,CAAiCtC,CAAC,CAAC,oBAAsB,KAAKmB,QAA5B,CAAlC,CACA,KAAKD,QAAL,CAAcyD,cAAd,CAA+B3E,CAAC,CAAC,UAAY,KAAKmB,QAAjB,CAA4B,cAA7B,CAAhC,CACA,KAAKG,WAAL,CAAkB,KAAKJ,QAAL,CAAcyD,cAAd,CAA6Bb,IAA7B,CAAkC,aAAlC,CAAlB,CACA,KAAKvC,MAAL,CAAY,KAAKL,QAAL,CAAcyD,cAAd,CAA6Bb,IAA7B,CAAkC,QAAlC,CAAZ,CACA,KAAKtC,MAAL,CAAY,KAAKN,QAAL,CAAcyD,cAAd,CAA6Bb,IAA7B,CAAkC,QAAlC,CAAZ,CACA,KAAKrC,IAAL,CAAW,KAAKP,QAAL,CAAcyD,cAAd,CAA6Bb,IAA7B,CAAkC,MAAlC,CAAX,CACA,KAAKzC,OAAL,CAAa,KAAKH,QAAL,CAAcyD,cAAd,CAA6Bb,IAA7B,CAAkC,SAAlC,CAAb,CACA,KAAKxD,UAAL,CAAgB,KAAKY,QAAL,CAAcyD,cAAd,CAA6Bb,IAA7B,CAAkC,YAAlC,CACnB,CA1JE,CA4JHpB,YAAY,CAAE,sBAASkC,CAAT,CAAkBC,CAAlB,CAAsB,CAChC,GAAwB,QAApB,QAAOD,CAAAA,CAAX,CAAkC,CAC9B3E,CAAG,CAACI,KAAJ,CAAU,gBAAkBuE,CAAlB,CAA6B,GAA7B,CAAmCC,CAA7C,EACA,GAAI,KAAKtE,KAAL,CAAWqE,CAAX,IAAyBC,CAA7B,CAAkC,CAC9B,KAAKtE,KAAL,CAAWqE,CAAX,EAAuBC,CAAvB,CACA,KAAKzD,aAAL,EACH,CACJ,CAND,IAMK,CACD,IAAK,GAAI0D,CAAAA,CAAT,GAAoBF,CAAAA,CAApB,CAA8B,CAC1B,KAAKrE,KAAL,CAAWuE,CAAX,EAAsBF,CAAQ,CAACE,CAAD,CAA9B,CACA7E,CAAG,CAACI,KAAJ,CAAU,gBAAkByE,CAAlB,CAA4B,GAA5B,CAAkCF,CAAQ,CAACE,CAAD,CAApD,CACH,CACD,KAAK1D,aAAL,EACH,CACJ,CA1KE,CA4KHoB,eAAe,CAAE,0BAAU,CACvB,GAAIN,CAAAA,CAAI,CAAG,IAAX,CAEA,KAAKhB,QAAL,CAAcoB,iBAAd,CAAgCyC,KAAhC,CAAsC,UAAU,CAC5C7C,CAAI,CAAC8C,eAAL,EACH,CAFD,EAIA,KAAK9D,QAAL,CAAcoB,iBAAd,CAAgC2C,QAAhC,CAAyC,UAAU,CAC/C/C,CAAI,CAAC8C,eAAL,EACH,CAFD,EAIA,KAAK5D,aAAL,CAAmB,UAAW,CAE1B,GAAIc,CAAI,CAAC3B,KAAL,CAAWO,aAAf,CAA8B,CAC1BoB,CAAI,CAACgD,qBAAL,CAA2B,MAA3B,CACH,CAFD,IAEO,CACHhD,CAAI,CAACgD,qBAAL,CAA2B,MAA3B,CACH,CAED,GAAGhD,CAAI,CAAC3B,KAAL,CAAWO,aAAX,EAA4BoB,CAAI,CAAC3B,KAAL,CAAWM,WAA1C,CAAwD,CACpD,KAAKK,QAAL,CAAcyD,cAAd,CAA6BQ,GAA7B,CAAiC,YAAjC,CAA+C,MAA/C,CACH,CAFD,IAEK,CACD,KAAKjE,QAAL,CAAcyD,cAAd,CAA6BQ,GAA7B,CAAiC,YAAjC,CAA+C,OAA/C,CACH,CAGDjD,CAAI,CAAChB,QAAL,CAAcyD,cAAd,CAA6BS,IAA7B,CAAkClD,CAAI,CAACmD,gBAAL,EAAlC,CACH,CAEJ,CAzME,CA2MHH,qBAAqB,CAAE,+BAAS3C,CAAT,CAAc,CACjC,GAAGA,CAAH,CAAS,CACL,KAAKrB,QAAL,CAAcyD,cAAd,CAA6BQ,GAA7B,CAAiC,gBAAjC,CAAmD,MAAnD,CACH,CAFD,IAEK,CACD,KAAKjE,QAAL,CAAcyD,cAAd,CAA6BQ,GAA7B,CAAiC,gBAAjC,CAAmD,MAAnD,CACH,CAEJ,CAlNE,CAqNHnB,cAAc,CAAC,wBAASjD,CAAT,CAAoB,CAC/Bd,CAAG,CAACI,KAAJ,CAAU,cAAgBU,CAA1B,EAKA,KAAKoB,QAAL,CAJY,CACJmD,IADI,CACC,QADD,CAEJC,cAFI,CAEaxE,CAFb,CAIZ,CACH,CA5NE,CA8NHyE,SAAS,CAAE,mBAASC,CAAT,CAAe,CACtB,MAAOA,CAAAA,CAAI,CAACC,OAAL,CAAa,iDAAb,CAA+D,EAA/D,EAAmEC,WAAnE,EACV,CAhOE,CAkOHN,gBAAgB,CAAE,2BAAW,CAEzB,GAAG,CAAC,KAAK9E,KAAL,CAAWO,aAAf,CAA6B,CAEzB,GAAI,KAAKP,KAAL,CAAWM,WAAf,CAA4B,CACxB,MAAO,0BACV,CAFD,IAEO,CACH,MAAO,gCACV,CAEJ,CARD,IAQO,CACH,MAAO,qCACV,CACJ,CA/OE,CAgPHmE,eAAe,CAAE,0BAAW,CACxB,GAAI9C,CAAAA,CAAI,CAAE,IAAV,CAGA,GAAI,KAAK3B,KAAL,CAAWO,aAAf,CAA8B,CACxB,MACL,CAGD,GAAI,KAAKP,KAAL,CAAWM,WAAf,CAA4B,CAExB,GAAG,KAAKc,aAAR,CAAsB,CAClByB,aAAa,CAAClB,CAAI,CAACS,QAAN,CAAb,CACAT,CAAI,CAACQ,YAAL,CAAkB,aAAlB,KACAR,CAAI,CAACQ,YAAL,CAAkB,eAAlB,KACA,KAAKhB,UAAL,CAAgBoB,IAAhB,EAGH,CAPD,IAOK,CACD,KAAKJ,YAAL,CAAkB,eAAlB,KACA,KAAKG,WAAL,CAAiBC,IAAjB,EACH,CAGD7C,CAAG,CAACI,KAAJ,CAAU,oBAAV,EACA,GAAIuF,CAAAA,CAAO,CAAC,CACJN,IADI,CACC,kBADD,CAAZ,CAEApD,CAAI,CAACC,QAAL,CAAcyD,CAAd,CAGH,CArBD,IAqBO,CAGH,GAAG,KAAKjE,aAAR,CAAsB,CAClB,KAAKe,YAAL,CAAkB,aAAlB,KACA,KAAKhB,UAAL,CAAgBf,KAAhB,GACAuB,CAAI,CAACN,WAAL,CAAmB,CAAnB,CACA,KAAKe,QAAL,CAAgBC,WAAW,CAAC,UAAW,CACnC,GAAIV,CAAI,CAACN,WAAL,CAAmBM,CAAI,CAACb,OAA5B,CAAqC,CACjCa,CAAI,CAACN,WAAL,EAAoB,EACvB,CAFD,IAEO,CACHM,CAAI,CAACQ,YAAL,CAAkB,aAAlB,KACAR,CAAI,CAACQ,YAAL,CAAkB,eAAlB,KACAU,aAAa,CAAClB,CAAI,CAACS,QAAN,CAAb,CACAT,CAAI,CAACR,UAAL,CAAgBoB,IAAhB,EACH,CACJ,CAT0B,CASxB,EATwB,CAY9B,CAhBD,IAgBM,CACF,GAAIO,CAAAA,CAAQ,CAAG,CACX7C,MAAM,CAAE,IADG,CAEXC,IAAI,CAAE,IAFK,CAGXC,OAAO,CAAE,IAHE,CAIXC,KAAK,CAAE,GAAI6C,CAAAA,IAJA,CAKX5C,GAAG,CAAE,IALM,CAMXC,WAAW,GANA,CAOXC,aAAa,GAPF,CAQXC,UAAU,CAAE,IARD,CAAf,CAUA,KAAK2B,YAAL,CAAkBW,CAAlB,EACA,KAAKR,WAAL,CAAiBlC,KAAjB,EACH,CAGDV,CAAG,CAACI,KAAJ,CAAU,oBAAV,EACA,GAAIuF,CAAAA,CAAO,CAAC,CACJN,IADI,CACC,kBADD,CAAZ,CAEApD,CAAI,CAACC,QAAL,CAAcyD,CAAd,CACH,CACJ,CAtTE,CAyTHhC,WAAW,CAAE,qBAASnD,CAAT,CAAe0B,CAAf,CAAyB,IAC9B0D,CAAAA,CAAY,CAAG,GAAIC,CAAAA,QADW,CAE9BC,CAAQ,CAAG,KAAK5E,QAAL,CAAgBuC,IAAI,CAACsC,KAAL,CAA2B,GAAhB,CAAAtC,IAAI,CAACuC,MAAL,EAAX,CAAhB,CAAmD,MAFhC,CAGlCJ,CAAY,CAACK,MAAb,CAAoB,WAApB,CAAiCzF,CAAjC,CAAuCsF,CAAvC,EACAF,CAAY,CAACK,MAAb,CAAoB,QAApB,CAA8B,KAAK5E,WAAnC,EACAuE,CAAY,CAACK,MAAb,CAAoB,MAApB,CAA4B,KAAKzE,IAAjC,EACAoE,CAAY,CAACK,MAAb,CAAoB,SAApB,CAA+BC,CAAC,CAACC,GAAF,CAAMC,OAArC,EACA,GAAG,KAAKxE,UAAR,CAAoB,CAChBgE,CAAY,CAACK,MAAb,CAAoB,YAApB,CAAkC,OAAlC,CACH,CAFD,IAEK,CACDL,CAAY,CAACK,MAAb,CAAoB,YAApB,CAAkC,MAAlC,CACH,CAED,GAAII,CAAAA,CAAI,CAAG,GAAIC,CAAAA,cAAf,CACAD,CAAI,CAACE,IAAL,CAAU,MAAV,CAAkB,KAAKhF,MAAvB,KACA8E,CAAI,CAACG,gBAAL,CAAuB,UAAwB,CAAE,CAAjD,CACAH,CAAI,CAACI,MAAL,CAAc,UAAiB,CAC3B,GAAoB,GAAhB,GAAAJ,CAAI,CAACK,MAAT,CAAyB,CACrBxE,CAAQ,CAACyE,IAAI,CAACC,KAAL,CAAWP,CAAI,CAACzC,QAAhB,CAAD,CACX,CAFD,IAEO,CACH1B,CAAQ,CAAC,CAAC2B,IAAI,CAAE,CAACC,MAAM,CAAE,OAAT,CAAP,CAAD,CAAR,CACA9D,CAAG,CAACI,KAAJ,CAAUiG,CAAI,CAACtD,KAAf,CACH,CACJ,CAPD,CAQA,GAAI,CACAsD,CAAI,CAACQ,IAAL,CAAUjB,CAAV,CACH,OAAMkB,CAAN,CAAU,CACP5E,CAAQ,CAAC,CAAC2B,IAAI,CAAE,CAACC,MAAM,CAAE,OAAT,CAAP,CAAD,CAAR,CACA9D,CAAG,CAACI,KAAJ,CAAU0G,CAAV,CACH,CACJ,CAvVE,CA2VV,CApWC,CAAN","sourcesContent":["define(['jquery', 'core/log', 'mod_readaloud/ttaudiohelper', 'core/notification','mod_readaloud/ttbrowserrec'],\n    function ($, log, audioHelper, notification, browserRec) {\n        \"use strict\"; // jshint ;_;\n        /*\n        *  The TT recorder\n         */\n\n        log.debug('TT Recorder: initialising');\n\n        return {\n            waveHeight: 75,\n            audio: {\n                stream: null,\n                blob: null,\n                dataURI: null,\n                start: null,\n                end: null,\n                isRecording: false,\n                isRecognizing: false,\n                transcript: null\n            },\n            submitting: false,\n            owner: '',\n            controls: {},\n            uniqueid: null,\n            audio_updated: null,\n            maxTime: 15000,\n            passagehash: null,\n            region: null,\n            asrurl: null,\n            lang: null,\n            browserrec: null,\n            usebrowserrec: false,\n            currentTime: 0,\n            stt_guided: false,\n\n            //for making multiple instances\n            clone: function () {\n                return $.extend(true, {}, this);\n            },\n\n            init: function(opts){\n\n                var that = this;\n\n                this.uniqueid=opts['uniqueid'];\n                this.callback=opts['callback'];\n                this.stt_guided = opts['stt_guided'] ? opts['stt_guided'] : false;\n                this.shadow = opts['shadow'];\n                this.prepare_html();\n                this.controls.recordercontainer.show();\n                this.register_events();\n\n                //set up events\n                var on_gotstream=  function(stream) {\n\n                    var newaudio={stream: stream, isRecording: true};\n                    that.update_audio(newaudio);\n                    that.currentTime = 0;\n\n                    that.interval = setInterval(function() {\n                        if (that.currentTime < that.maxTime) {\n                            that.currentTime += 10;\n                        } else {\n                            that.update_audio('isRecognizing',true);\n                            // vm.isRecognizing = true;\n                            that.audiohelper.stop();\n                        }\n                    }, 10);\n\n                };\n\n                var on_error = function(error) {\n                    switch (error.name) {\n                        case 'PermissionDeniedError':\n                        case 'NotAllowedError':\n                            notification.alert(\"Error\",'Please allow access to your microphone!', \"OK\");\n                            break;\n                        case 'DevicesNotFoundError':\n                        case 'NotFoundError':\n                            notification.alert(\"Error\",'No microphone detected!', \"OK\");\n                            break;\n                        default:\n                            //other errors, like from Edge can fire repeatedly so a notification is not a good idea\n                            //notification.alert(\"Error\", error.name, \"OK\");\n                            log.debug(\"Error\", error.name);\n                    }\n                };\n\n                var on_stopped = function(blob) {\n                    clearInterval(that.interval);\n\n                    //if ds recc\n                    var newaudio = {\n                        blob: blob,\n                        dataURI: URL.createObjectURL(blob),\n                        end: new Date(),\n                        isRecording: false,\n                        length: Math.round((that.audio.end - that.audio.start) / 1000),\n                    };\n                    that.update_audio(newaudio);\n\n                    that.deepSpeech2(that.audio.blob, function(response){\n                        log.debug(response);\n                        that.update_audio('isRecognizing',false);\n                        if(response.data.result===\"success\" && response.data.transcript){\n                            that.gotRecognition(response.data.transcript.trim());\n                        } else {\n                            notification.alert(\"Information\",\"We could not recognize your speech.\", \"OK\");\n                        }\n                    });\n\n                };\n\n\n\n\n                //If browser rec (Chrome Speech Rec) (and ds is optiona)\n                if(browserRec.will_work_ok() && ! this.stt_guided){\n                    //Init browserrec\n                    log.debug(\"using browser rec\");\n                    this.browserrec = browserRec.clone();\n                    this.browserrec.init(this.lang,this.waveHeight,this.uniqueid);\n                    this.usebrowserrec=true;\n\n                    //set up events\n                    that.browserrec.onerror = on_error;\n                    that.browserrec.onend = function(){\n                        //do something here\n                    };\n                    that.browserrec.onstart = function(){\n                        //do something here\n                    };\n                    that.browserrec.onfinalspeechcapture=function(speechtext){\n                        that.gotRecognition(speechtext);\n                        that.update_audio('isRecording',false);\n                        that.update_audio('isRecognizing',false);\n                    };\n\n                    //If DS rec\n                }else {\n                    //set up wav for ds rec\n                    log.debug(\"using ds rec\");\n                    this.audiohelper =  audioHelper.clone();\n                    this.audiohelper.init(this.waveHeight,this.uniqueid,this);\n\n                    that.audiohelper.onError = on_error;\n                    that.audiohelper.onStop = on_stopped;\n                    that.audiohelper.onStream = on_gotstream;\n\n                }//end of setting up recorders\n\n            },\n\n            prepare_html: function(){\n                this.controls.recordercontainer =$('#ttrec_container_' + this.uniqueid);\n                this.controls.recorderbutton = $('#ttrec_' + this.uniqueid + '_recorderdiv');\n                this.passagehash =this.controls.recorderbutton.data('passagehash');\n                this.region=this.controls.recorderbutton.data('region');\n                this.asrurl=this.controls.recorderbutton.data('asrurl');\n                this.lang =this.controls.recorderbutton.data('lang');\n                this.maxTime=this.controls.recorderbutton.data('maxtime');\n                this.waveHeight=this.controls.recorderbutton.data('waveheight');\n            },\n\n            update_audio: function(newprops,val){\n                if (typeof newprops === 'string') {\n                    log.debug('update_audio:' + newprops + ':' + val);\n                    if (this.audio[newprops] !== val) {\n                        this.audio[newprops] = val;\n                        this.audio_updated();\n                    }\n                }else{\n                    for (var theprop in newprops) {\n                        this.audio[theprop] = newprops[theprop];\n                        log.debug('update_audio:' + theprop + ':' + newprops[theprop]);\n                    }\n                    this.audio_updated();\n                }\n            },\n\n            register_events: function(){\n                var that = this;\n\n                this.controls.recordercontainer.click(function(){\n                    that.toggleRecording();\n                });\n\n                this.controls.recordercontainer.keypress(function(){\n                    that.toggleRecording();\n                });\n\n                this.audio_updated=function() {\n                    //pointer\n                    if (that.audio.isRecognizing) {\n                        that.show_recorder_pointer('none');\n                    } else {\n                        that.show_recorder_pointer('auto');\n                    }\n\n                    if(that.audio.isRecognizing || that.audio.isRecording ) {\n                        this.controls.recorderbutton.css('background', '#e52');\n                    }else{\n                        this.controls.recorderbutton.css('background', 'green');\n                    }\n\n                    //div content WHEN?\n                    that.controls.recorderbutton.html(that.recordBtnContent());\n                };\n\n            },\n\n            show_recorder_pointer: function(show){\n                if(show) {\n                    this.controls.recorderbutton.css('pointer-events', 'none');\n                }else{\n                    this.controls.recorderbutton.css('pointer-events', 'auto');\n                }\n\n            },\n\n\n            gotRecognition:function(transcript){\n                log.debug('transcript:' + transcript);\n                var message={};\n                message.type='speech';\n                message.capturedspeech = transcript;\n                //POINT\n                this.callback(message);\n            },\n\n            cleanWord: function(word) {\n                return word.replace(/['!\"#$%&\\\\'()\\*+,\\-\\.\\/:;<=>?@\\[\\\\\\]\\^_`{|}~']/g,\"\").toLowerCase();\n            },\n\n            recordBtnContent: function() {\n\n                if(!this.audio.isRecognizing){\n\n                    if (this.audio.isRecording) {\n                        return '<i class=\"fa fa-stop\">';\n                    } else {\n                        return '<i class=\"fa fa-microphone\">';\n                    }\n\n                } else {\n                    return '<i class=\"fa fa-spinner fa-spin\">';\n                }\n            },\n            toggleRecording: function() {\n                var that =this;\n\n                //If we are recognizing, then we want to discourage super click'ers\n                if (this.audio.isRecognizing) {\n                      return;\n                }\n\n                //If we are current recording\n                if (this.audio.isRecording) {\n                    //If using Browser Rec (chrome speech)\n                    if(this.usebrowserrec){\n                        clearInterval(that.interval);\n                        that.update_audio('isRecording',false);\n                        that.update_audio('isRecognizing',true);\n                        this.browserrec.stop();\n\n                        //If using DS rec\n                    }else{\n                        this.update_audio('isRecognizing',true);\n                        this.audiohelper.stop();\n                    }\n\n                    //lets notify the caller we stopped recording\n                    log.debug('recording stopped:');\n                    var message={};\n                    message.type='recordingstopped';\n                    that.callback(message);\n\n                    //If we are NOT currently recording\n                } else {\n\n                    //If using Browser Rec (chrome speech)\n                    if(this.usebrowserrec){\n                        this.update_audio('isRecording',true);\n                        this.browserrec.start();\n                        that.currentTime = 0;\n                        this.interval = setInterval(function() {\n                            if (that.currentTime < that.maxTime) {\n                                that.currentTime += 10;\n                            } else {\n                                that.update_audio('isRecording',false);\n                                that.update_audio('isRecognizing',true);\n                                clearInterval(that.interval);\n                                that.browserrec.stop();\n                            }\n                        }, 10);\n\n                        //If using DS Rec\n                    }else {\n                        var newaudio = {\n                            stream: null,\n                            blob: null,\n                            dataURI: null,\n                            start: new Date(),\n                            end: null,\n                            isRecording: false,\n                            isRecognizing:false,\n                            transcript: null\n                        };\n                        this.update_audio(newaudio);\n                        this.audiohelper.start();\n                    }\n\n                    //lets notify the caller we stopped recording\n                    log.debug('recording started:');\n                    var message={};\n                    message.type='recordingstarted';\n                    that.callback(message);\n                }\n            },\n\n\n            deepSpeech2: function(blob, callback) {\n                var bodyFormData = new FormData();\n                var blobname = this.uniqueid + Math.floor(Math.random() * 100) +  '.wav';\n                bodyFormData.append('audioFile', blob, blobname);\n                bodyFormData.append('scorer', this.passagehash);\n                bodyFormData.append('lang', this.lang);\n                bodyFormData.append('wwwroot', M.cfg.wwwroot);\n                if(this.stt_guided) {\n                    bodyFormData.append('strictmode', 'false');\n                }else{\n                    bodyFormData.append('strictmode', 'true');\n                }\n\n                var oReq = new XMLHttpRequest();\n                oReq.open(\"POST\", this.asrurl, true);\n                oReq.onUploadProgress= function(progressEvent) {};\n                oReq.onload = function(oEvent) {\n                    if (oReq.status === 200) {\n                        callback(JSON.parse(oReq.response));\n                    } else {\n                        callback({data: {result: \"error\"}});\n                        log.debug(oReq.error);\n                    }\n                };\n                try {\n                    oReq.send(bodyFormData);\n                }catch(err){\n                    callback({data: {result: \"error\"}});\n                    log.debug(err);\n                }\n            },\n\n        };//end of return value\n\n    });"],"file":"ttrecorder.min.js"}