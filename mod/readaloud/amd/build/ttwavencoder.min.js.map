{"version":3,"sources":["../src/ttwavencoder.js"],"names":["define","$","log","debug","clone","extend","init","sampleRate","numChannels","numSamples","dataViews","encode","buffer","len","length","nCh","view","DataView","ArrayBuffer","offset","i","ch","x","setInt16","Math","max","min","push","setString","str","setUint8","charCodeAt","finish","dataSize","setUint32","setUint16","unshift","blob","Blob","type","cleanup","cancel"],"mappings":"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","sourcesContent":["define(['jquery', 'core/log'], function ($, log) {\n    \"use strict\"; // jshint ;_;\n    /*\n    This file is the engine that drives audio rec and canvas drawing. TT Recorder is the just the glory kid\n     */\n\n    log.debug('TT Wav Encoder initialising');\n\n    return {\n\n\n        //for making multiple instances\n        clone: function () {\n            return $.extend(true, {}, this);\n        },\n\n        init: function(sampleRate, numChannels) {\n            this.sampleRate = sampleRate;\n            this.numChannels = numChannels;\n            this.numSamples = 0;\n            this.dataViews = [];\n        },\n\n        encode: function(buffer) {\n            //this would be an event that occurs after recorder has stopped lets just ignore it\n            if(this.dataViews===undefined){\n                return;\n            }\n\n            var len = buffer[0].length,\n                nCh = this.numChannels,\n                view = new DataView(new ArrayBuffer(len * nCh * 2)),\n                offset = 0;\n            for (var i = 0; i < len; ++i) {\n                for (var ch = 0; ch < nCh; ++ch) {\n                    var x = buffer[ch][i] * 0x7fff;\n                    view.setInt16(offset, x < 0 ? Math.max(x, -0x8000) : Math.min(x, 0x7fff), true);\n                    offset += 2;\n                }\n            }\n            this.dataViews.push(view);\n            this.numSamples += len;\n        },\n\n        setString: function(view, offset, str) {\n            var len = str.length;\n            for (var i = 0; i < len; ++i) {\n                view.setUint8(offset + i, str.charCodeAt(i));\n            }\n        },\n\n        finish: function(mimeType) {\n            var dataSize = this.numChannels * this.numSamples * 2;\n            var view = new DataView(new ArrayBuffer(44));\n            this.setString(view, 0, 'RIFF');\n            view.setUint32(4, 36 + dataSize, true);\n            this.setString(view, 8, 'WAVE');\n            this.setString(view, 12, 'fmt ');\n            view.setUint32(16, 16, true);\n            view.setUint16(20, 1, true);\n            view.setUint16(22, this.numChannels, true);\n            view.setUint32(24, this.sampleRate, true);\n            view.setUint32(28, this.sampleRate * 4, true);\n            view.setUint16(32, this.numChannels * 2, true);\n            view.setUint16(34, 16, true);\n            this.setString(view, 36, 'data');\n            view.setUint32(40, dataSize, true);\n            this.dataViews.unshift(view);\n            var blob = new Blob(this.dataViews, { type: 'audio/wav' });\n            this.cleanup();\n            return blob;\n        },\n\n        cancel: function() {\n            delete this.dataViews;\n        },\n\n        cleanup: function() {\n            this.cancel();\n        }\n\n     };//end of return value\n\n});"],"file":"ttwavencoder.min.js"}