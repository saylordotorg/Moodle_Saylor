{"version":3,"file":"progressbar.min.js","sources":["../src/progressbar.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Completion Progress block progress bar behaviour.\n *\n * @module     block_completion_progress/progressbar\n * @copyright  2020 Jonathon Fowler <fowlerj@usq.edu.au>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery'],\n    function($) {\n        /**\n         * Show progress event information for a cell.\n         * @param {Event} event\n         */\n        function showInfo(event) {\n            var cell = $(this);\n            var container = cell.closest('.block_completion_progress .barContainer');\n            var visibleinfo = container.siblings('.progressEventInfo:visible');\n            var infotoshow = container.siblings('#' + cell.data('infoRef'));\n\n            if (!visibleinfo.is(infotoshow)) {\n                visibleinfo.hide();\n                infotoshow.show();\n            }\n\n            event.preventDefault();\n        }\n\n        /**\n         * Show all progress event information (for accessibility).\n         * @param {Event} event\n         */\n        function showAllInfo(event) {\n            var initialinfo = $(this).closest('.progressEventInfo');\n\n            initialinfo.siblings('.progressEventInfo').show();\n            initialinfo.hide();\n\n            event.preventDefault();\n        }\n\n        /**\n         * Navigate to a cell's activity location.\n         */\n        function viewActivity() {\n            var cell = $(this);\n            var container = cell.closest('.block_completion_progress .barContainer');\n            var infotoshow = container.siblings('#' + cell.data('infoRef'));\n            var infolink = infotoshow.find('a.action_link');\n            document.location = infolink.prop('href');\n        }\n\n        /**\n         * Scroll the bar corresponding to the arrow clicked.\n         * @param {Event} event\n         */\n        function scrollContainer(event) {\n            var barrow = $(this).closest('.block_completion_progress .barContainer').find('.barRow');\n            var amount = event.data * barrow.prop('scrollWidth') * 0.15;\n\n            barrow.prop('scrollLeft', barrow.prop('scrollLeft') + amount);\n\n            event.preventDefault();\n        }\n\n        /**\n         * Show or hide the scroll arrows based on the visible position.\n         */\n        function checkArrows() {\n            var threshold = 10;\n            var barrow = $(this);\n            var barcontainer = barrow.closest('.block_completion_progress .barContainer');\n            var leftarrow = barcontainer.find('.left-arrow-svg');\n            var rightarrow = barcontainer.find('.right-arrow-svg');\n            var scrolled = barrow.prop('scrollLeft');\n            var scrollWidth = barrow.prop('scrollWidth') - barrow.prop('offsetWidth');\n\n            if (document.dir === 'rtl') {\n                scrolled = -scrolled;\n\n                if (scrolled > threshold) {\n                    rightarrow.css('display', 'block');\n                } else {\n                    rightarrow.css('display', 'none');\n                }\n                if (scrollWidth > threshold && scrolled < scrollWidth - threshold) {\n                    leftarrow.css('display', 'block');\n                } else {\n                    leftarrow.css('display', 'none');\n                }\n            } else {\n                if (scrolled > threshold) {\n                    leftarrow.css('display', 'block');\n                } else {\n                    leftarrow.css('display', 'none');\n                }\n                if (scrollWidth > threshold && scrolled < scrollWidth - threshold) {\n                    rightarrow.css('display', 'block');\n                } else {\n                    rightarrow.css('display', 'none');\n                }\n            }\n        }\n\n        /**\n         * Prepare scroll mode behaviour.\n         * @param {jQuery} barcontainers there could be many nodes here in overview mode\n         */\n        function setupScroll(barcontainers) {\n            var barrows = barcontainers.find('.barRow');\n\n            // On page load, place the 'now' marker in the centre of the scrolled bar\n            // and adjust which arrows should be visible.\n            $(function() {\n                var nowicons = barcontainers.find('.nowicon');\n                nowicons.each(function() {\n                    var nowicon = $(this);\n                    var barrow = nowicon.closest('.block_completion_progress .barRow');\n\n                    barrow.prop('scrollLeft', 0);\n                    barrow.prop('scrollLeft', nowicon.offset().left - barrow.offset().left -\n                        barrow.width() / 2);\n                });\n\n                barrows.each(checkArrows);\n            });\n\n            barcontainers.on('click', '.left-arrow-svg', -1, scrollContainer);\n            barcontainers.on('click', '.right-arrow-svg', 1, scrollContainer);\n\n            barrows.on('scroll', checkArrows);\n            $(window).resize(function() {\n                barrows.each(checkArrows);\n            });\n        }\n\n        /**\n         * Set up event handlers for a particular progress bar instance.\n         * @param {integer} instanceid the bar instance id\n         */\n        function initialiseBar(instanceid) {\n            var barcontainers = $('.block_completion_progress ' +\n                '.barContainer[data-instanceid=\"' + instanceid + '\"]');\n\n            // Show information elements on hover or tap.\n            barcontainers.on('touchstart mouseover', '.progressBarCell', showInfo);\n\n            // Navigate to the activity when its cell is clicked.\n            barcontainers.on('click', '.progressBarCell[data-haslink=true]', viewActivity);\n\n            // Show all information elements when the 'show all' link is clicked.\n            barcontainers.siblings('.progressEventInfo').find('.progressShowAllInfo').click(showAllInfo);\n\n            setupScroll(barcontainers);\n        }\n\n        return /** @alias module:block_completion_progress/progressbar */ {\n            /**\n             * Initialise progress bar instances.\n             * @param {array} instanceids an array of progress bar instance ids\n             */\n            init: function(instanceids) {\n                for (var i = instanceids.length - 1; i >= 0; i--) {\n                    initialiseBar(instanceids[i]);\n                }\n            },\n        };\n    });\n"],"names":["define","$","showInfo","event","cell","this","container","closest","visibleinfo","siblings","infotoshow","data","is","hide","show","preventDefault","showAllInfo","initialinfo","viewActivity","infolink","find","document","location","prop","scrollContainer","barrow","amount","checkArrows","barcontainer","leftarrow","rightarrow","scrolled","scrollWidth","dir","css","initialiseBar","instanceid","barcontainers","on","click","barrows","each","nowicon","offset","left","width","window","resize","setupScroll","init","instanceids","i","length"],"mappings":";;;;;;;AAsBAA,+CAAO,CAAC,WACJ,SAASC,YAKIC,SAASC,WACVC,KAAOH,EAAEI,MACTC,UAAYF,KAAKG,QAAQ,4CACzBC,YAAcF,UAAUG,SAAS,8BACjCC,WAAaJ,UAAUG,SAAS,IAAML,KAAKO,KAAK,YAE/CH,YAAYI,GAAGF,cAChBF,YAAYK,OACZH,WAAWI,QAGfX,MAAMY,0BAODC,YAAYb,WACbc,YAAchB,EAAEI,MAAME,QAAQ,sBAElCU,YAAYR,SAAS,sBAAsBK,OAC3CG,YAAYJ,OAEZV,MAAMY,0BAMDG,mBACDd,KAAOH,EAAEI,MAGTc,SAFYf,KAAKG,QAAQ,4CACFE,SAAS,IAAML,KAAKO,KAAK,YAC1BS,KAAK,iBAC/BC,SAASC,SAAWH,SAASI,KAAK,iBAO7BC,gBAAgBrB,WACjBsB,OAASxB,EAAEI,MAAME,QAAQ,4CAA4Ca,KAAK,WAC1EM,OAASvB,MAAMQ,KAAOc,OAAOF,KAAK,eAAiB,IAEvDE,OAAOF,KAAK,aAAcE,OAAOF,KAAK,cAAgBG,QAEtDvB,MAAMY,0BAMDY,kBAEDF,OAASxB,EAAEI,MACXuB,aAAeH,OAAOlB,QAAQ,4CAC9BsB,UAAYD,aAAaR,KAAK,mBAC9BU,WAAaF,aAAaR,KAAK,oBAC/BW,SAAWN,OAAOF,KAAK,cACvBS,YAAcP,OAAOF,KAAK,eAAiBE,OAAOF,KAAK,eAEtC,QAAjBF,SAASY,MACTF,UAAYA,UATA,GAYRD,WAAWI,IAAI,UAAW,SAE1BJ,WAAWI,IAAI,UAAW,QAE1BF,YAhBQ,IAgBmBD,SAAWC,YAhB9B,GAiBRH,UAAUK,IAAI,UAAW,SAEzBL,UAAUK,IAAI,UAAW,UAGzBH,SAtBQ,GAuBRF,UAAUK,IAAI,UAAW,SAEzBL,UAAUK,IAAI,UAAW,QAEzBF,YA3BQ,IA2BmBD,SAAWC,YA3B9B,GA4BRF,WAAWI,IAAI,UAAW,SAE1BJ,WAAWI,IAAI,UAAW,kBAyC7BC,cAAcC,gBACfC,cAAgBpC,EAAE,6DACkBmC,WAAa,MAGrDC,cAAcC,GAAG,uBAAwB,mBAAoBpC,UAG7DmC,cAAcC,GAAG,QAAS,sCAAuCpB,cAGjEmB,cAAc5B,SAAS,sBAAsBW,KAAK,wBAAwBmB,MAAMvB,sBA3C/DqB,mBACbG,QAAUH,cAAcjB,KAAK,WAIjCnB,GAAE,WACiBoC,cAAcjB,KAAK,YACzBqB,MAAK,eACNC,QAAUzC,EAAEI,MACZoB,OAASiB,QAAQnC,QAAQ,sCAE7BkB,OAAOF,KAAK,aAAc,GAC1BE,OAAOF,KAAK,aAAcmB,QAAQC,SAASC,KAAOnB,OAAOkB,SAASC,KAC9DnB,OAAOoB,QAAU,MAGzBL,QAAQC,KAAKd,gBAGjBU,cAAcC,GAAG,QAAS,mBAAoB,EAAGd,iBACjDa,cAAcC,GAAG,QAAS,mBAAoB,EAAGd,iBAEjDgB,QAAQF,GAAG,SAAUX,aACrB1B,EAAE6C,QAAQC,QAAO,WACbP,QAAQC,KAAKd,gBAqBjBqB,CAAYX,qBAGkD,CAK9DY,KAAM,SAASC,iBACN,IAAIC,EAAID,YAAYE,OAAS,EAAGD,GAAK,EAAGA,IACzChB,cAAce,YAAYC"}