var global,factory;global=window,factory=function(exports){var ALLOWED_EFFECTS=["none","copy","copyLink","copyMove","link","linkMove","move","all"],DROP_EFFECTS=["none","copy","move","link"],supportsPassive=function(){var supportsPassiveEventListeners=!1;try{var opts=Object.defineProperty({},"passive",{get:function(){supportsPassiveEventListeners=!0}});window.addEventListener("test",null,opts)}catch(e){}return supportsPassiveEventListeners}();function isDOMElement(object){return object&&object.tagName}function addDocumentListener(ev,handler,passive){void 0===passive&&(passive=!0),document.addEventListener(ev,handler,!!supportsPassive&&{passive:passive})}function removeDocumentListener(ev,handler){document.removeEventListener(ev,handler)}function onEvt(el,event,handler,capture){void 0===capture&&(capture=!1);var options=supportsPassive?{passive:!0,capture:capture}:capture;return el.addEventListener(event,handler,options),{off:function(){el.removeEventListener(event,handler,options)}}}function prepareNodeCopyAsDragImage(srcNode,dstNode){if(1===srcNode.nodeType){for(var cs=getComputedStyle(srcNode),i=0;i<cs.length;i++){var csName=cs[i];dstNode.style.setProperty(csName,cs.getPropertyValue(csName),cs.getPropertyPriority(csName))}if(dstNode.style.pointerEvents="none",dstNode.removeAttribute("id"),dstNode.removeAttribute("class"),dstNode.removeAttribute("draggable"),"CANVAS"===dstNode.nodeName){var canvasSrc=srcNode,canvasDst=dstNode,canvasSrcImgData=canvasSrc.getContext("2d").getImageData(0,0,canvasSrc.width,canvasSrc.height);canvasDst.getContext("2d").putImageData(canvasSrcImgData,0,0)}}if(srcNode.hasChildNodes())for(i=0;i<srcNode.childNodes.length;i++)prepareNodeCopyAsDragImage(srcNode.childNodes[i],dstNode.childNodes[i])}function average(array){return 0===array.length?0:array.reduce((function(s,v){return v+s}),0)/array.length}function isTouchIdentifierContainedInTouchEvent(touchEvent,touchIdentifier){for(var i=0;i<touchEvent.changedTouches.length;i++)if(touchEvent.changedTouches[i].identifier===touchIdentifier)return!0;return!1}function updateCentroidCoordinatesOfTouchesIn(coordinateProp,event,outPoint){for(var pageXs=[],pageYs=[],i=0;i<event.touches.length;i++){var touch=event.touches[i];pageXs.push(touch[coordinateProp+"X"]),pageYs.push(touch[coordinateProp+"Y"])}outPoint.x=average(pageXs),outPoint.y=average(pageYs)}var TRANSFORM_CSS_VENDOR_PREFIXES=["","-webkit-"];function translateElementToPoint(element,pnt,originalTransforms,offset,centerOnCoordinates){void 0===centerOnCoordinates&&(centerOnCoordinates=!0);var x=pnt.x,y=pnt.y;offset&&(x+=offset.x,y+=offset.y),centerOnCoordinates&&(x-=parseInt(element.offsetWidth,10)/2,y-=parseInt(element.offsetHeight,10)/2);for(var translate="translate3d("+x+"px,"+y+"px, 0)",i=0;i<TRANSFORM_CSS_VENDOR_PREFIXES.length;i++){var transformProp=TRANSFORM_CSS_VENDOR_PREFIXES[i]+"transform";element.style[transformProp]=translate+" "+originalTransforms[i]}}var DataTransfer=function(){function DataTransfer(_dataStore,_setDragImageHandler){this._dataStore=_dataStore,this._setDragImageHandler=_setDragImageHandler,this._dropEffect=DROP_EFFECTS[0]}return Object.defineProperty(DataTransfer.prototype,"dropEffect",{get:function(){return this._dropEffect},set:function(value){0!==this._dataStore.mode&&ALLOWED_EFFECTS.indexOf(value)>-1&&(this._dropEffect=value)},enumerable:!1,configurable:!0}),Object.defineProperty(DataTransfer.prototype,"types",{get:function(){if(0!==this._dataStore.mode)return Object.freeze(this._dataStore.types)},enumerable:!1,configurable:!0}),Object.defineProperty(DataTransfer.prototype,"effectAllowed",{get:function(){return this._dataStore.effectAllowed},set:function(value){2===this._dataStore.mode&&ALLOWED_EFFECTS.indexOf(value)>-1&&(this._dataStore.effectAllowed=value)},enumerable:!1,configurable:!0}),DataTransfer.prototype.setData=function(type,data){if(2===this._dataStore.mode){if(type.indexOf(" ")>-1)throw new Error("illegal arg: type contains space");this._dataStore.data[type]=data,-1===this._dataStore.types.indexOf(type)&&this._dataStore.types.push(type)}},DataTransfer.prototype.getData=function(type){if(1===this._dataStore.mode||2===this._dataStore.mode)return this._dataStore.data[type]||""},DataTransfer.prototype.clearData=function(format){if(2===this._dataStore.mode){if(format&&this._dataStore.data[format]){delete this._dataStore.data[format];var index=this._dataStore.types.indexOf(format);return void(index>-1&&this._dataStore.types.splice(index,1))}this._dataStore.data={},this._dataStore.types=[]}},DataTransfer.prototype.setDragImage=function(image,x,y){2===this._dataStore.mode&&this._setDragImageHandler(image,x,y)},DataTransfer}();function determineDropEffect(effectAllowed,sourceNode){return effectAllowed?effectAllowed===ALLOWED_EFFECTS[0]?DROP_EFFECTS[0]:0===effectAllowed.indexOf(ALLOWED_EFFECTS[1])||effectAllowed===ALLOWED_EFFECTS[7]?DROP_EFFECTS[1]:0===effectAllowed.indexOf(ALLOWED_EFFECTS[4])?DROP_EFFECTS[3]:effectAllowed===ALLOWED_EFFECTS[6]?DROP_EFFECTS[2]:DROP_EFFECTS[1]:3===sourceNode.nodeType&&"A"===sourceNode.tagName?DROP_EFFECTS[3]:DROP_EFFECTS[1]}function dispatchDragEvent(dragEvent,targetElement,touchEvent,dataStore,dataTransfer,cancelable,relatedTarget){void 0===cancelable&&(cancelable=!0),void 0===relatedTarget&&(relatedTarget=null),console.log("dnd-poly: dispatching "+dragEvent);var leaveEvt=function(targetElement,e,type,cancelable,window,dataTransfer,relatedTarget){void 0===relatedTarget&&(relatedTarget=null);var touch=e.changedTouches[0],dndEvent=new Event(type,{bubbles:!0,cancelable:cancelable});dndEvent.dataTransfer=dataTransfer,dndEvent.relatedTarget=relatedTarget,dndEvent.screenX=touch.screenX,dndEvent.screenY=touch.screenY,dndEvent.clientX=touch.clientX,dndEvent.clientY=touch.clientY,dndEvent.pageX=touch.pageX,dndEvent.pageY=touch.pageY;var targetRect=targetElement.getBoundingClientRect();return dndEvent.offsetX=dndEvent.clientX-targetRect.left,dndEvent.offsetY=dndEvent.clientY-targetRect.top,dndEvent}(targetElement,touchEvent,dragEvent,cancelable,document.defaultView,dataTransfer,relatedTarget),cancelled=!targetElement.dispatchEvent(leaveEvt);return dataStore.mode=0,cancelled}function determineDragOperation(effectAllowed,dropEffect){if(!effectAllowed||effectAllowed===ALLOWED_EFFECTS[7])return dropEffect;if(dropEffect===DROP_EFFECTS[1]){if(0===effectAllowed.indexOf(DROP_EFFECTS[1]))return DROP_EFFECTS[1]}else if(dropEffect===DROP_EFFECTS[3]){if(0===effectAllowed.indexOf(DROP_EFFECTS[3])||effectAllowed.indexOf("Link")>-1)return DROP_EFFECTS[3]}else if(dropEffect===DROP_EFFECTS[2]&&(0===effectAllowed.indexOf(DROP_EFFECTS[2])||effectAllowed.indexOf("Move")>-1))return DROP_EFFECTS[2];return DROP_EFFECTS[0]}var activeDragOperation,DragOperationController=function(){function DragOperationController(_initialEvent,_config,_sourceNode,_dragOperationEndedCb){this._initialEvent=_initialEvent,this._config=_config,this._sourceNode=_sourceNode,this._dragOperationEndedCb=_dragOperationEndedCb,this._dragOperationState=0,this._immediateUserSelection=null,this._currentDropTarget=null,console.log("dnd-poly: setting up potential drag operation.."),this._lastTouchEvent=_initialEvent,this._initialTouch=_initialEvent.changedTouches[0],this._touchMoveHandler=this._onTouchMove.bind(this),this._touchEndOrCancelHandler=this._onTouchEndOrCancel.bind(this),addDocumentListener("touchmove",this._touchMoveHandler,!1),addDocumentListener("touchend",this._touchEndOrCancelHandler,!1),addDocumentListener("touchcancel",this._touchEndOrCancelHandler,!1)}return DragOperationController.prototype._setup=function(){var _this=this;console.log("dnd-poly: starting drag and drop operation"),this._dragOperationState=1,this._currentDragOperation=DROP_EFFECTS[0],this._dragDataStore={data:{},effectAllowed:void 0,mode:3,types:[]},this._currentHotspotCoordinates={x:null,y:null},this._dragImagePageCoordinates={x:null,y:null};var dragImageSrc=this._sourceNode;if(this._dataTransfer=new DataTransfer(this._dragDataStore,(function(element,x,y){dragImageSrc=element,"number"!=typeof x&&"number"!=typeof y||(_this._dragImageOffset={x:x||0,y:y||0})})),this._dragDataStore.mode=2,this._dataTransfer.dropEffect=DROP_EFFECTS[0],dispatchDragEvent("dragstart",this._sourceNode,this._lastTouchEvent,this._dragDataStore,this._dataTransfer))return console.log("dnd-poly: dragstart cancelled"),this._dragOperationState=3,this._cleanup(),!1;updateCentroidCoordinatesOfTouchesIn("page",this._lastTouchEvent,this._dragImagePageCoordinates);var sourceNode,dragImage=this._config.dragImageSetup(dragImageSrc);if(this._dragImageTransforms=(sourceNode=dragImage,TRANSFORM_CSS_VENDOR_PREFIXES.map((function(prefix){var transform=sourceNode.style[prefix+"transform"];return transform&&"none"!==transform?transform.replace(/translate\(\D*\d+[^,]*,\D*\d+[^,]*\)\s*/g,""):""}))),dragImage.style.position="absolute",dragImage.style.left="0px",dragImage.style.top="0px",dragImage.style.zIndex="999999",dragImage.classList.add("dnd-poly-drag-image"),dragImage.classList.add("dnd-poly-icon"),this._dragImage=dragImage,!this._dragImageOffset)if(this._config.dragImageOffset)this._dragImageOffset={x:this._config.dragImageOffset.x,y:this._config.dragImageOffset.y};else if(this._config.dragImageCenterOnTouch){var cs=getComputedStyle(dragImageSrc);this._dragImageOffset={x:0-parseInt(cs.marginLeft,10),y:0-parseInt(cs.marginTop,10)}}else{var targetRect=dragImageSrc.getBoundingClientRect();cs=getComputedStyle(dragImageSrc),this._dragImageOffset={x:targetRect.left-this._initialTouch.clientX-parseInt(cs.marginLeft,10)+targetRect.width/2,y:targetRect.top-this._initialTouch.clientY-parseInt(cs.marginTop,10)+targetRect.height/2}}return translateElementToPoint(this._dragImage,this._dragImagePageCoordinates,this._dragImageTransforms,this._dragImageOffset,this._config.dragImageCenterOnTouch),document.body.appendChild(this._dragImage),this._iterationIntervalId=window.setInterval((function(){_this._iterationLock?console.log("dnd-poly: iteration skipped because previous iteration hast not yet finished."):(_this._iterationLock=!0,_this._dragAndDropProcessModelIteration(),_this._iterationLock=!1)}),this._config.iterationInterval),!0},DragOperationController.prototype._cleanup=function(){console.log("dnd-poly: cleanup"),this._iterationIntervalId&&(clearInterval(this._iterationIntervalId),this._iterationIntervalId=null),removeDocumentListener("touchmove",this._touchMoveHandler),removeDocumentListener("touchend",this._touchEndOrCancelHandler),removeDocumentListener("touchcancel",this._touchEndOrCancelHandler),this._dragImage&&(this._dragImage.parentNode.removeChild(this._dragImage),this._dragImage=null),this._dragOperationEndedCb(this._config,this._lastTouchEvent,this._dragOperationState)},DragOperationController.prototype._onTouchMove=function(event){var _this=this;if(!1!==isTouchIdentifierContainedInTouchEvent(event,this._initialTouch.identifier)){if(this._lastTouchEvent=event,0===this._dragOperationState){var startDrag=void 0;if(this._config.dragStartConditionOverride)try{startDrag=this._config.dragStartConditionOverride(event)}catch(e){console.error("dnd-poly: error in dragStartConditionOverride hook: "+e),startDrag=!1}else startDrag=1===event.touches.length;return startDrag?void(!0===this._setup()&&(this._initialEvent.preventDefault(),event.preventDefault())):void this._cleanup()}if(console.log("dnd-poly: moving draggable.."),event.preventDefault(),updateCentroidCoordinatesOfTouchesIn("client",event,this._currentHotspotCoordinates),updateCentroidCoordinatesOfTouchesIn("page",event,this._dragImagePageCoordinates),this._config.dragImageTranslateOverride)try{var handledDragImageTranslate_1=!1;if(this._config.dragImageTranslateOverride(event,{x:this._currentHotspotCoordinates.x,y:this._currentHotspotCoordinates.y},this._immediateUserSelection,(function(offsetX,offsetY){_this._dragImage&&(handledDragImageTranslate_1=!0,_this._currentHotspotCoordinates.x+=offsetX,_this._currentHotspotCoordinates.y+=offsetY,_this._dragImagePageCoordinates.x+=offsetX,_this._dragImagePageCoordinates.y+=offsetY,translateElementToPoint(_this._dragImage,_this._dragImagePageCoordinates,_this._dragImageTransforms,_this._dragImageOffset,_this._config.dragImageCenterOnTouch))})),handledDragImageTranslate_1)return}catch(e){console.log("dnd-poly: error in dragImageTranslateOverride hook: "+e)}translateElementToPoint(this._dragImage,this._dragImagePageCoordinates,this._dragImageTransforms,this._dragImageOffset,this._config.dragImageCenterOnTouch)}},DragOperationController.prototype._onTouchEndOrCancel=function(event){if(!1!==isTouchIdentifierContainedInTouchEvent(event,this._initialTouch.identifier)){if(this._config.dragImageTranslateOverride)try{this._config.dragImageTranslateOverride(void 0,void 0,void 0,(function(){}))}catch(e){console.log("dnd-poly: error in dragImageTranslateOverride hook: "+e)}0!==this._dragOperationState?(event.preventDefault(),this._dragOperationState="touchcancel"===event.type?3:2):this._cleanup()}},DragOperationController.prototype._dragAndDropProcessModelIteration=function(){var _this=this,previousDragOperation=this._currentDragOperation;this._dragDataStore.mode=3,this._dataTransfer.dropEffect=DROP_EFFECTS[0];var dragCancelled=dispatchDragEvent("drag",this._sourceNode,this._lastTouchEvent,this._dragDataStore,this._dataTransfer);if(dragCancelled&&(console.log("dnd-poly: drag event cancelled."),this._currentDragOperation=DROP_EFFECTS[0]),dragCancelled||2===this._dragOperationState||3===this._dragOperationState)return this._dragOperationEnded(this._dragOperationState)?void function(sourceEl,dragImage,dragImageTransforms,transitionEndCb){var cs=getComputedStyle(sourceEl);if("hidden"===cs.visibility||"none"===cs.display)return console.log("dnd-poly: source node is not visible. skipping snapback transition."),void transitionEndCb();dragImage.classList.add("dnd-poly-snapback");var csDragImage=getComputedStyle(dragImage),durationInS=parseFloat(csDragImage.transitionDuration);if(isNaN(durationInS)||0===durationInS)return console.log("dnd-poly: no transition used - skipping snapback"),void transitionEndCb();console.log("dnd-poly: starting dragimage snap back");var rect=sourceEl.getBoundingClientRect(),pnt={x:rect.left,y:rect.top};pnt.x+=document.body.scrollLeft||document.documentElement.scrollLeft,pnt.y+=document.body.scrollTop||document.documentElement.scrollTop,pnt.x-=parseInt(cs.marginLeft,10),pnt.y-=parseInt(cs.marginTop,10);var delayInS=parseFloat(csDragImage.transitionDelay),durationInMs=Math.round(1e3*(durationInS+delayInS));translateElementToPoint(dragImage,pnt,dragImageTransforms,void 0,!1),setTimeout(transitionEndCb,durationInMs)}(this._sourceNode,this._dragImage,this._dragImageTransforms,(function(){_this._finishDragOperation()})):void this._finishDragOperation();var newUserSelection=this._config.elementFromPoint(this._currentHotspotCoordinates.x,this._currentHotspotCoordinates.y);console.log("dnd-poly: new immediate user selection is: "+newUserSelection);var previousTargetElement=this._currentDropTarget;newUserSelection!==this._immediateUserSelection&&newUserSelection!==this._currentDropTarget&&(this._immediateUserSelection=newUserSelection,null!==this._currentDropTarget&&(this._dragDataStore.mode=3,this._dataTransfer.dropEffect=DROP_EFFECTS[0],dispatchDragEvent("dragexit",this._currentDropTarget,this._lastTouchEvent,this._dragDataStore,this._dataTransfer,!1)),null===this._immediateUserSelection?(this._currentDropTarget=this._immediateUserSelection,console.log("dnd-poly: current drop target changed to null")):(this._dragDataStore.mode=3,this._dataTransfer.dropEffect=determineDropEffect(this._dragDataStore.effectAllowed,this._sourceNode),dispatchDragEvent("dragenter",this._immediateUserSelection,this._lastTouchEvent,this._dragDataStore,this._dataTransfer)?(console.log("dnd-poly: dragenter default prevented"),this._currentDropTarget=this._immediateUserSelection,this._currentDragOperation=determineDragOperation(this._dataTransfer.effectAllowed,this._dataTransfer.dropEffect)):this._immediateUserSelection!==document.body&&(this._currentDropTarget=document.body))),previousTargetElement!==this._currentDropTarget&&isDOMElement(previousTargetElement)&&(console.log("dnd-poly: current drop target changed."),this._dragDataStore.mode=3,this._dataTransfer.dropEffect=DROP_EFFECTS[0],dispatchDragEvent("dragleave",previousTargetElement,this._lastTouchEvent,this._dragDataStore,this._dataTransfer,!1,this._currentDropTarget)),isDOMElement(this._currentDropTarget)&&(this._dragDataStore.mode=3,this._dataTransfer.dropEffect=determineDropEffect(this._dragDataStore.effectAllowed,this._sourceNode),!1===dispatchDragEvent("dragover",this._currentDropTarget,this._lastTouchEvent,this._dragDataStore,this._dataTransfer)?(console.log("dnd-poly: dragover not prevented on possible drop-target."),this._currentDragOperation=DROP_EFFECTS[0]):(console.log("dnd-poly: dragover prevented."),this._currentDragOperation=determineDragOperation(this._dataTransfer.effectAllowed,this._dataTransfer.dropEffect))),console.log("dnd-poly: d'n'd iteration ended. current drag operation: "+this._currentDragOperation),previousDragOperation!==this._currentDragOperation&&this._dragImage.classList.remove("dnd-poly-"+previousDragOperation);var currentDragOperationClass="dnd-poly-"+this._currentDragOperation;this._dragImage.classList.add(currentDragOperationClass)},DragOperationController.prototype._dragOperationEnded=function(state){console.log("dnd-poly: drag operation end detected with "+this._currentDragOperation);var dragFailed=this._currentDragOperation===DROP_EFFECTS[0]||null===this._currentDropTarget||3===state;return dragFailed?isDOMElement(this._currentDropTarget)&&(this._dragDataStore.mode=3,this._dataTransfer.dropEffect=DROP_EFFECTS[0],dispatchDragEvent("dragleave",this._currentDropTarget,this._lastTouchEvent,this._dragDataStore,this._dataTransfer,!1)):isDOMElement(this._currentDropTarget)&&(this._dragDataStore.mode=1,this._dataTransfer.dropEffect=this._currentDragOperation,!0===dispatchDragEvent("drop",this._currentDropTarget,this._lastTouchEvent,this._dragDataStore,this._dataTransfer)?this._currentDragOperation=this._dataTransfer.dropEffect:this._currentDragOperation=DROP_EFFECTS[0]),dragFailed},DragOperationController.prototype._finishDragOperation=function(){console.log("dnd-poly: dragimage snap back transition ended"),this._dragDataStore.mode=3,this._dataTransfer.dropEffect=this._currentDragOperation,dispatchDragEvent("dragend",this._sourceNode,this._lastTouchEvent,this._dragDataStore,this._dataTransfer,!1),this._dragOperationState=2,this._cleanup()},DragOperationController}(),config={iterationInterval:150,tryFindDraggableTarget:function(event){var el=event.target;do{if(!1!==el.draggable){if(!0===el.draggable)return el;if(el.getAttribute&&"true"===el.getAttribute("draggable"))return el}}while((el=el.parentNode)&&el!==document.body)},dragImageSetup:function(sourceNode){var dragImage=sourceNode.cloneNode(!0);return prepareNodeCopyAsDragImage(sourceNode,dragImage),dragImage},elementFromPoint:function(x,y){return document.elementFromPoint(x,y)}};function onTouchstart(e){if(console.log("dnd-poly: global touchstart"),activeDragOperation)console.log("dnd-poly: drag operation already active");else{var dragTarget=config.tryFindDraggableTarget(e);if(dragTarget)try{activeDragOperation=new DragOperationController(e,config,dragTarget,dragOperationEnded)}catch(err){throw dragOperationEnded(config,e,3),err}else console.log("dnd-poly: no draggable at touchstart coordinates")}}function onDelayTouchstart(evt){console.log("dnd-poly: setup delayed dragstart..");var el=evt.target,onReleasedItem=function(event){console.log("dnd-poly: aborting delayed drag because of "+event.type),end.off(),cancel.off(),move.off(),scroll.off(),el&&el.dispatchEvent(new CustomEvent("dnd-poly-dragstart-cancel",{bubbles:!0,cancelable:!0})),clearTimeout(timer)};el&&el.dispatchEvent(new CustomEvent("dnd-poly-dragstart-pending",{bubbles:!0,cancelable:!0}));var timer=window.setTimeout((function(){console.log("dnd-poly: starting delayed drag.."),end.off(),cancel.off(),move.off(),scroll.off(),onTouchstart(evt)}),config.holdToDrag),end=onEvt(el,"touchend",onReleasedItem),cancel=onEvt(el,"touchcancel",onReleasedItem),move=onEvt(el,"touchmove",onReleasedItem),scroll=onEvt(window,"scroll",onReleasedItem,!0)}function dragOperationEnded(_config,event,state){if(0===state&&(console.log("dnd-poly: Drag never started. Last event was "+event.type),_config.defaultActionOverride))try{_config.defaultActionOverride(event),event.defaultPrevented&&console.log("dnd-poly: defaultActionOverride has taken care of triggering the default action. preventing default on original event")}catch(e){console.log("dnd-poly: error in defaultActionOverride: "+e)}activeDragOperation=null}exports.polyfill=function(override){if(override&&Object.keys(override).forEach((function(key){config[key]=override[key]})),!config.forceApply){var detectedFeatures=(features={dragEvents:"ondragstart"in document.documentElement,draggable:"draggable"in document.documentElement,userAgentSupportingNativeDnD:void 0},isBlinkEngine=!!window.chrome||/chrome/i.test(navigator.userAgent),features.userAgentSupportingNativeDnD=!(/iPad|iPhone|iPod|Android/.test(navigator.userAgent)||isBlinkEngine&&"ontouchstart"in document.documentElement),features);if(detectedFeatures.userAgentSupportingNativeDnD&&detectedFeatures.draggable&&detectedFeatures.dragEvents)return!1}var features,isBlinkEngine;return console.log("dnd-poly: Applying mobile drag and drop polyfill."),config.holdToDrag?(console.log("dnd-poly: holdToDrag set to "+config.holdToDrag),addDocumentListener("touchstart",onDelayTouchstart,!1)):addDocumentListener("touchstart",onTouchstart,!1),!0},Object.defineProperty(exports,"__esModule",{value:!0})},"object"==typeof exports&&"undefined"!=typeof module?factory(exports):"function"==typeof define&&define.amd?define("qtype_gapfill/mobile-drag-drop",["exports"],factory):factory(global.MobileDragDrop=global.MobileDragDrop||{});

//# sourceMappingURL=mobile-drag-drop.min.js.map