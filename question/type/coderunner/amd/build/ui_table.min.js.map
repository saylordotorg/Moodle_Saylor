{"version":3,"sources":["../src/ui_table.js"],"names":["define","$","TableUi","textareaId","width","height","uiParams","textArea","document","getElementById","readOnly","prop","tableDiv","num_columns","num_rows","fail","failString","lockedCells","locked_cells","hasHeader","column_headers","length","hasRowLabels","row_labels","numDataColumns","rowsPerCell","lines_per_cell","totNumColumns","columnWidths","computeColumnWidths","reload","prototype","defaultWidth","Math","trunc","column_width_percents","Array","fill","i","push","isLockedCell","row","col","getElement","failed","failMessage","sync","serialisation","empty","tableRows","find","each","rowValues","cellVal","val","JSON","stringify","tableRow","iRow","preload","html","widthIndex","iCol","tableHeadSection","colIndex","preloadJson","divHtml","parse","error","num_rows_required","max","dynamic_rows","addButtons","deleteButton","t","append","click","numRows","lastRow","remove","addButton","newRow","clone","after","prev","resize","hasFocus","focused","activeElement","destroy","Constructor"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more util.details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Implementation of the table_ui user interface plugin. For overall details\n * of the UI plugin architecture, see userinterfacewrapper.js.\n *\n * This plugin replaces the usual textarea answer element with a div\n * containing an HTML table. The number of columns, and\n * the initial number of rows are specified by required UI parameters\n * num_columns and num_rows respectively.\n * Optional additional UI parameters are:\n *   1. column_headers: a list of strings that can be used to provide a\n *      fixed header row at the top.\n *   2. row_labels: a list of strings that can be used to provide a\n *      fixed row label column at the left.\n *   3. dynamic_rows, which, if true, allows the user to add rows.\n *   4. locked_cells: a list of [row, column] pairs, being the coordinates\n *      of table cells that cannot be changed by the user. row and column numbers\n *      are zero origin and do not include the header row or the row labels.\n *   5. width_percents: a list of the percentages of the width occupied\n *      by each column. This list must include a value for the row labels, if present.\n *\n * The serialisation of the table, which is what is essentially copied back\n * into the textarea for submissions as the answer, is a JSON array. Each\n * element in the array is itself an array containing the values of one row\n * of the table. Empty cells are empty strings. The table header row and row\n * label columns are not provided in the serialisation.\n *\n * To preload the table with data, simply set the answer_preload of the question\n * to a json array of row values (each itself an array). If the number of rows\n * in the preload exceeds the number set by num_rows, extra rows are\n * added. If the number is less than num_rows, or if there is no\n * answer preload, undefined rows are simply left blank.\n *\n * As a special case of the serialisation, if all cells in the serialisation\n * are empty strings, the serialisation is itself the empty string.\n *\n * @package    qtype\n * @subpackage coderunner\n * @copyright  Richard Lobb, 2018, The University of Canterbury\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery'], function($) {\n\n    function TableUi(textareaId, width, height, uiParams) {\n        this.textArea = $(document.getElementById(textareaId));\n        this.readOnly = this.textArea.prop('readonly');\n        this.tableDiv = null;\n        this.uiParams = uiParams;\n        if (!uiParams.num_columns ||\n            !uiParams.num_rows) {\n            this.fail = true;\n            this.failString = 'table_ui_missingparams';\n            return;  // We're dead, fred.\n        }\n\n        this.fail = false;\n        this.lockedCells = uiParams.locked_cells || [];\n        this.hasHeader = uiParams.column_headers && uiParams.column_headers.length > 0 ? true : false;\n        this.hasRowLabels = uiParams.row_labels && uiParams.row_labels.length > 0 ? true : false;\n        this.numDataColumns = uiParams.num_columns;\n        this.rowsPerCell = uiParams.lines_per_cell || 2;\n        this.totNumColumns = this.numDataColumns + (this.hasRowLabels ? 1 : 0);\n        this.columnWidths = this.computeColumnWidths();\n        this.reload();\n    }\n\n    // Return an array of the percentage widths required for each of the\n    // totNumColumns columns.\n    TableUi.prototype.computeColumnWidths = function() {\n        var defaultWidth = Math.trunc(100 / this.totNumColumns),\n            columnWidths = [];\n        if (this.uiParams.column_width_percents && this.uiParams.column_width_percents.length > 0) {\n            return this.uiParams.column_width_percents;\n        } else if (Array.prototype.fill) { // Anything except bloody IE.\n            return new Array(this.totNumColumns).fill(defaultWidth);\n        } else { // IE. What else?\n            for (var i = 0; i < this.totNumColumns; i++) {\n                columnWidths.push(defaultWidth);\n            }\n            return columnWidths;\n        }\n    };\n\n    // Return True if the cell at the given row and column is locked.\n    // The given row and column numbers exclude column headers and row labels.\n    TableUi.prototype.isLockedCell = function(row, col) {\n        for (var i = 0; i < this.lockedCells.length; i++) {\n            if (this.lockedCells[i][0] == row && this.lockedCells[i][1] == col) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    TableUi.prototype.getElement = function() {\n        return this.tableDiv;\n    };\n\n    TableUi.prototype.failed = function() {\n        return this.fail;\n    };\n\n    TableUi.prototype.failMessage = function() {\n        return this.failString;\n    };\n\n    // Copy the serialised version of the Table UI area to the TextArea.\n    TableUi.prototype.sync = function() {\n        var\n            serialisation = [],\n            empty = true,\n            tableRows = $(this.tableDiv).find('table tbody tr');\n\n        tableRows.each(function () {\n            var rowValues = [];\n            $(this).find('textarea').each(function () {\n                var cellVal = $(this).val();\n                rowValues.push(cellVal);\n                if (cellVal) {\n                    empty = false;\n                }\n            });\n            serialisation.push(rowValues);\n        });\n\n        if (empty) {\n            this.textArea.val('');\n        } else {\n            this.textArea.val(JSON.stringify(serialisation));\n        }\n    };\n\n    // Return the HTML for row number iRow.\n    TableUi.prototype.tableRow = function(iRow, preload) {\n        var html = '<tr>', widthIndex = 0, width;\n\n        // Insert the row label if required.\n        if (this.hasRowLabels) {\n            width = this.columnWidths[0];\n            widthIndex = 1;\n            html += \"<th style='padding-top:8px;text-align:center;width:\" + width + \"%' scope='row'>\";\n            if (iRow < this.uiParams.row_labels.length) {\n                html += this.uiParams.row_labels[iRow];\n            }\n            html += \"</th>\";\n        }\n\n        for (var iCol = 0; iCol < this.numDataColumns; iCol++) {\n            width = this.columnWidths[widthIndex++];\n            html += \"<td style='padding:2px;margin:0,width:\" + width + \"'%>\";\n            html += '<textarea rows=\"' + this.rowsPerCell + '\"';\n            html += ' style=\"width:100%;padding:0;resize:vertical;font-family: monospace\"';\n            if (this.isLockedCell(iRow, iCol)) {\n                html += ' disabled>';\n            } else {\n                html += '>';\n            }\n            if (iRow < preload.length) {\n                html += preload[iRow][iCol];\n            }\n            html += '</textarea>';\n            html += \"</td>\";\n        }\n        html += '</tr>';\n        return html;\n    };\n\n    // Return the HTML for the table's head section.\n    TableUi.prototype.tableHeadSection = function() {\n        var html = \"<thead>\\n\",\n            colIndex = 0;  // Column index including row label if present.\n\n        if (this.hasHeader) {\n            html += \"<tr>\";\n\n            if (this.hasRowLabels) {\n                html += \"<th style='width:\" + this.columnWidths[0] + \"%'></th>\";\n                colIndex += 1;\n            }\n\n            for(var iCol = 0; iCol < this.numDataColumns; iCol++) {\n                html += \"<th style='width:\" + this.columnWidths[colIndex] + \"%'>\";\n                if (iCol < this.uiParams.column_headers.length) {\n                    html += this.uiParams.column_headers[iCol];\n                }\n                colIndex++;\n                html += \"</th>\";\n            }\n            html += \"</tr>\\n\";\n        }\n        html += \"</thead>\\n\";\n        return html;\n    };\n\n    // Build the HTML table, filling it with the data from the serialisation\n    // currently in the textarea (if there is any).\n    TableUi.prototype.reload = function() {\n        var\n            preloadJson = $(this.textArea).val(), // JSON-encoded table values.\n            preload = [],\n            divHtml = \"<div style='height:fit-content' class='qtype-coderunner-table-outer-div'>\\n\" +\n                      \"<table class='table table-bordered qtype-coderunner_table'>\\n\";\n\n        if (preloadJson) {\n            try {\n                preload = JSON.parse(preloadJson);\n            } catch(error)  {\n                this.fail = true;\n                this.failString = 'table_ui_invalidjson';\n                return;\n            }\n        }\n\n        try {\n            // Build the table head section.\n            divHtml += this.tableHeadSection();\n\n            // Build the table body. Each table cell has a textarea inside it,\n            // except for row labels (if present).\n            divHtml += \"<tbody>\\n\";\n            var num_rows_required = Math.max(this.uiParams.num_rows, preload.length);\n            for (var iRow = 0; iRow < num_rows_required; iRow++) {\n                divHtml += this.tableRow(iRow, preload);\n            }\n\n            divHtml += '</tbody>\\n</table>\\n</div>';\n            this.tableDiv = $(divHtml);\n            if (this.uiParams.dynamic_rows) {\n                this.addButtons();\n            }\n        } catch (error) {\n            this.fail = true;\n            this.failString = 'table_ui_invalidserialisation';\n        }\n    };\n\n    // Add 'Add row' and 'Delete row' buttons at the end of the table.\n    TableUi.prototype.addButtons = function() {\n        var deleteButtonHtml = '<button type=\"button\"' +\n                'style=\"float:right;margin-right:6px\" disabled>Delete row</button>',\n            deleteButton = $(deleteButtonHtml),\n            t = this;\n        this.tableDiv.append(deleteButton);\n        deleteButton.click(function() {\n            var numRows = t.tableDiv.find('table tbody tr').length,\n                lastRow = t.tableDiv.find('tr:last');\n            if (numRows > t.uiParams.num_rows) {\n                lastRow.remove();\n            }\n            lastRow = t.tableDiv.find('tr:last'); // New last row.\n            if (numRows == t.uiParams.num_rows + 1) {\n                $(this).prop('disabled', true);\n            }\n        });\n\n        var addButtonHtml = '<button type=\"button\"' +\n                'style=\"float:right;margin-right:6px\">Add row</button>',\n            addButton = $(addButtonHtml);\n        t.tableDiv.append(addButton);\n        addButton.click(function() {\n            var lastRow, newRow;\n            lastRow = t.tableDiv.find('table tbody tr:last');\n            newRow = lastRow.clone();  // Copy the last row of the table.\n            newRow.find('textarea').each(function() {  // Clear all td elements in it.\n                $(this).val('');\n            });\n            lastRow.after(newRow);\n            $(this).prev().prop('disabled', false);\n        });\n    };\n\n    TableUi.prototype.resize = function() {}; // Nothing to see here. Move along please.\n\n    TableUi.prototype.hasFocus = function() {\n        var focused = false;\n        $(this.tableDiv).find('textarea').each(function() {\n            if (this === document.activeElement) {\n                focused = true;\n            }\n        });\n        return focused;\n    };\n\n    // Destroy the HTML UI and serialise the result into the original text area.\n    TableUi.prototype.destroy = function() {\n        this.sync();\n        $(this.tableDiv).remove();\n        this.tableDiv = null;\n    };\n\n    return {\n        Constructor: TableUi\n    };\n});\n"],"file":"ui_table.min.js"}