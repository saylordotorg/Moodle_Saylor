{"version":3,"file":"creator.min.js","sources":["../src/creator.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle. If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This class provides functionality for the testquestion response creator.\n *\n * @module    qtype_pmatch\n * @class     creator\n * @copyright 2018 The Open University\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/str', 'core/ajax', 'core/templates', 'core/key_codes', 'core/notification', 'core/checkbox-toggleall'],\n    function($, Str, Ajax, Templates, KeyCodes, Notification, CheckboxToggleAll) {\n\n    /**\n     * @alias qtype_pmatch/creator\n     */\n    const t = {\n        /**\n         * The id of row will append to Table Response.\n         */\n        newRowId: '',\n        /**\n         * Index of last one in the Table Response.\n         */\n        idxLastRow: 0,\n        /**\n         * The Id of editing question.\n         */\n        questionId: '',\n        /**\n         * Initialise the creator.\n         */\n        init: function() {\n            t.questionId = $('#attemptsform input[name=\"id\"]').val();\n            t.table = $('#responses');\n            t.idxLastRow = t.table.find('tbody tr').length - 1;\n            t.disableControlButtonAndSelectionBox();\n            $('#newresponsebutton').click(function(e) {\n                e.preventDefault();\n                t.idxLastRow++;\n                t.newRowId = 'qtype-pmatch-new-response_' + t.idxLastRow;\n                Templates.render('qtype_pmatch/newresponse', {newrowid: t.newRowId})\n                    .then(function(html) {\n                        t.table.append(html);\n                        $('html, body').animate({\n                            scrollTop: $('#' + t.newRowId).offset().top\n                        }, 800);\n                        $('.new-expectedfraction').focus();\n                        return null;\n                    }).catch(Notification.exception);\n                t.disableControlButtons(true);\n            });\n\n            let timeoutCheckResponse = null;\n\n            // Check response when key up or paste content.\n            $(document).on('keyup paste', '.new-response', function() {\n                const response = $(this).val().trim();\n\n                if (timeoutCheckResponse) {\n                    M.util.js_complete('checkresponse');\n                    clearTimeout(timeoutCheckResponse);\n                }\n                M.util.js_pending('checkresponse');\n                timeoutCheckResponse = setTimeout(function() {\n                    if (response === '') {\n                        t.handleSaveNewResponseButton(false, '');\n                    } else {\n                        t.checkResponse(response);\n                    }\n                    M.util.js_complete('checkresponse');\n                }, 500);\n            });\n\n            $(document).on('keydown', '.new-response', function(e) {\n                if (e.keyCode === KeyCodes.enter) {\n                    t.saveNewResponse();\n                    return false;\n                }\n                return true;\n            });\n\n            $(document).on('keydown', '.new-expectedfraction, .new-response, .savenewresponse, .cancelnewresponse', function(e) {\n                if (e.keyCode === KeyCodes.escape) {\n                    t.cancelNewResponse();\n                }\n            });\n\n            $(document).on('click', '.savenewresponse', function() {\n                return t.saveNewResponse();\n            });\n            $(document).on('click', '.cancelnewresponse', function() {\n                t.cancelNewResponse();\n            });\n        },\n\n        /**\n         * Submit to save a new response.\n         */\n        saveNewResponse: function() {\n            const response = $('.new-response').val().trim();\n            if (response !== '') {\n                const mark = $('.new-expectedfraction').is(':checked') ? 1 : 0;\n                const promises = Ajax.call([{\n                    methodname: 'qtype_pmatch_create_response',\n                    args: {questionid: t.questionId, expectedfraction: mark, response: response, curentrow: t.idxLastRow}\n                }], true);\n                promises[0].then(function(result) {\n                        if (result.status === 'error') {\n                            t.handleSaveNewResponseButton(false, result.message);\n                        } else {\n                            t.disableControlButtons(false);\n                            $('#' + t.newRowId).detach();\n                            t.table.append($(result.html));\n                            const resultssummary = M.util.get_string('testquestionresultssummary', 'qtype_pmatch', result.counts);\n                            $('#testquestion_gradesummary').html(resultssummary);\n                        }\n                        return null;\n                    }).catch(function(response) {\n                        t.handleSaveNewResponseButton(false, response.message);\n                    });\n                t.disableControlButtonAndSelectionBox();\n                t.resetFormState();\n            }\n        },\n\n        /**\n         * Cancel to input a new response.\n         */\n        cancelNewResponse: function() {\n            $('#' + t.newRowId).remove();\n            t.disableControlButtons(false);\n            t.disableControlButtonAndSelectionBox();\n            t.resetFormState();\n            t.idxLastRow--;\n        },\n\n        /**\n         * Function check correct a response.\n         *\n         * @method checkResponse\n         * @param {String} response The response to check.\n         */\n        checkResponse: function(response) {\n            const promises = Ajax.call([{\n                methodname: 'qtype_pmatch_check_response',\n                args: {questionid: t.questionId, response: response}\n            }], true);\n            promises[0]\n                .then(function(result) {\n                    let isCorrectResponse = false;\n                    if (result.status === 'success') {\n                        result.message = '';\n                        isCorrectResponse = true;\n                    }\n                    t.handleSaveNewResponseButton(isCorrectResponse, result.message);\n                    return null;\n                }).catch(function(response) {\n                    t.handleSaveNewResponseButton(false, response.message);\n                });\n        },\n\n        /**\n         * Disable or enable for save button when and update the error message.\n         *\n         * @method handleSaveNewResponseButton\n         * @param {Boolean} isCorrectResponse Response input is correct or not.\n         * @param {String} message The message for the error.\n         */\n        handleSaveNewResponseButton: function(isCorrectResponse, message) {\n            if (isCorrectResponse) {\n                $('.savenewresponse').removeAttr('disabled');\n            } else {\n                $('.savenewresponse').attr('disabled', 'true');\n            }\n            $('.response.error').html(message);\n        },\n\n        /**\n         * Function disable or enable the outside table buttons when create new response.\n         *\n         * @method disableControlButtons\n         * @param {Boolean} disable true if disable else enable the buttons.\n         */\n        disableControlButtons: function(disable) {\n            if (disable) {\n                $('#newresponsebutton').attr('disabled', 'true');\n                $('#uploadbutton').attr('disabled', 'true');\n                $('#deleteresponsesbutton').attr('disabled', 'true');\n                $('#testresponsesbutton').attr('disabled', 'true');\n            } else {\n                $('#newresponsebutton').removeAttr('disabled');\n                $('#uploadbutton').removeAttr('disabled');\n                CheckboxToggleAll.updateSlavesFromMasterState($(document.body), 'responses');\n            }\n        },\n\n        /**\n         * Notify user when the form Add new response has changed.\n         */\n        resetFormState: function() {\n            M.core_formchangechecker.reset_form_dirty_state();\n        },\n\n        /**\n         * Function disable or enable selection box,delete response button,test response button.\n         *\n         * @method disableControlButtons\n         */\n        disableControlButtonAndSelectionBox: function() {\n            const checkbox = $('#tqheadercheckbox');\n            const table = $('#responses');\n            if (table.find('tbody tr:not(.emptyrow)').length <= 0) {\n                checkbox.attr('disabled', true);\n                $('#deleteresponsesbutton').attr('disabled', 'true');\n                $('#testresponsesbutton').attr('disabled', 'true');\n            } else {\n                checkbox.removeAttr('disabled');\n                CheckboxToggleAll.updateSlavesFromMasterState($(document.body), 'responses');\n            }\n        }\n    };\n\n    return t;\n});\n"],"names":["define","$","Str","Ajax","Templates","KeyCodes","Notification","CheckboxToggleAll","t","newRowId","idxLastRow","questionId","init","val","table","find","length","disableControlButtonAndSelectionBox","click","e","preventDefault","render","newrowid","then","html","append","animate","scrollTop","offset","top","focus","catch","exception","disableControlButtons","timeoutCheckResponse","document","on","response","this","trim","M","util","js_complete","clearTimeout","js_pending","setTimeout","handleSaveNewResponseButton","checkResponse","keyCode","enter","saveNewResponse","escape","cancelNewResponse","mark","is","call","methodname","args","questionid","expectedfraction","curentrow","result","status","message","detach","resultssummary","get_string","counts","resetFormState","remove","isCorrectResponse","removeAttr","attr","disable","updateSlavesFromMasterState","body","core_formchangechecker","reset_form_dirty_state","checkbox"],"mappings":";;;;;;;;AAuBAA,8BAAO,CAAC,SAAU,WAAY,YAAa,iBAAkB,iBAAkB,oBAAqB,4BAChG,SAASC,EAAGC,IAAKC,KAAMC,UAAWC,SAAUC,aAAcC,yBAKpDC,EAAI,CAINC,SAAU,GAIVC,WAAY,EAIZC,WAAY,GAIZC,KAAM,WACFJ,EAAEG,WAAaV,EAAE,kCAAkCY,MACnDL,EAAEM,MAAQb,EAAE,cACZO,EAAEE,WAAaF,EAAEM,MAAMC,KAAK,YAAYC,OAAS,EACjDR,EAAES,sCACFhB,EAAE,sBAAsBiB,OAAM,SAASC,GACnCA,EAAEC,iBACFZ,EAAEE,aACFF,EAAEC,SAAW,6BAA+BD,EAAEE,WAC9CN,UAAUiB,OAAO,2BAA4B,CAACC,SAAUd,EAAEC,WACrDc,MAAK,SAASC,aACXhB,EAAEM,MAAMW,OAAOD,MACfvB,EAAE,cAAcyB,QAAQ,CACpBC,UAAW1B,EAAE,IAAMO,EAAEC,UAAUmB,SAASC,KACzC,KACH5B,EAAE,yBAAyB6B,QACpB,QACRC,MAAMzB,aAAa0B,WAC1BxB,EAAEyB,uBAAsB,UAGxBC,qBAAuB,KAG3BjC,EAAEkC,UAAUC,GAAG,cAAe,iBAAiB,iBACrCC,SAAWpC,EAAEqC,MAAMzB,MAAM0B,OAE3BL,uBACAM,EAAEC,KAAKC,YAAY,iBACnBC,aAAaT,uBAEjBM,EAAEC,KAAKG,WAAW,iBAClBV,qBAAuBW,YAAW,WACb,KAAbR,SACA7B,EAAEsC,6BAA4B,EAAO,IAErCtC,EAAEuC,cAAcV,UAEpBG,EAAEC,KAAKC,YAAY,mBACpB,QAGPzC,EAAEkC,UAAUC,GAAG,UAAW,iBAAiB,SAASjB,UAC5CA,EAAE6B,UAAY3C,SAAS4C,QACvBzC,EAAE0C,mBACK,MAKfjD,EAAEkC,UAAUC,GAAG,UAAW,8EAA8E,SAASjB,GACzGA,EAAE6B,UAAY3C,SAAS8C,QACvB3C,EAAE4C,uBAIVnD,EAAEkC,UAAUC,GAAG,QAAS,oBAAoB,kBACjC5B,EAAE0C,qBAEbjD,EAAEkC,UAAUC,GAAG,QAAS,sBAAsB,WAC1C5B,EAAE4C,wBAOVF,gBAAiB,iBACPb,SAAWpC,EAAE,iBAAiBY,MAAM0B,UACzB,KAAbF,SAAiB,OACXgB,KAAOpD,EAAE,yBAAyBqD,GAAG,YAAc,EAAI,EAC5CnD,KAAKoD,KAAK,CAAC,CACxBC,WAAY,+BACZC,KAAM,CAACC,WAAYlD,EAAEG,WAAYgD,iBAAkBN,KAAMhB,SAAUA,SAAUuB,UAAWpD,EAAEE,eAC1F,GACK,GAAGa,MAAK,SAASsC,WACI,UAAlBA,OAAOC,OACPtD,EAAEsC,6BAA4B,EAAOe,OAAOE,aACzC,CACHvD,EAAEyB,uBAAsB,GACxBhC,EAAE,IAAMO,EAAEC,UAAUuD,SACpBxD,EAAEM,MAAMW,OAAOxB,EAAE4D,OAAOrC,aAClByC,eAAiBzB,EAAEC,KAAKyB,WAAW,6BAA8B,eAAgBL,OAAOM,QAC9FlE,EAAE,8BAA8BuB,KAAKyC,uBAElC,QACRlC,OAAM,SAASM,UACd7B,EAAEsC,6BAA4B,EAAOT,SAAS0B,YAEtDvD,EAAES,sCACFT,EAAE4D,mBAOVhB,kBAAmB,WACfnD,EAAE,IAAMO,EAAEC,UAAU4D,SACpB7D,EAAEyB,uBAAsB,GACxBzB,EAAES,sCACFT,EAAE4D,iBACF5D,EAAEE,cASNqC,cAAe,SAASV,UACHlC,KAAKoD,KAAK,CAAC,CACxBC,WAAY,8BACZC,KAAM,CAACC,WAAYlD,EAAEG,WAAY0B,SAAUA,aAC3C,GACK,GACJd,MAAK,SAASsC,YACPS,mBAAoB,QACF,YAAlBT,OAAOC,SACPD,OAAOE,QAAU,GACjBO,mBAAoB,GAExB9D,EAAEsC,4BAA4BwB,kBAAmBT,OAAOE,SACjD,QACRhC,OAAM,SAASM,UACd7B,EAAEsC,6BAA4B,EAAOT,SAAS0B,aAW1DjB,4BAA6B,SAASwB,kBAAmBP,SACjDO,kBACArE,EAAE,oBAAoBsE,WAAW,YAEjCtE,EAAE,oBAAoBuE,KAAK,WAAY,QAE3CvE,EAAE,mBAAmBuB,KAAKuC,UAS9B9B,sBAAuB,SAASwC,SACxBA,SACAxE,EAAE,sBAAsBuE,KAAK,WAAY,QACzCvE,EAAE,iBAAiBuE,KAAK,WAAY,QACpCvE,EAAE,0BAA0BuE,KAAK,WAAY,QAC7CvE,EAAE,wBAAwBuE,KAAK,WAAY,UAE3CvE,EAAE,sBAAsBsE,WAAW,YACnCtE,EAAE,iBAAiBsE,WAAW,YAC9BhE,kBAAkBmE,4BAA4BzE,EAAEkC,SAASwC,MAAO,eAOxEP,eAAgB,WACZ5B,EAAEoC,uBAAuBC,0BAQ7B5D,oCAAqC,iBAC3B6D,SAAW7E,EAAE,qBACLA,EAAE,cACNc,KAAK,2BAA2BC,QAAU,GAChD8D,SAASN,KAAK,YAAY,GAC1BvE,EAAE,0BAA0BuE,KAAK,WAAY,QAC7CvE,EAAE,wBAAwBuE,KAAK,WAAY,UAE3CM,SAASP,WAAW,YACpBhE,kBAAkBmE,4BAA4BzE,EAAEkC,SAASwC,MAAO,uBAKrEnE"}