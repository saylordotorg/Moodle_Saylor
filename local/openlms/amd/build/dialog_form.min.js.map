{"version":3,"file":"dialog_form.min.js","sources":["../src/dialog_form.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This code is based on core/fragment, it fetches form html markup and javascript\n * from legacy form page.\n *\n * This code is based on modal_form by Mitxel Moriana.\n *\n * @module     local_openlms/dialog_form\n * @copyright  Copyright (c) 2022 Open LMS (https://www.openlms.net/)\n * @author     Petr Skoda\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([\n    'jquery',\n    'core/modal_factory',\n    'core/modal_events',\n    'core/ajax',\n    'core/notification',\n    'core/yui',\n    'core/event',\n    'core/str',\n    'core/log'\n], function($, ModalFactory, ModalEvents, Ajax, Notification, Y, Event, Str, Log) {\n    var unloading = false;\n\n    /**\n     * Shows the legacy form inside a modal dialogue\n     *\n     * @param {Object} config Parameters for the list.\n     *\n     * @property {Object} config dialog form configuration\n     * @property {Object} config.modalConfig Modal configuration.\n     * @property {string} config.formUrl Legacy form URL.\n     * @property {element} config.triggerElement trigger element for a modal form\n     * @property {string} config.afterSubmit 'reload', 'redirect' on 'nothing' after successful form submit\n     */\n    var DialogForm = function(config) {\n        this.config = config;\n        this.config.modalConfig = this.config.modalConfig || {};\n        this.config.modalConfig.type = ModalFactory.types.CANCEL;\n        this.init();\n    };\n\n    /**\n     * @var {Object} config\n     */\n    DialogForm.prototype.config = {};\n\n    /**\n     * @var {Modal} modal\n     */\n    DialogForm.prototype.modal = null;\n\n    /**\n     * Initialise the class.\n     *\n     * @private\n     */\n    DialogForm.prototype.init = function() {\n        var requiredStrings = [\n            {key: 'collapseall', component: 'moodle'},\n            {key: 'expandall', component: 'moodle'}\n        ];\n\n        // Ensure strings required for shortforms are always available.\n        M.util.js_pending('local_openlms_dialog_form_init');\n        Str.get_strings(requiredStrings)\n            .then(function() {\n                // We don't attach trigger element to modal here to avoid MDL-70395.\n                // We normally initialise DialogForm as result of some event\n                // on trigger element, so new listener is not required.\n                return ModalFactory.create(this.config.modalConfig);\n            }.bind(this))\n            .then(function(modal) {\n                // Keep a reference to the modal.\n                this.modal = modal;\n\n                // We need to make sure that the modal already exists when we render the form. Some form elements\n                // such as date_selector inspect the existing elements on the page to find the highest z-index.\n                this.modal.setBody(this.getFormHtml(''));\n\n                // Forms are big, we want a big modal.\n                this.modal.setLarge();\n\n                // After successful submit, when we press \"Cancel\" or close the dialogue by clicking on X in the top right corner.\n                this.modal.getRoot().on(ModalEvents.hidden, function() {\n                    // Notify listeners that the form is about to be submitted (this will reset atto autosave).\n                    Event.notifyFormSubmitAjax(this.modal.getRoot().find('form')[0], true);\n\n                    // Destroy the modal.\n                    this.modal.destroy();\n\n                    // Reset form-change-checker.\n                    this.resetDirtyFormState();\n\n                    // Focus on the trigger element that actually launched the modal.\n                    if (this.config.triggerElement !== null) {\n                        this.config.triggerElement.focus();\n                    }\n                }.bind(this));\n\n                // Add the class to the modal dialogue.\n                this.modal.getModal().addClass('local_openlms-dialog_form');\n\n                // NOTE: There does not seem to be an easy way to remove the footer,\n                //       so for now it is just hidden using CSS hack.\n\n                // We catch the press on non-submitting buttons in the forms.\n                this.modal.getRoot().on('click', 'form input[type=submit][data-no-submit]', this.noSubmitButtonPressed.bind(this));\n\n                // Special exception for Cancel button, no need to send the cancel data to server, just close the dialog.\n                this.modal.getRoot().on('click', 'form input[type=submit][data-cancel]', this.cancelButtonPressed.bind(this));\n\n                // We catch the form submit event and use it to submit the form with ajax.\n                this.modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this));\n\n                this.onInit();\n\n                this.modal.show();\n\n                M.util.js_complete('local_openlms_dialog_form_init');\n                return this.modal;\n            }.bind(this))\n            .fail(Notification.exception);\n    };\n\n    /**\n     * On initialisation of a modal dialogue. Caller may override.\n     */\n    DialogForm.prototype.onInit = function() {\n        // There is no need to register ModelEvents here, we use mforms buttons for everything.\n    };\n\n    /**\n     * @param {string} formData serialised form data\n     * @method getFormHtml\n     * @private\n     * @return {Promise}\n     */\n    DialogForm.prototype.getFormHtml = function(formData) {\n        var promise = $.Deferred();\n        M.util.js_pending('local_openlms_dialog_form_html');\n        fetchFormHtml(this.config.formUrl, formData)\n            .then(function(response) {\n                if (response.dialog_form === 'render') {\n                    promise.resolve(response.html, processCollectedJavascript(response.javascript));\n                    M.util.js_complete('local_openlms_dialog_form_html');\n                } else {\n                    promise.reject(new Error('Dialog form rendering error'));\n                }\n                return null;\n            }.bind(this))\n            .fail(function(ex) {\n                promise.reject(ex);\n            }.bind(this));\n\n        return promise.promise();\n    };\n\n    /**\n     * On form submit. Caller may override\n     *\n     * @param {Object} response Response received from the form's \"process\" method\n     * @return {Object}\n     */\n    DialogForm.prototype.onSubmitSuccess = function(response) {\n        // By default this function does nothing.\n        // Return here is irrelevant, it is only present to make eslint happy.\n        return response;\n    };\n\n    /**\n     * On form validation error. Caller may override\n     *\n     * @return {mixed}\n     */\n    DialogForm.prototype.onValidationError = function() {\n        // By default this function does nothing.\n        // Return here is irrelevant, it is only present to make eslint happy.\n        return undefined;\n    };\n\n    /**\n     * Reset \"dirty\" form state (warning if there are changes)\n     */\n    DialogForm.prototype.resetDirtyFormState = function() {\n        Y.use('moodle-core-formchangechecker', function() {\n            M.core_formchangechecker.reset_form_dirty_state();\n        });\n    };\n\n    /**\n     * Click on a \"submit\" button that is marked in the form as registerNoSubmitButton()\n     *\n     * @method submitButtonPressed\n     * @private\n     * @param {Event} e Form submission event.\n     */\n    DialogForm.prototype.noSubmitButtonPressed = function(e) {\n        e.preventDefault();\n\n        Event.notifyFormSubmitAjax(this.modal.getRoot().find('form')[0], true);\n\n        // Add the button name to the form data and submit it.\n        var formData = this.modal.getRoot().find('form').serialize(),\n            el = $(e.currentTarget);\n        formData = formData + '&' + encodeURIComponent(el.attr('name')) + '=' + encodeURIComponent(el.attr('value'));\n        this.modal.setBody(this.getFormHtml(formData));\n    };\n\n    /**\n     * Click on a \"Cancel\" form button.\n     *\n     * @method cancelButtonPressed\n     * @private\n     * @param {Event} e Form submission event.\n     */\n    DialogForm.prototype.cancelButtonPressed = function(e) {\n        e.preventDefault();\n\n        this.disableButtons();\n        this.modal.hide();\n    };\n\n    /**\n     * Validate form elements\n     * @return {boolean} true if client-side validation has passed, false if there are errors\n     */\n    DialogForm.prototype.validateElements = function() {\n        Event.notifyFormSubmitAjax(this.modal.getRoot().find('form')[0]);\n\n        // Now the change events have run, see if there are any \"invalid\" form fields.\n        var invalid = $.merge(\n            this.modal.getRoot().find('[aria-invalid=\"true\"]'),\n            this.modal.getRoot().find('.error')\n        );\n\n        // If we found invalid fields, focus on the first one and do not submit via ajax.\n        if (invalid.length) {\n            invalid.first().focus();\n            return false;\n        }\n\n        return true;\n    };\n\n    /**\n     * Disable form buttons during form submission\n     */\n    DialogForm.prototype.disableButtons = function() {\n        this.modal.getBody().find('form input[type=submit]').attr('disabled', true);\n    };\n\n    /**\n     * Enable form buttons after form submission (on validation error)\n     */\n    DialogForm.prototype.enableButtons = function() {\n        this.modal.getBody().find('form input[type=submit]').removeAttr('disabled');\n    };\n\n    /**\n     * Private method\n     *\n     * @method submitFormAjax\n     * @private\n     * @param {Event} e Form submission event.\n     */\n    DialogForm.prototype.submitFormAjax = function(e) {\n        // We don't want to do a real form submission.\n        e.preventDefault();\n\n        // If we found invalid fields, focus on the first one and do not submit via ajax.\n        if (!this.validateElements()) {\n            return;\n        }\n        this.disableButtons();\n\n        // Convert all the form elements values to a serialised string.\n        // Note that the button itself is not added, this may cause problems on\n        // forms with multiple submit buttons.\n        var formData = this.modal.getRoot().find('form').serialize();\n\n        M.util.js_pending('local_openlms_dialog_form_submit');\n        fetchFormHtml(this.config.formUrl, formData)\n            .then(function(response) {\n                if (response.dialog_form === 'render') {\n                    // Form was not accepted, it could be either because validation failed.\n                    var promise = $.Deferred();\n                    promise.resolve(response.html, processCollectedJavascript(response.javascript));\n                    this.modal.setBody(promise.promise());\n                    this.enableButtons();\n                    this.onValidationError();\n                    M.util.js_complete('local_openlms_dialog_form_submit');\n                } else if (response.dialog_form === 'submitted') {\n                    // Form was submitted properly. Hide the modal and execute callback.\n                    this.modal.hide();\n                    this.onSubmitSuccess(response);\n                    M.util.js_complete('local_openlms_dialog_form_submit');\n                    // Now either reload page or follow the redirect from form.\n                    if (this.config.afterSubmit === 'reload') {\n                        window.location.reload();\n                    } else if (this.config.afterSubmit === 'redirect') {\n                        window.location = response.redirecturl;\n                    } else {\n                        // Value 'nothing' relies on overriding of onSubmitSuccess via mustache template.\n                    }\n                }\n                return null;\n            }.bind(this))\n            .fail(function(exception) {\n                // NOTE: do not enable buttons here, there is no correct way to recover\n                // from unexpected errors.\n                Notification.exception(exception);\n            }.bind(this));\n    };\n\n    /**\n     * This triggers a form submission, so that any mform elements can do final tricks\n     * before the form submission is processed.\n     *\n     * @method submitForm\n     * @param {Event} e Form submission event.\n     * @private\n     */\n    DialogForm.prototype.submitForm = function(e) {\n        e.preventDefault();\n        this.modal.getRoot().find('form').submit();\n    };\n\n    /**\n     * Converts the JS that was received from collecting JS requirements on the $PAGE so it can be added to the existing page.\n     *\n     * Copied from core/fragment\n     *\n     * @param {string} js\n     * @return {string}\n     */\n    const processCollectedJavascript = function(js) {\n        var jsNodes = $(js);\n        var allScript = '';\n        jsNodes.each(function(index, scriptNode) {\n            scriptNode = $(scriptNode);\n            var tagName = scriptNode.prop('tagName');\n            if (tagName && (tagName.toLowerCase() === 'script')) {\n                if (scriptNode.attr('src')) {\n                    // We only reload the script if it was not loaded already.\n                    var exists = false;\n                    $('script').each(function(index, s) {\n                        if ($(s).attr('src') === scriptNode.attr('src')) {\n                            exists = true;\n                        }\n                        return !exists;\n                    });\n                    if (!exists) {\n                        allScript += ' { ';\n                        allScript += ' node = document.createElement(\"script\"); ';\n                        allScript += ' node.type = \"text/javascript\"; ';\n                        allScript += ' node.src = decodeURI(\"' + encodeURI(scriptNode.attr('src')) + '\"); ';\n                        allScript += ' document.getElementsByTagName(\"head\")[0].appendChild(node); ';\n                        allScript += ' } ';\n                    }\n                } else {\n                    allScript += ' ' + scriptNode.text();\n                }\n            }\n        });\n        return allScript;\n    };\n\n\n    /**\n     * Loads an HTML fragment from legacy form URL.\n     *\n     * @method fetchFormHtml\n     * @param {string} formUrl Legacy form URL.\n     * @param {string} formData serialised form data\n     * @return {Promise} JQuery promise object resolved when the fragment has been loaded.\n     */\n    var fetchFormHtml = function(formUrl, formData) {\n        $(window).bind('beforeunload', function() {\n            unloading = true;\n        });\n\n        var promise = $.Deferred();\n        var settings = {\n            type: 'POST',\n            dataType: 'json',\n            processData: false,\n            async: true,\n            headers: {'x-legacy-dialog-form-request': '1'},\n            data: formData,\n        };\n\n        $.ajax(formUrl, settings)\n            .done(function(response) {\n                if (typeof response === 'undefined') {\n                    promise.reject(new Error('Unreadable server response'));\n                } else if (typeof response.error !== 'undefined') {\n                    // Must be a Moodle ajax error.\n                    promise.reject(response);\n                } else if (typeof response.data !== 'undefined' && typeof response.data.dialog_form !== 'undefined') {\n                    promise.resolve(response.data);\n                } else {\n                    promise.reject(new Error('Invalid server response'));\n                }\n            })\n            .fail(function(jqXHR, textStatus, exception) {\n                if (unloading) {\n                    Log.error(\"Page unloaded.\");\n                    Log.error(exception);\n                } else {\n                    promise.reject(exception);\n                }\n            });\n\n        return promise;\n    };\n\n    return DialogForm;\n});\n"],"names":["define","$","ModalFactory","ModalEvents","Ajax","Notification","Y","Event","Str","Log","unloading","DialogForm","config","modalConfig","this","type","types","CANCEL","init","prototype","modal","M","util","js_pending","get_strings","key","component","then","create","bind","setBody","getFormHtml","setLarge","getRoot","on","hidden","notifyFormSubmitAjax","find","destroy","resetDirtyFormState","triggerElement","focus","getModal","addClass","noSubmitButtonPressed","cancelButtonPressed","submitFormAjax","onInit","show","js_complete","fail","exception","formData","promise","Deferred","fetchFormHtml","formUrl","response","dialog_form","resolve","html","processCollectedJavascript","javascript","reject","Error","ex","onSubmitSuccess","onValidationError","use","core_formchangechecker","reset_form_dirty_state","e","preventDefault","serialize","el","currentTarget","encodeURIComponent","attr","disableButtons","hide","validateElements","invalid","merge","length","first","getBody","enableButtons","removeAttr","afterSubmit","window","location","reload","redirecturl","submitForm","submit","js","jsNodes","allScript","each","index","scriptNode","tagName","prop","toLowerCase","exists","s","encodeURI","text","settings","dataType","processData","async","headers","data","ajax","done","error","jqXHR","textStatus"],"mappings":"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"}