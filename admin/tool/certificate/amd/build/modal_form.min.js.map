{"version":3,"file":"modal_form.min.js","sources":["../src/modal_form.js"],"sourcesContent":["// This file is part of the tool_certificate plugin for Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Display a form in a modal dialogue\n *\n * @module     tool_certificate/modal_form\n * @copyright  2018 Mitxel Moriana\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([\n    'jquery',\n    'core/modal_factory',\n    'core/modal_events',\n    'core/ajax',\n    'core/notification',\n    'core/yui',\n    'core/event',\n    'core/str'\n], function($, ModalFactory, ModalEvents, Ajax, Notification, Y, Event, Str) {\n    /**\n     * Constructor\n     *\n     * Shows the required form inside a modal dialogue\n     *\n     * @param {Object} config Parameters for the list. See defaultParameters above for examples.\n     * @param {String} config.formClass PHP class name that handles the form (should extend \\tool_certificate\\modal_form )\n     * @param {Object} config.modalConfig modal config - title, type, etc. By default type is set\n     *              to ModalFactory.types.SAVE_CANCEL\n     * @param {Object} config.args Arguments for the initial form rendering\n     * @param {$} config.triggerElement trigger element for a modal form\n     */\n    var ModalForm = function(config) {\n        this.config = config;\n        this.config.modalConfig = this.config.modalConfig || {};\n        this.config.modalConfig.type = this.config.modalConfig.type || ModalFactory.types.SAVE_CANCEL;\n        this.config.args = this.config.args || {};\n        this.init();\n    };\n\n    /**\n     * @var {Object} config\n     */\n    ModalForm.prototype.config = {};\n\n    /**\n     * @var {Modal} modal\n     */\n    ModalForm.prototype.modal = null;\n\n    /**\n     * Initialise the class.\n     *\n     * @private\n     */\n    ModalForm.prototype.init = function() {\n        var requiredStrings = [\n            {key: 'collapseall', component: 'moodle'},\n            {key: 'expandall', component: 'moodle'}\n        ];\n\n        // Ensure strings required for shortforms are always available.\n        M.util.js_pending('tool_certificate_modal_form_init');\n        Str.get_strings(requiredStrings)\n            .then(function() {\n                // We don't attach trigger element to modal here to avoid MDL-70395.\n                // We normally initialise ModalForm as result of some event\n                // on trigger element, so new listener is not required.\n                return ModalFactory.create(this.config.modalConfig);\n            }.bind(this))\n            .then(function(modal) {\n                // Keep a reference to the modal.\n                this.modal = modal;\n\n                // We need to make sure that the modal already exists when we render the form. Some form elements\n                // such as date_selector inspect the existing elements on the page to find the highest z-index.\n                this.modal.setBody(this.getBody($.param(this.config.args)));\n\n                // Forms are big, we want a big modal.\n                this.modal.setLarge();\n\n                // After successfull submit, when we press \"Cancel\" or close the dialogue by clicking on X in the top right corner.\n                this.modal.getRoot().on(ModalEvents.hidden, function() {\n                    // Notify listeners that the form is about to be submitted (this will reset atto autosave).\n                    Event.notifyFormSubmitAjax(this.modal.getRoot().find('form')[0], true);\n\n                    // Destroy the modal.\n                    this.modal.destroy();\n\n                    // Reset form-change-checker.\n                    this.resetDirtyFormState();\n\n                    // Focus on the trigger element that actually launched the modal.\n                    if (this.config.triggerElement !== null) {\n                        this.config.triggerElement.focus();\n                    }\n                }.bind(this));\n\n                // Add the class to the modal dialogue.\n                this.modal.getModal().addClass('tool-wp-modal-form-dialogue');\n\n                // We catch the press on submit buttons in the forms.\n                this.modal.getRoot().on('click', 'form input[type=submit][data-no-submit]', this.noSubmitButtonPressed.bind(this));\n\n                // We catch the form submit event and use it to submit the form with ajax.\n                this.modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this));\n\n                // Change the text for the save button.\n                if (typeof this.config.saveButtonText !== 'undefined' &&\n                    typeof this.modal.setSaveButtonText !== 'undefined') {\n                    this.modal.setSaveButtonText(this.config.saveButtonText);\n                }\n\n                this.onInit();\n\n                this.modal.show();\n                M.util.js_complete('tool_certificate_modal_form_init');\n                return this.modal;\n            }.bind(this))\n            .fail(Notification.exception);\n    };\n\n    /**\n     * On initialisation of a modal dialogue. Caller may override.\n     */\n    ModalForm.prototype.onInit = function() {\n        // We catch the modal save event, and use it to submit the form inside the modal.\n        // Triggering a form submission will give JS validation scripts a chance to check for errors.\n        this.modal.getRoot().on(ModalEvents.save, this.submitForm.bind(this));\n    };\n\n    /**\n     * @param {String} formDataString form data in format of a query string\n     * @method getBody\n     * @private\n     * @return {Promise}\n     */\n    ModalForm.prototype.getBody = function(formDataString) {\n        var promise = $.Deferred();\n        var params = {\n            formdata: formDataString,\n            form: this.config.formClass\n        };\n        M.util.js_pending('tool_certificate_modal_form_body');\n        Ajax.call([{\n            methodname: 'tool_certificate_modal_form',\n            args: params\n        }])[0]\n            .then(function(response) {\n                promise.resolve(response.html, processCollectedJavascript(response.javascript));\n                M.util.js_complete('tool_certificate_modal_form_body');\n                return null;\n            })\n            .fail(function(ex) {\n                promise.reject(ex);\n            });\n        return promise.promise();\n    };\n\n    /**\n     * On form submit. Caller may override\n     *\n     * @param {Object} response Response received from the form's \"process\" method\n     * @return {Object}\n     */\n    ModalForm.prototype.onSubmitSuccess = function(response) {\n        // By default this function does nothing. Return here is irrelevant, it is only present to make eslint happy.\n        return response;\n    };\n\n    /**\n     * On form validation error. Caller may override\n     *\n     * @return {mixed}\n     */\n    ModalForm.prototype.onValidationError = function() {\n        // By default this function does nothing. Return here is irrelevant, it is only present to make eslint happy.\n        return undefined;\n    };\n\n    /**\n     * On exception during form processing. Caller may override\n     *\n     * @param {Object} exception\n     */\n    ModalForm.prototype.onSubmitError = function(exception) {\n        Notification.exception(exception);\n    };\n\n    /**\n     * Reset \"dirty\" form state (warning if there are changes)\n     */\n    ModalForm.prototype.resetDirtyFormState = function() {\n        Y.use('moodle-core-formchangechecker', function() {\n            M.core_formchangechecker.reset_form_dirty_state();\n        });\n    };\n\n    /**\n     * Click on a \"submit\" button that is marked in the form as registerNoSubmitButton()\n     *\n     * @method submitButtonPressed\n     * @private\n     * @param {Event} e Form submission event.\n     */\n    ModalForm.prototype.noSubmitButtonPressed = function(e) {\n        e.preventDefault();\n\n        Event.notifyFormSubmitAjax(this.modal.getRoot().find('form')[0], true);\n\n        // Add the button name to the form data and submit it.\n        var formData = this.modal.getRoot().find('form').serialize(),\n            el = $(e.currentTarget);\n        formData = formData + '&' + encodeURIComponent(el.attr('name')) + '=' + encodeURIComponent(el.attr('value'));\n        this.modal.setBody(this.getBody(formData));\n    };\n\n    /**\n     * Validate form elements\n     * @return {boolean} true if client-side validation has passed, false if there are errors\n     */\n    ModalForm.prototype.validateElements = function() {\n        Event.notifyFormSubmitAjax(this.modal.getRoot().find('form')[0]);\n\n        // Now the change events have run, see if there are any \"invalid\" form fields.\n        var invalid = $.merge(\n            this.modal.getRoot().find('[aria-invalid=\"true\"]'),\n            this.modal.getRoot().find('.error')\n        );\n\n        // If we found invalid fields, focus on the first one and do not submit via ajax.\n        if (invalid.length) {\n            invalid.first().focus();\n            return false;\n        }\n\n        return true;\n    };\n\n    /**\n     * Disable buttons during form submission\n     */\n    ModalForm.prototype.disableButtons = function() {\n        this.modal.getFooter().find('[data-action]').attr('disabled', true);\n    };\n\n    /**\n     * Enable buttons after form submission (on validation error)\n     */\n    ModalForm.prototype.enableButtons = function() {\n        this.modal.getFooter().find('[data-action]').removeAttr('disabled');\n    };\n\n    /**\n     * Private method\n     *\n     * @method submitFormAjax\n     * @private\n     * @param {Event} e Form submission event.\n     */\n    ModalForm.prototype.submitFormAjax = function(e) {\n        // We don't want to do a real form submission.\n        e.preventDefault();\n\n        // If we found invalid fields, focus on the first one and do not submit via ajax.\n        if (!this.validateElements()) {\n            return;\n        }\n        this.disableButtons();\n\n        // Convert all the form elements values to a serialised string.\n        var formData = this.modal.getRoot().find('form').serialize();\n\n        // Now we can continue...\n        Ajax.call([{\n            methodname: 'tool_certificate_modal_form',\n            args: {\n                formdata: formData,\n                form: this.config.formClass\n            }\n        }])[0]\n            .then(function(response) {\n                if (!response.submitted) {\n                    // Form was not submitted, it could be either because validation failed or because no-submit button was pressed.\n                    var promise = $.Deferred();\n                    promise.resolve(response.html, processCollectedJavascript(response.javascript));\n                    this.modal.setBody(promise.promise());\n                    this.enableButtons();\n                    this.onValidationError();\n                } else {\n                    // Form was submitted properly. Hide the modal and execute callback.\n                    var data = JSON.parse(response.data);\n                    this.modal.hide();\n                    this.onSubmitSuccess(data);\n                }\n                return null;\n            }.bind(this))\n            .fail(this.onSubmitError.bind(this));\n    };\n\n    /**\n     * This triggers a form submission, so that any mform elements can do final tricks\n     * before the form submission is processed.\n     *\n     * @method submitForm\n     * @param {Event} e Form submission event.\n     * @private\n     */\n    ModalForm.prototype.submitForm = function(e) {\n        e.preventDefault();\n        this.modal.getRoot().find('form').submit();\n    };\n\n    /**\n     * Converts the JS that was received from collecting JS requirements on the $PAGE so it can be added to the existing page.\n     *\n     * Copied from core/fragment\n     *\n     * @param {string} js\n     * @return {string}\n     */\n    const processCollectedJavascript = function(js) {\n        var jsNodes = $(js);\n        var allScript = '';\n        jsNodes.each(function(index, scriptNode) {\n            scriptNode = $(scriptNode);\n            var tagName = scriptNode.prop('tagName');\n            if (tagName && (tagName.toLowerCase() === 'script')) {\n                if (scriptNode.attr('src')) {\n                    // We only reload the script if it was not loaded already.\n                    var exists = false;\n                    $('script').each(function(index, s) {\n                        if ($(s).attr('src') === scriptNode.attr('src')) {\n                            exists = true;\n                        }\n                        return !exists;\n                    });\n                    if (!exists) {\n                        allScript += ' { ';\n                        allScript += ' node = document.createElement(\"script\"); ';\n                        allScript += ' node.type = \"text/javascript\"; ';\n                        allScript += ' node.src = decodeURI(\"' + encodeURI(scriptNode.attr('src')) + '\"); ';\n                        allScript += ' document.getElementsByTagName(\"head\")[0].appendChild(node); ';\n                        allScript += ' } ';\n                    }\n                } else {\n                    allScript += ' ' + scriptNode.text();\n                }\n            }\n        });\n        return allScript;\n    };\n\n    return ModalForm;\n});\n"],"names":["define","$","ModalFactory","ModalEvents","Ajax","Notification","Y","Event","Str","ModalForm","config","modalConfig","this","type","types","SAVE_CANCEL","args","init","prototype","modal","M","util","js_pending","get_strings","key","component","then","create","bind","setBody","getBody","param","setLarge","getRoot","on","hidden","notifyFormSubmitAjax","find","destroy","resetDirtyFormState","triggerElement","focus","getModal","addClass","noSubmitButtonPressed","submitFormAjax","saveButtonText","setSaveButtonText","onInit","show","js_complete","fail","exception","save","submitForm","formDataString","promise","Deferred","params","formdata","form","formClass","call","methodname","response","resolve","html","processCollectedJavascript","javascript","ex","reject","onSubmitSuccess","onValidationError","onSubmitError","use","core_formchangechecker","reset_form_dirty_state","e","preventDefault","formData","serialize","el","currentTarget","encodeURIComponent","attr","validateElements","invalid","merge","length","first","disableButtons","getFooter","enableButtons","removeAttr","submitted","data","JSON","parse","hide","submit","js","jsNodes","allScript","each","index","scriptNode","tagName","prop","toLowerCase","exists","s","encodeURI","text"],"mappings":"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"}